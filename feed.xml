<?xml version="1.0" encoding="UTF-8"?>
  <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
      <title>Vert.x</title>
      <description>Vert.x is a tool-kit for building reactive applications on the JVM.</description>
      <link>https://vertx.io/</link>

      <atom:link href="https://vertx.io/feed.xml" rel="self" type="application/rss+xml" />
      
        <item>
          <title>Eclipse Vert.x 4 CR1 released!</title>
          <description>
      &lt;article&gt;&lt;p&gt;We are extremely pleased to announce the first release candidate of Vert.x 4.0 .&lt;/p&gt;
&lt;p&gt;We consider Vert.x 4.0 as feature complete and we will do a few release candidates to
allow the community to test it and report issues.&lt;/p&gt;
&lt;p&gt;Vert.x 4 is the evolution of the Vert.x 3.x series that will bring key features to Vert.x.&lt;/p&gt;
&lt;h4 id=&quot;tracing-control&quot;&gt;Tracing control&lt;/h4&gt;
&lt;p&gt;When a component (i.e server or client) is involved in a Vert.x instance configured with tracing, a new
tracing policy controls the component participation in a trace:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;with &lt;em&gt;IGNORE&lt;/em&gt; the component will not be involved in the trace, e.g an HTTP client will not report
a span in an existing trace&lt;/li&gt;
&lt;li&gt;with &lt;em&gt;PROPAGATE&lt;/em&gt; the component will report a span and propagate when possible&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ALWAYS&lt;/em&gt; the component will report a span or create a new trace&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;kafka-tracing&quot;&gt;Kafka tracing&lt;/h4&gt;
&lt;p&gt;Our Kafka client is now able to propagate and report span in active traces.&lt;/p&gt;
&lt;h4 id=&quot;web&quot;&gt;Web&lt;/h4&gt;
&lt;p&gt;A new method has been added to &lt;code&gt;RoutingContext&lt;/code&gt; to allow sending responses from asynchronous calls using
Vert.x futures.&lt;/p&gt;
&lt;p&gt;For example, returning the content of a file in a single action:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;router.route()
  .respond(ctx -&gt;
    vertx.fileSystem()
      .readFile(&lt;span class=&quot;hljs-string&quot;&gt;&quot;somefile.json&quot;&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method allows composition of &lt;code&gt;Future&lt;/code&gt;s. The Future result will be processed by the &lt;code&gt;JSON&lt;/code&gt; codec if no data has been written,
otherwise it will use the future success/failure to decide how to terminate the connection.&lt;/p&gt;
&lt;p&gt;This method should improve the code readablility of current and future applications.&lt;/p&gt;
&lt;h4 id=&quot;web-client-auth&quot;&gt;Web client auth&lt;/h4&gt;
&lt;p&gt;With this release you will be able to use &lt;code&gt;Basic&lt;/code&gt;, &lt;code&gt;Digest&lt;/code&gt; and &lt;code&gt;Bearer&lt;/code&gt; authentication in a single and concise
API: &lt;code&gt;client.authentication(new Credentials(...))&lt;/code&gt;. This is a type safe alternative to compute the headers yourself.&lt;/p&gt;
&lt;h4 id=&quot;redis-client&quot;&gt;Redis client&lt;/h4&gt;
&lt;p&gt;Redis clients are now garanteed to call all handlers on the correct event loop. This reduces
context switches and remove possible races.&lt;/p&gt;
&lt;h4 id=&quot;rabbitmq-client-tls-support&quot;&gt;RabbitMQ client TLS support&lt;/h4&gt;
&lt;p&gt;RabbitMQ client can now connect using TLS.&lt;/p&gt;
&lt;h4 id=&quot;sockjs-javascript-client-versionning-change&quot;&gt;SockJS JavaScript client versionning change&lt;/h4&gt;
&lt;p&gt;SockJS event bus JavaScript client is now versionned according to the EventBus bridge protocol
and is now independant on the Vert.x version.&lt;/p&gt;
&lt;p&gt;That has always been the case and with Vert.x 4 we decided to make this change to simplify application
upgrade since upgrading Vert.x will not imply to upgrade event bus bridge clients.&lt;/p&gt;
&lt;p&gt;In order to ensure that the artifact can be used both with Vert.x 3 and Vert.x 4, a new name has
 been choosen for it: &lt;a href=&quot;https://www.npmjs.com/package/@vertx/eventbus-bridge-client.js&quot;&gt;@vertx/eventbus-bridge-client.js&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;finally&quot;&gt;Finally&lt;/h4&gt;
&lt;p&gt;This is the first relase candidate of Vert.x 4, you can of course expect more as we get feedback from the community and fix issues that we failed to catch before.&lt;/p&gt;
&lt;p&gt;You can also read the previous announces to know more about the overral changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-beta-4-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-beta-4-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-beta-3-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-beta-3-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-beta-2-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-beta-2-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-beta-1-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-beta-1-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-5-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-5-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-5-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-5-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-4-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-4-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-3-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-3-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-2-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-2-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-1-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-1-released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/4.0.0-Deprecations-and-breaking-changes&quot;&gt;deprecations and breaking changes&lt;/a&gt;
 can be found on the wiki.&lt;/p&gt;
&lt;p&gt;For this release there are no Docker images.&lt;/p&gt;
&lt;p&gt;The release artifacts have been deployed to &lt;a href=&quot;https://search.maven.org/search?q=g:io.vertx%20AND%20v:4.0.0.CR1&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://repo1.maven.org/maven2/io/vertx/vertx-stack-manager/4.0.0.CR1/&quot;&gt;Maven Central&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can bootstrap a Vert.x 4.0.0.CR1 project using &lt;a href=&quot;https://start.vertx.io&quot;&gt;https://start.vertx.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The documentation has been deployed on this preview web-site &lt;a href=&quot;https://vertx-web-site.github.io/docs/&quot;&gt;https://vertx-web-site.github.io/docs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That’s it! Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Wed, 04 Nov 2020 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-4-cr1-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-4-cr1-released</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 3.9.4 released!</title>
          <description>
      &lt;article&gt;&lt;p&gt;We are extremely pleased to announce that the Eclipse Vert.x version 3.9.4 has been released.&lt;/p&gt;
&lt;p&gt;Since the release of Vert.x 3.9.4, quite a few bugs have been reported. We would like to thank you all for reporting these issues.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.9.4-Release-Notes&quot;&gt;3.9.4 release notes&lt;/a&gt; can be found on the wiki, as well as the
list of &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.9.4-Deprecations-and-breaking-changes&quot;&gt;deprecations and breaking changes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker images are available on &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Vert.x distribution can be downloaded on the website but is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge is available from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;NPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;Bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;WebJars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The release artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.9.4%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.9.4/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That’s it! Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Thu, 15 Oct 2020 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-3-9-4-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-9-4-released</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>JWT Authorization for Vert.x with Keycloak</title>
          <description>
      &lt;article&gt;&lt;h1 id=&quot;jwt-authorization-for-vert-x-with-keycloak&quot;&gt;JWT Authorization for Vert.x with Keycloak&lt;/h1&gt;
&lt;h2 id=&quot;tl-dr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;In this blog post you’ll learn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JWT foundations&lt;/li&gt;
&lt;li&gt;How to protect routes with a JWT Authorization&lt;/li&gt;
&lt;li&gt;How to extract claims from a JWT encoded token&lt;/li&gt;
&lt;li&gt;How to apply RBAC with Keycloak Realm roles&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;hello-again&quot;&gt;Hello again&lt;/h3&gt;
&lt;p&gt;Hi there! In my last blog post &lt;a href=&quot;https://vertx.io/blog/easy-sso-for-vert-x-with-keycloak/&quot;&gt;Easy SSO for Vert.x with Keycloak&lt;/a&gt; we learned how to configure single sign-on for a Vert.x web application with Keycloak and OpenID connect. This time we’ll see how we can protect an application with Vert.x’s &lt;a href=&quot;https://vertx.io/docs/vertx-web/java/#_jwt_authorisation&quot;&gt;JWT Authorization&lt;/a&gt; support and Keycloak.&lt;/p&gt;
&lt;h3 id=&quot;keycloak-setup&quot;&gt;Keycloak Setup&lt;/h3&gt;
&lt;p&gt;To secure our Vert.x app, we need to use a Keycloak server for obtaining JWT tokens. Although &lt;a href=&quot;https://www.keycloak.org/docs/latest/getting_started/&quot;&gt;Keycloak has a great getting started guide&lt;/a&gt; I wanted to make it a bit easier to put everything together, therefore I prepared a local Keycloak docker container &lt;a href=&quot;https://github.com/thomasdarimont/vertx-playground/tree/master/jwt-service-vertx#start-keycloak-with-the-vertx-realm&quot;&gt;as described here&lt;/a&gt;, which comes with all the required configuration in place, that you can start easily.&lt;/p&gt;
&lt;p&gt;The preconfigured Keycloak realm &lt;code&gt;vertx&lt;/code&gt; contains a &lt;code&gt;vertx-service&lt;/code&gt; OpenID connect client for our Vert.x app and a set
of users for testing. To ease testing, the &lt;code&gt;vertx-service&lt;/code&gt; is configured with &lt;code&gt;Direct Access Grant&lt;/code&gt; enabled in Keycloak, which
enables support for the OAuth2 resource owner password credentials grant (ROPC) flow.&lt;/p&gt;
&lt;p&gt;To start Keycloak with the preconfigured realm, just start the docker container with the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;docker run \
  -&lt;span class=&quot;ruby&quot;&gt;it \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;-name vertx-keycloak \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;-rm \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;e &lt;span class=&quot;hljs-constant&quot;&gt;KEYCLOAK_USER&lt;/span&gt;=admin \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;e &lt;span class=&quot;hljs-constant&quot;&gt;KEYCLOAK_PASSWORD&lt;/span&gt;=admin \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;e &lt;span class=&quot;hljs-constant&quot;&gt;KEYCLOAK_IMPORT&lt;/span&gt;=&lt;span class=&quot;hljs-regexp&quot;&gt;/tmp/vertx&lt;/span&gt;-realm.json \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;v &lt;span class=&quot;hljs-variable&quot;&gt;$PWD&lt;/span&gt;/vertx-realm.&lt;span class=&quot;hljs-symbol&quot;&gt;json:&lt;/span&gt;/tmp/vertx-realm.json \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;v &lt;span class=&quot;hljs-variable&quot;&gt;$PWD&lt;/span&gt;/&lt;span class=&quot;hljs-symbol&quot;&gt;data:&lt;/span&gt;/opt/jboss/keycloak/standalone/data \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;p &lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt; \
&lt;/span&gt;  quay.io/keycloak/keycloak:11.0.2&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;vert-x-app&quot;&gt;Vert.x App&lt;/h2&gt;
&lt;p&gt;The example app consists of a single &lt;code&gt;Verticle&lt;/code&gt;, that runs on &lt;code&gt;http://localhost:3000&lt;/code&gt; and provides a few routes with protected resources. &lt;a href=&quot;https://github.com/thomasdarimont/vertx-playground/tree/master/jwt-service-vertx/src/main/java/demo/MainVerticle.java&quot;&gt;You can find the complete example here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our web app contains the following protected routes with handlers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/api/greet&lt;/code&gt; - The greeting resource, which returns a greeting message, only authenticated users can access this resource.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/api/user&lt;/code&gt; - The user resource, which returns some information about the user, only users with role &lt;code&gt;user&lt;/code&gt; can access this resource.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/api/admin&lt;/code&gt; - The user resource, which returns some information about the admin, only users with role &lt;code&gt;admin&lt;/code&gt; can access this resource.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This example is built with Vert.x version 3.9.3.&lt;/p&gt;
&lt;h3 id=&quot;running-the-app-in-the-console&quot;&gt;Running the app in the console&lt;/h3&gt;
&lt;p&gt;To run the app, we need to build it first:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;cd jwt-&lt;span class=&quot;hljs-keyword&quot;&gt;service&lt;/span&gt;-vertx
mvn clean &lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a jar, which we can run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;java&lt;/span&gt; -jar target/&lt;span class=&quot;hljs-regexp&quot;&gt;*.jar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note, that we need to start Keycloak first, since our app fetches the configuration from Keycloak on startup.&lt;/p&gt;
&lt;h3 id=&quot;running-the-app-in-the-ide&quot;&gt;Running the app in the IDE&lt;/h3&gt;
&lt;p&gt;We can also run the app directly from your favourite IDE like IntelliJ Idea or Eclipse.
To run the app from an IDE, we need to create a launch configuration and use the main class &lt;code&gt;io.vertx.core.Launcher&lt;/code&gt;. Then set the the program arguments to
&lt;code&gt;run demo.MainVerticle&lt;/code&gt; and use the classpath of the &lt;code&gt;jwt-service-vertx&lt;/code&gt; module. 
With that in place we should be able to run the app.&lt;/p&gt;
&lt;h2 id=&quot;jwt-authorization&quot;&gt;JWT Authorization&lt;/h2&gt;
&lt;h3 id=&quot;jwt-foundations&quot;&gt;JWT Foundations&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7519&quot;&gt;JSON Web Token (JWT)&lt;/a&gt; is an open standard to securely exchange information between two parties in the form 
of &lt;a href=&quot;https://base64.guru/standards/base64url&quot;&gt;Base64URL&lt;/a&gt; encoded JSON objects. 
A standard JWT is just a string which comprises three base64url encoded parts header, payload and a signature, which are separated by a “&lt;code&gt;.&lt;/code&gt;“ character. 
There are other variants of JWT that can have more parts.&lt;/p&gt;
&lt;p&gt;An example JWT can look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;eyJhbGciOiJSUzI&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-label&quot;&gt;NiIsInR5&lt;/span&gt;cCIgOiAiSldUIiwia&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;lkIiA&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;ICJj&lt;span class=&quot;hljs-label&quot;&gt;N00&lt;/span&gt;xX&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;hkWjAtWD&lt;span class=&quot;hljs-label&quot;&gt;NyZTl1&lt;/span&gt;dmZLSFRDUWRxYXJQY&lt;span class=&quot;hljs-label&quot;&gt;nBMblVJMHltdkF0&lt;/span&gt;U&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;RzI&lt;span class=&quot;hljs-label&quot;&gt;n0&lt;/span&gt;.eyJleHAiOjE&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;MDEzMT&lt;span class=&quot;hljs-keyword&quot;&gt;g0&lt;/span&gt;MjIsImlhdCI&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;MTYwMTMxODEyMiwia&lt;span class=&quot;hljs-label&quot;&gt;nRpIjoiNzYzNWY1&lt;/span&gt;YTEtZjFk&lt;span class=&quot;hljs-label&quot;&gt;Ny00&lt;/span&gt;&lt;span class=&quot;hljs-label&quot;&gt;NTdkLWI4&lt;/span&gt;&lt;span class=&quot;hljs-label&quot;&gt;NjktYWQ0&lt;/span&gt;OTIz&lt;span class=&quot;hljs-label&quot;&gt;NTJmNGQyIiwiaXNzIjoiaHR0&lt;/span&gt;cDovL&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;xvY&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;Fsa&lt;span class=&quot;hljs-keyword&quot;&gt;G9&lt;/span&gt;zdD&lt;span class=&quot;hljs-preprocessor&quot;&gt;o4&lt;/span&gt;MDgwL&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;F&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;dGg&lt;span class=&quot;hljs-title&quot;&gt;vcmVhbG1&lt;/span&gt;zL&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;Zlc&lt;span class=&quot;hljs-label&quot;&gt;nR4&lt;/span&gt;IiwiYXVkIjoiYW&lt;span class=&quot;hljs-label&quot;&gt;Njb3&lt;/span&gt;VudCIsI&lt;span class=&quot;hljs-label&quot;&gt;nN1&lt;/span&gt;YiI&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;IjI&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;Yj&lt;span class=&quot;hljs-label&quot;&gt;NmYWMwLTlhZWMtNDQyMS04&lt;/span&gt;MW&lt;span class=&quot;hljs-label&quot;&gt;NmLWQ0&lt;/span&gt;YjAy&lt;span class=&quot;hljs-label&quot;&gt;NDI4&lt;/span&gt;ZjkwMSIsI&lt;span class=&quot;hljs-label&quot;&gt;nR5&lt;/span&gt;cCI&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;IkJlYXJlciIsImF&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;cCI&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;I&lt;span class=&quot;hljs-label&quot;&gt;nZlcnR4&lt;/span&gt;LX&lt;span class=&quot;hljs-label&quot;&gt;NlcnZpY2&lt;/span&gt;UiLCJzZX&lt;span class=&quot;hljs-label&quot;&gt;NzaW9&lt;/span&gt;uX&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-label&quot;&gt;N0&lt;/span&gt;YXRlIjoi&lt;span class=&quot;hljs-label&quot;&gt;Njg3&lt;/span&gt;MDgyMTMt&lt;span class=&quot;hljs-label&quot;&gt;NDBiNy00&lt;/span&gt;&lt;span class=&quot;hljs-label&quot;&gt;NThhLWFlZTEtMzlkNmY5&lt;/span&gt;ZGEw&lt;span class=&quot;hljs-label&quot;&gt;N2&lt;/span&gt;FkIiwiYW&lt;span class=&quot;hljs-label&quot;&gt;NyIjoiMSIsInJlYWxtX2&lt;/span&gt;FjY&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;VzcyI&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;eyJyb&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;xlcyI&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;WyJvZmZsaW&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;lX&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;FjY&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;VzcyIsI&lt;span class=&quot;hljs-label&quot;&gt;nVtYV9&lt;/span&gt;hdXRob&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;JpemF&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;aW&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;uIiwidX&lt;span class=&quot;hljs-label&quot;&gt;NlciJdfSwicmVzb3&lt;/span&gt;VyY&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;VfYW&lt;span class=&quot;hljs-label&quot;&gt;NjZXNzIjp7&lt;/span&gt;ImFjY&lt;span class=&quot;hljs-number&quot;&gt;291&lt;/span&gt;b&lt;span class=&quot;hljs-label&quot;&gt;nQiOnsicm9&lt;/span&gt;sZXMiOlsibWFuYWdlLWFjY&lt;span class=&quot;hljs-number&quot;&gt;291&lt;/span&gt;b&lt;span class=&quot;hljs-label&quot;&gt;nQiLCJtYW5&lt;/span&gt;hZ&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;UtYW&lt;span class=&quot;hljs-label&quot;&gt;Njb3&lt;/span&gt;VudC&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;saW&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;rcyIsI&lt;span class=&quot;hljs-label&quot;&gt;nZpZXctcHJvZmlsZSJdfX0&lt;/span&gt;sI&lt;span class=&quot;hljs-label&quot;&gt;nNjb3&lt;/span&gt;BlIjoiZW&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;haWwgcHJvZmlsZSIsImVtYWlsX&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;ZlcmlmaWVkIjp&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;c&lt;span class=&quot;hljs-label&quot;&gt;nVlLCJuYW1&lt;/span&gt;lIjoiVGhlbyBUZX&lt;span class=&quot;hljs-label&quot;&gt;N0&lt;/span&gt;ZXIiLCJwcmVmZXJyZWRfdX&lt;span class=&quot;hljs-label&quot;&gt;Nlcm5&lt;/span&gt;hbWUiOiJ&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;ZX&lt;span class=&quot;hljs-label&quot;&gt;N0&lt;/span&gt;ZXIiLCJ&lt;span class=&quot;hljs-label&quot;&gt;naXZlbl9&lt;/span&gt;uYW&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;lIjoiVGhlbyIsImZhbWlseV&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;uYW&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;lIjoiVGVzdGVyIiwiZW&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;haWwiOiJ&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;b&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;rdGVzdGVyQGxvY&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;Fsa&lt;span class=&quot;hljs-keyword&quot;&gt;G9&lt;/span&gt;zdCJ&lt;span class=&quot;hljs-number&quot;&gt;9.&lt;/span&gt;&lt;span class=&quot;hljs-label&quot;&gt;NN1&lt;/span&gt;ZGE&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;f&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;LHE&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;u&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;T&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;Vfq&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;yPMKoZ&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;SmrUxoFopAXZ&lt;span class=&quot;hljs-title&quot;&gt;m5&lt;/span&gt;wVgMOsJHB&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;BgHQTD&lt;span class=&quot;hljs-title&quot;&gt;m7&lt;/span&gt;u&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;oTVU&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;ZHlKH&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;-&lt;span class=&quot;hljs-preprocessor&quot;&gt;o11&lt;/span&gt;RKK&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;Mz&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;mLqMy&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;EPdkGY&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;Bqtj&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;LZ&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;oTp&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;FaVqY&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;g5&lt;/span&gt;Fr&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;veXYpOMbc&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;fke-e&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;h&lt;span class=&quot;hljs-keyword&quot;&gt;G8&lt;/span&gt;sAfSjWz&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;Mq&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;BUhJ&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;HdK&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;TTIte&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;pub&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-label&quot;&gt;nbUs4&lt;/span&gt;APYystJWx&lt;span class=&quot;hljs-number&quot;&gt;49&lt;/span&gt;cYmUwZ&lt;span class=&quot;hljs-number&quot;&gt;-5&lt;/span&gt;c&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;X&lt;span class=&quot;hljs-number&quot;&gt;295&lt;/span&gt;V-&lt;span class=&quot;hljs-label&quot;&gt;NX9&lt;/span&gt;UksuMSzFItZ&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;cACVKi&lt;span class=&quot;hljs-number&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;hljs-title&quot;&gt;m9&lt;/span&gt;lkR&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;Ru&lt;span class=&quot;hljs-label&quot;&gt;NQKFTuLvWsorz9&lt;/span&gt;yRx&lt;span class=&quot;hljs-number&quot;&gt;884&lt;/span&gt;e&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;c&lt;span class=&quot;hljs-label&quot;&gt;noT_JmfSfYBIl31&lt;/span&gt;Ff&lt;span class=&quot;hljs-label&quot;&gt;nQzUtCjluUzuD9&lt;/span&gt;jVXc_vgC&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;hljs-label&quot;&gt;num_0&lt;/span&gt;AreOZiUzpglb&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;UjKXjswTHF-v_&lt;span class=&quot;hljs-label&quot;&gt;nEIaq7&lt;/span&gt;Ym&lt;span class=&quot;hljs-title&quot;&gt;M5&lt;/span&gt;WKpeg&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The header and payload sections contain information as a JSON object, whereas the signature is just a plain string. JSON objects contain key value pairs which are called &lt;code&gt;claims&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The claims information can be verified and trusted because it is digitally signed with the private key from a public/private key-pair. 
The signature can later be verified with a corresponding public key. The identifier of the public/private key-pair used to sign a JWT can be 
contained in a special claim called &lt;code&gt;kid&lt;/code&gt; (key identifier) in the header section of the JWT.&lt;/p&gt;
&lt;p&gt;An example for a JWT header that references a public/private key-pair looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;{
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;alg&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;RS256&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;typ&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;JWT&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;kid&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;c7M1_hdZ0-X3re9uvfKHTCQdqarPbpLnUI0ymvAtSTs&quot;&lt;/span&gt;
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is quite common to use JWTs to convey information about authentication (user identity) and authorization (scopes, user roles, permissions and other claims). 
OpenID providers such as &lt;a href=&quot;https://www.keycloak.org/&quot;&gt;Keycloak&lt;/a&gt; support issuing OAuth2 access tokens after authentication for users to clients in the form of JWTs. 
An access token can then be used to access other services or APIs on behalf of the user. The server providing those services or APIs is often called &lt;code&gt;resource server&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An example JWT payload generated by Keycloak looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;{
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;exp&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1601318422&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;iat&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1601318122&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;jti&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;7635f5a1-f1d7-457d-b869-ad492352f4d2&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;iss&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://localhost:8080/auth/realms/vertx&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;aud&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;account&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;sub&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;27b3fac0-9aec-4421-81cf-d4b02428f901&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;typ&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bearer&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;azp&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;vertx-service&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;session_state&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;68708213-40b7-458a-aee1-39d6f9da07ad&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;acr&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;realm_access&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;{
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;roles&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;[
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;offline_access&quot;&lt;/span&gt;,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;uma_authorization&quot;&lt;/span&gt;,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt;
    ]
  &lt;/span&gt;}&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;scope&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;email profile&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;email_verified&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Theo Tester&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;preferred_username&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;tester&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;given_name&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Theo&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;family_name&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Tester&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;email&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;tom+tester@localhost&quot;&lt;/span&gt;
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If a &lt;code&gt;resource server&lt;/code&gt; receives a request with such an access token, it needs to verify and inspect the token before it can trust its content. 
To verify the token, the &lt;code&gt;resource server&lt;/code&gt; needs to obtain the &lt;code&gt;public key&lt;/code&gt; to check the token signature. 
This &lt;code&gt;public key&lt;/code&gt; can either be configured statically or fetched dynamically from the OpenID Provider by leveraging the &lt;code&gt;kid&lt;/code&gt; information from the JWT header section. 
Note that most &lt;code&gt;OpenID providers&lt;/code&gt;, such as Keycloak, provide a dedicated endpoint for dynamic public key lookups, e.g. &lt;code&gt;http://localhost:8080/auth/realms/vertx/protocol/openid-connect/certs&lt;/code&gt;.
A standard for providing public key information is &lt;a href=&quot;https://tools.ietf.org/html/rfc7517&quot;&gt;JSON Web Key Set (JWKS)&lt;/a&gt;. 
The JWKS information is usually cached by the resource server to avoid the overhead of fetching JWKS for every request.&lt;/p&gt;
&lt;p&gt;An example response for Keycloak’s JWKS endpoint looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;{
   &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;keys&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;[
      {
         &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;kid&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;c7M1_hdZ0-X3re9uvfKHTCQdqarPbpLnUI0ymvAtSTs&quot;&lt;/span&gt;&lt;/span&gt;,
         &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;kty&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;RSA&quot;&lt;/span&gt;&lt;/span&gt;,
         &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;alg&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;RS256&quot;&lt;/span&gt;&lt;/span&gt;,
         &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;use&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;sig&quot;&lt;/span&gt;&lt;/span&gt;,
         &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;n&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;iFuX2bAXA99Yrv6YEvpV9tjS52krP5UJ7lFL02Zl83PPV6PiLIWKTqF71bfTKnVDxO421xAsBw9f6dlgoyxxY1H_bzJQQryQkry7DA7tI_SnKVsehLgeF-tCcjRF_MF1kM14F1A5Zsu6oYIkMZvgJIRM-ejtz3aUcdnLcTvpPrmfvj7KwRgNsfm6Q-kO0-OAf6m6LaRvaC5VpTIRoVxXNhSIiGKuZ4d05Yk0-HdOR0D0sfOujYzleJmTGBEIAmdWpZqUXiSWbzmpw8mJmacFTP9v8lsTUYZrXc69xm5fHaNJ6PO_E-IKiPKT7OeoM2l3HIK76a4azVL1Ewbv1UtMFw&quot;&lt;/span&gt;&lt;/span&gt;,
         &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;e&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;AQAB&quot;&lt;/span&gt;&lt;/span&gt;,
         &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;x5c&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;[
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;MIICmTCCAYECBgFwplKOujANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAV2ZXJ0eDAeFw0yMDAzMDQxNjExMzNaFw0zMDAzMDQxNjEzMTNaMBAxDjAMBgNVBAMMBXZlcnR4MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAiFuX2bAXA99Yrv6YEvpV9tjS52krP5UJ7lFL02Zl83PPV6PiLIWKTqF71bfTKnVDxO421xAsBw9f6dlgoyxxY1H/bzJQQryQkry7DA7tI/SnKVsehLgeF+tCcjRF/MF1kM14F1A5Zsu6oYIkMZvgJIRM+ejtz3aUcdnLcTvpPrmfvj7KwRgNsfm6Q+kO0+OAf6m6LaRvaC5VpTIRoVxXNhSIiGKuZ4d05Yk0+HdOR0D0sfOujYzleJmTGBEIAmdWpZqUXiSWbzmpw8mJmacFTP9v8lsTUYZrXc69xm5fHaNJ6PO/E+IKiPKT7OeoM2l3HIK76a4azVL1Ewbv1UtMFwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQBxcXiTtGoo4/eMNwhagYH8QpK1n7fxgzn4mkESU3wD+rnPOAh/xFmx5c3aq8X+8W2z7oopO86ZBSQ8HfbzViBP0uwvf7s7E6Q8FOqrUNv0Kj308A7hF1IOqOhCJE2nABIWJduYz5dWZN434Q9El30L1eOYTtjBUmCdP7/CM+1bvxIT+CYrWmjI9zCMJxhuixmLffppsLCjGtNgFBemjQyCrLxpEGCfy8QGb4pTY/XaHuJ7k6ZaQkVeTbeDzaZbHc9zT5qgf6w4Gp7y+uPZdAsasrwiqm3YBtyBfaK42luk09nHpV6PRKpftnyLVPwlQiJAW6ZMckvDwmnDst70msnb&quot;&lt;/span&gt;
         ]&lt;/span&gt;,
         &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;x5t&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;MVYTXCx5cUQ8lT1ymIDDRYO7_ZI&quot;&lt;/span&gt;&lt;/span&gt;,
         &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;x5t#S256&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;yBDVTlfR0e7cv3HxbbkfvGKVs5W1VQtFs7haE_js3DY&quot;&lt;/span&gt;
      &lt;/span&gt;}
   ]
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;
The `keys` array contains the JWKS structure with the public key information that belongs to the public/private key-pair which was used
to sign the JWT access token from above. Note the matching `kid` claim from our earlier JWT header example.

Now that we have the appropriate public key, we can use the information from the JWT header to validate the signature of the JWT access token.
If the signature is valid, we can go on and check additional claims from the payload section of the JWT, such as expiration, allowed issuer and audience etc. 

Now that we have the necessary building blocks in place, we can finally look at how to configure JWT authorization in Vert.x.

### JWT Authorization in Vert.x

Setting up JWT authorization in Vert.x is quite easy. First we need to add the `vertx-auth-jwt` module as a dependency to our project.

&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.vertx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;vertx-auth-jwt&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our example the whole JWT authorization setup happens in the method &lt;code&gt;setupJwtAuth&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We use a &lt;code&gt;WebClient&lt;/code&gt; to dynamically fetch the public key information from the &lt;code&gt;/protocol/openid-connect/certs&lt;/code&gt; JWKS endpoint relative to our Keycloak issuer URL. 
After that, we configure a &lt;code&gt;JWTAuth&lt;/code&gt; instance and customize the JWT validation via &lt;code&gt;JWTOptions&lt;/code&gt; and &lt;code&gt;JWTAuthOptions&lt;/code&gt;. 
Note that we use Keycloak’s realm roles for role based authorization via the &lt;code&gt;JWTAuthOptions#setPermissionsClaimKey(..)&lt;/code&gt; method.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Future&lt;Startup&gt; &lt;span class=&quot;hljs-title&quot;&gt;setupJwtAuth&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Startup startup)&lt;/span&gt; &lt;/span&gt;{

    var jwtConfig = startup.config.getJsonObject(&lt;span class=&quot;hljs-string&quot;&gt;&quot;jwt&quot;&lt;/span&gt;);
    var issuer = jwtConfig.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;issuer&quot;&lt;/span&gt;);
    var issuerUri = URI.create(issuer);

    &lt;span class=&quot;hljs-comment&quot;&gt;// derive JWKS uri from Keycloak issuer URI&lt;/span&gt;
    var jwksUri = URI.create(jwtConfig.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;jwksUri&quot;&lt;/span&gt;, String.format(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s://%s:%d%s&quot;&lt;/span&gt;,
            issuerUri.getScheme(), issuerUri.getHost(), issuerUri.getPort(), issuerUri.getPath() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;/protocol/openid-connect/certs&quot;&lt;/span&gt;)));

    var promise = Promise.&lt;JWTAuth&gt;promise();

    &lt;span class=&quot;hljs-comment&quot;&gt;// fetch JWKS from `/certs` endpoint&lt;/span&gt;
    webClient.get(jwksUri.getPort(), jwksUri.getHost(), jwksUri.getPath())
            .as(BodyCodec.jsonObject())
            .send(ar -&gt; {

                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!ar.succeeded()) {
                    startup.bootstrap.fail(String.format(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Could not fetch JWKS from URI: %s&quot;&lt;/span&gt;, jwksUri));
                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
                }

                var response = ar.result();

                var jwksResponse = response.body();
                var keys = jwksResponse.getJsonArray(&lt;span class=&quot;hljs-string&quot;&gt;&quot;keys&quot;&lt;/span&gt;);

                &lt;span class=&quot;hljs-comment&quot;&gt;// Configure JWT validation options&lt;/span&gt;
                var jwtOptions = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JWTOptions();
                jwtOptions.setIssuer(issuer);

                &lt;span class=&quot;hljs-comment&quot;&gt;// extract JWKS from keys array&lt;/span&gt;
                var jwks = ((List&lt;Object&gt;) keys.getList()).stream()
                        .map(o -&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject((Map&lt;String, Object&gt;) o))
                        .collect(Collectors.toList());

                &lt;span class=&quot;hljs-comment&quot;&gt;// configure JWTAuth&lt;/span&gt;
                var jwtAuthOptions = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JWTAuthOptions();
                jwtAuthOptions.setJwks(jwks);
                jwtAuthOptions.setJWTOptions(jwtOptions);
                jwtAuthOptions.setPermissionsClaimKey(jwtConfig.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;permissionClaimsKey&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;realm_access/roles&quot;&lt;/span&gt;));

                JWTAuth jwtAuth = JWTAuth.create(vertx, jwtAuthOptions);
                promise.complete(jwtAuth);
            });

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; promise.future().compose(auth -&gt; {
        jwtAuth = auth;
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Future.succeededFuture(startup);
    });
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;protecting-routes-with-jwtauthhandler&quot;&gt;Protecting routes with JWTAuthHandler&lt;/h3&gt;
&lt;p&gt;Now that our &lt;code&gt;JWTAuth&lt;/code&gt; is configured, we can use the &lt;code&gt;JWTAuthHandler&lt;/code&gt; in the &lt;code&gt;setupRouter&lt;/code&gt; method to apply 
JWT authorization to all routes matching the path pattern &lt;code&gt;/api/*&lt;/code&gt;. The &lt;code&gt;JWTAuthHandler&lt;/code&gt; validates received JWTs and performs 
additional checks like expiration and allowed issuers. With that in place, we configure our actual routes in &lt;code&gt;setupRoutes&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Future&lt;Startup&gt; &lt;span class=&quot;hljs-title&quot;&gt;setupRouter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Startup startup)&lt;/span&gt; &lt;/span&gt;{

    router = Router.router(vertx);

    router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/*&quot;&lt;/span&gt;).handler(JWTAuthHandler.create(jwtAuth));

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Future.succeededFuture(startup);
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Future&lt;Startup&gt; &lt;span class=&quot;hljs-title&quot;&gt;setupRoutes&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Startup startup)&lt;/span&gt; &lt;/span&gt;{

    router.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/greet&quot;&lt;/span&gt;).handler(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;::handleGreet);
    router.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/user&quot;&lt;/span&gt;).handler(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;::handleUserData);
    router.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/admin&quot;&lt;/span&gt;).handler(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;::handleAdminData);

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Future.succeededFuture(startup);
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;extracting-user-information-from-jwtuser&quot;&gt;Extracting user information from JWTUser&lt;/h3&gt;
&lt;p&gt;To access user information in our &lt;code&gt;handleGreet&lt;/code&gt; method, we cast the result of the &lt;code&gt;io.vertx.ext.web.RoutingContext#user&lt;/code&gt; method to &lt;code&gt;JWTUser&lt;/code&gt; 
which allows us to access token claim information via the &lt;code&gt;io.vertx.ext.auth.jwt.impl.JWTUser#principal&lt;/code&gt; JSON object.&lt;/p&gt;
&lt;p&gt;If we’d like to use the JWT access token for other service calls, we could extract the token from the &lt;code&gt;Authorization&lt;/code&gt; header.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;handleGreet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext ctx)&lt;/span&gt; &lt;/span&gt;{

    var jwtUser = (JWTUser) ctx.user();
    var username = jwtUser.principal().getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;preferred_username&quot;&lt;/span&gt;);
    var userId = jwtUser.principal().getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sub&quot;&lt;/span&gt;);

    var accessToken = ctx.request().getHeader(HttpHeaders.AUTHORIZATION).substring(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bearer &quot;&lt;/span&gt;.length());
    &lt;span class=&quot;hljs-comment&quot;&gt;// Use accessToken for down-stream calls if needed...&lt;/span&gt;

    ctx.request().response().end(String.format(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hi %s (%s) %s%n&quot;&lt;/span&gt;, username, userId, Instant.now()));
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;obtaining-an-access-token-from-keycloak-for-user-tester-&quot;&gt;Obtaining an Access Token from Keycloak for user &lt;code&gt;tester&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;To test our application we can use the following &lt;code&gt;curl&lt;/code&gt; commands in a bash like shell to obtain an JWT access token to call one
of our endpoints as the user &lt;code&gt;tester&lt;/code&gt; with the role &lt;code&gt;user&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that this example uses the cli tool &lt;a href=&quot;https://stedolan.github.io/jq/&quot;&gt;jq&lt;/a&gt; for JSON processing.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;KC_USERNAME=tester
KC_PASSWORD=test
KC_CLIENT=vertx-service
KC_CLIENT_SECRET=ecb85cc5&lt;span class=&quot;hljs-operator&quot;&gt;-f&lt;/span&gt;90d-&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;a03-&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;fac-&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;dcde57f40c
KC_REALM=vertx
KC_URL=http://localhost:&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;/auth
KC_RESPONSE=$(curl  -k \
        &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;username=&lt;span class=&quot;hljs-variable&quot;&gt;$KC_USERNAME&lt;/span&gt;&quot;&lt;/span&gt; \
        &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;password=&lt;span class=&quot;hljs-variable&quot;&gt;$KC_PASSWORD&lt;/span&gt;&quot;&lt;/span&gt; \
        &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;grant_type=password&#39;&lt;/span&gt; \
        &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;client_id=&lt;span class=&quot;hljs-variable&quot;&gt;$KC_CLIENT&lt;/span&gt;&quot;&lt;/span&gt; \
        &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;client_secret=&lt;span class=&quot;hljs-variable&quot;&gt;$KC_CLIENT_SECRET&lt;/span&gt;&quot;&lt;/span&gt; \
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$KC_URL&lt;/span&gt;/realms/&lt;span class=&quot;hljs-variable&quot;&gt;$KC_REALM&lt;/span&gt;/protocol/openid-connect/token&quot;&lt;/span&gt; \
    | jq .)

KC_ACCESS_TOKEN=$(&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$KC_RESPONSE&lt;/span&gt;| jq -r .access_token)
&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$KC_ACCESS_TOKEN&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we use the JWT access token in the &lt;code&gt;Authorization&lt;/code&gt; header with the &lt;code&gt;Bearer&lt;/code&gt; prefix to call our &lt;code&gt;greet&lt;/code&gt; route:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;curl --silent -H &lt;span class=&quot;hljs-string&quot;&gt;&quot;Authorization: Bearer &lt;span class=&quot;hljs-variable&quot;&gt;$KC_ACCESS_TOKEN&lt;/span&gt;&quot;&lt;/span&gt; http://localhost:&lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;/api/greet&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;Hi tester (&lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;b3fac0-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;aec-&lt;span class=&quot;hljs-number&quot;&gt;4421&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;81&lt;/span&gt;cf&lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt;4b02428f901) &lt;span class=&quot;hljs-number&quot;&gt;2020&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;09&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;T21:&lt;span class=&quot;hljs-number&quot;&gt;03&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;59.254230700&lt;/span&gt;Z&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;applying-role-based-access-control-with-jwtuser&quot;&gt;Applying Role-based Access-Control with JWTUser&lt;/h3&gt;
&lt;p&gt;To leverage support for role based access control (RBAC) we can use the &lt;code&gt;io.vertx.ext.auth.User#isAuthorised&lt;/code&gt; method
to check whether the current user has the required role. If the role is present we return some data about the user, otherwise
we send a response with status code 403 and a &lt;code&gt;forbidden&lt;/code&gt; error message.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;handleUserData&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext ctx)&lt;/span&gt; &lt;/span&gt;{

    var jwtUser = (JWTUser) ctx.user();
    var username = jwtUser.principal().getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;preferred_username&quot;&lt;/span&gt;);
    var userId = jwtUser.principal().getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sub&quot;&lt;/span&gt;);

    jwtUser.isAuthorized(&lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt;, res -&gt; {

        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!res.succeeded() || !res.result()) {
            toJsonResponse(ctx).setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;403&lt;/span&gt;).end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{\&quot;error\&quot;: \&quot;forbidden\&quot;}&quot;&lt;/span&gt;);
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
        }

        JsonObject data = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject()
                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt;)
                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&lt;/span&gt;, username)
                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;userId&quot;&lt;/span&gt;, userId)
                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;, Instant.now());

        toJsonResponse(ctx).end(data.toString());
    });
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;handleAdminData&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext ctx)&lt;/span&gt; &lt;/span&gt;{

    var jwtUser = (JWTUser) ctx.user();
    var username = jwtUser.principal().getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;preferred_username&quot;&lt;/span&gt;);
    var userId = jwtUser.principal().getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sub&quot;&lt;/span&gt;);

    jwtUser.isAuthorized(&lt;span class=&quot;hljs-string&quot;&gt;&quot;admin&quot;&lt;/span&gt;, res -&gt; {

        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!res.succeeded() || !res.result()) {
            toJsonResponse(ctx).setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;403&lt;/span&gt;).end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{\&quot;error\&quot;: \&quot;forbidden\&quot;}&quot;&lt;/span&gt;);
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
        }

        JsonObject data = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject()
                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;admin&quot;&lt;/span&gt;)
                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&lt;/span&gt;, username)
                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;userId&quot;&lt;/span&gt;, userId)
                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;, Instant.now());

        toJsonResponse(ctx).end(data.toString());
    });
}&lt;/code&gt;&lt;/pre&gt;


&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;curl --silent -H &lt;span class=&quot;hljs-string&quot;&gt;&quot;Authorization: Bearer &lt;span class=&quot;hljs-variable&quot;&gt;$KC_ACCESS_TOKEN&lt;/span&gt;&quot;&lt;/span&gt; http://localhost:&lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;/api/user&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;/span&gt;,&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;username&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;tester&quot;&lt;/span&gt;&lt;/span&gt;,&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;userId&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;27b3fac0-9aec-4421-81cf-d4b02428f901&quot;&lt;/span&gt;&lt;/span&gt;,&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;timestamp&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;2020-09-28T21:07:49.340950300Z&quot;&lt;/span&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;curl --silent -H &lt;span class=&quot;hljs-string&quot;&gt;&quot;Authorization: Bearer &lt;span class=&quot;hljs-variable&quot;&gt;$KC_ACCESS_TOKEN&lt;/span&gt;&quot;&lt;/span&gt; http://localhost:&lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;/api/admin&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;{&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;error&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;forbidden&quot;&lt;/span&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;obtaining-an-access-token-from-keycloak-for-user-vadmin-&quot;&gt;Obtaining an Access Token from Keycloak for user &lt;code&gt;vadmin&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;To check access with an &lt;code&gt;admin&lt;/code&gt; role, we obtain a new token for the user &lt;code&gt;vadmin&lt;/code&gt; which has the roles &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;user&lt;/code&gt;. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;KC_USERNAME=vadmin
KC_PASSWORD=test
KC_CLIENT=vertx-service
KC_CLIENT_SECRET=ecb85cc5&lt;span class=&quot;hljs-operator&quot;&gt;-f&lt;/span&gt;90d-&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;a03-&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;fac-&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;dcde57f40c
KC_REALM=vertx
KC_URL=http://localhost:&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;/auth
KC_RESPONSE=$(curl  -k \
        &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;username=&lt;span class=&quot;hljs-variable&quot;&gt;$KC_USERNAME&lt;/span&gt;&quot;&lt;/span&gt; \
        &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;password=&lt;span class=&quot;hljs-variable&quot;&gt;$KC_PASSWORD&lt;/span&gt;&quot;&lt;/span&gt; \
        &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;grant_type=password&#39;&lt;/span&gt; \
        &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;client_id=&lt;span class=&quot;hljs-variable&quot;&gt;$KC_CLIENT&lt;/span&gt;&quot;&lt;/span&gt; \
        &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;client_secret=&lt;span class=&quot;hljs-variable&quot;&gt;$KC_CLIENT_SECRET&lt;/span&gt;&quot;&lt;/span&gt; \
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$KC_URL&lt;/span&gt;/realms/&lt;span class=&quot;hljs-variable&quot;&gt;$KC_REALM&lt;/span&gt;/protocol/openid-connect/token&quot;&lt;/span&gt; \
    | jq .)

KC_ACCESS_TOKEN=$(&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$KC_RESPONSE&lt;/span&gt;| jq -r .access_token)
&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$KC_ACCESS_TOKEN&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;curl --silent -H &lt;span class=&quot;hljs-string&quot;&gt;&quot;Authorization: Bearer &lt;span class=&quot;hljs-variable&quot;&gt;$KC_ACCESS_TOKEN&lt;/span&gt;&quot;&lt;/span&gt; http://localhost:&lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;/api/user&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;/span&gt;,&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;username&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;vadmin&quot;&lt;/span&gt;&lt;/span&gt;,&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;userId&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;75090eac-36ff-4cd8-847d-fc2941bc024e&quot;&lt;/span&gt;&lt;/span&gt;,&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;timestamp&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;2020-09-28T21:13:05.099393900Z&quot;&lt;/span&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;curl --&lt;span class=&quot;hljs-literal&quot;&gt;silent&lt;/span&gt; -H &lt;span class=&quot;hljs-string&quot;&gt;&quot;Authorization: Bearer &lt;span class=&quot;hljs-variable&quot;&gt;$KC_ACCESS_TOKEN&lt;/span&gt;&quot;&lt;/span&gt; http://localhost:&lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;/api/&lt;span class=&quot;hljs-literal&quot;&gt;admin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;/span&gt;,&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;username&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;vadmin&quot;&lt;/span&gt;&lt;/span&gt;,&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;userId&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;75090eac-36ff-4cd8-847d-fc2941bc024e&quot;&lt;/span&gt;&lt;/span&gt;,&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;timestamp&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;2020-09-28T21:13:34.945276500Z&quot;&lt;/span&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;We learned how to configure a Vert.x application with JWT authorization powered by Keycloak. Although the configuration is quite complete
already, there are still some parts that can be improved, like the dynamic JWKS fetching on public-key pair rotation as well as extraction of nested roles.&lt;/p&gt;
&lt;p&gt;Nevertheless this is a good starting point for securing your own Vert.x services with JWT and Keycloak.&lt;/p&gt;
&lt;p&gt;You can check out the &lt;a href=&quot;https://github.com/thomasdarimont/vertx-playground/tree/master/jwt-service-vertx&quot;&gt;complete example in keycloak-vertx Examples Repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thank you for your time, stay tuned for more updates! If you want to learn more about Keycloak, feel free to reach out to me. You can find me via &lt;a href=&quot;https://twitter.com/thomasdarimont&quot;&gt;thomasdarimont on twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy Hacking!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Thu, 01 Oct 2020 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/jwt-authorization-for-vert-x-with-keycloak</link>
          <guid isPermaLink="true">https://vertx.io/blog/jwt-authorization-for-vert-x-with-keycloak</guid>
          <author>
            <name>thomasdarimont</name>
            <uri>http://github.com/thomasdarimont</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 4 beta 3 released!</title>
          <description>
      &lt;article&gt;&lt;p&gt;We are extremely pleased to announce the third 4.0 beta release of Eclipse Vert.x .&lt;/p&gt;
&lt;p&gt;Vert.x 4 is the evolution of the Vert.x 3.x series that will bring key features to Vert.x.&lt;/p&gt;
&lt;h4 id=&quot;http-client-request-creation&quot;&gt;HTTP client request creation&lt;/h4&gt;
&lt;p&gt;Until Beta3, HTTP client has created lazy HTTP requests, since then creating a request
has become an asynchronous operation guaranteeing that a slot for performing the request
is granted:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Created a request&lt;/span&gt;
HttpClientRequest request = client.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/some-uri&quot;&lt;/span&gt;);

&lt;span class=&quot;hljs-comment&quot;&gt;// Connect to the server or reuse a connection from the pool and then try to send the request&lt;/span&gt;
request.end();

&lt;span class=&quot;hljs-comment&quot;&gt;// Since Beta3&lt;/span&gt;
client.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/some-uri&quot;&lt;/span&gt;, ar -&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// The client connected to the server or reused a connection from the pool&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    HttpClientRequest request = ar.result();

    &lt;span class=&quot;hljs-comment&quot;&gt;// Send the request&lt;/span&gt;
    request.end();
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another (hidden) motivation to switch to this model is avoiding data races when the
HTTP client is used outside the event-loop using futures.&lt;/p&gt;
&lt;p&gt;Previously you could write code like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;Future&lt;HttpClientResponse&gt; get = client.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;some-uri&quot;&lt;/span&gt;);

&lt;span class=&quot;hljs-comment&quot;&gt;// Assuming we have a client that returns a future response&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// assuging this is *not* on the event-loop&lt;/span&gt;
Future&lt;Buffer&gt; fut = get.send().compose(response -&gt; {

  &lt;span class=&quot;hljs-comment&quot;&gt;// Response events might have happen already&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; response.body();
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can write instead:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;Future&lt;Buffer&gt; fut = client.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;some-uri&quot;&lt;/span&gt;).compose(request -&gt; {
  request.send().compose(response -&gt; response.body())
});&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;httpserverresponse-send-method&quot;&gt;HttpServerResponse send method&lt;/h4&gt;
&lt;p&gt;In the previous beta, HTTP client request got a new simplified &lt;code&gt;send&lt;/code&gt; method to send
a body or a stream. We did the same for the HTTP server response API:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;server.requestHandler(req -&gt; {
  req.pause();
  getSomeStream().onSuccess(stream -&gt; {
    req.response().send(stream);
  });
});&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;http-tunnel-improvements&quot;&gt;HTTP tunnel improvements&lt;/h4&gt;
&lt;p&gt;Creating an HTTP tunnel has now become more natural:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;client.request(HttpMethod.CONNECT, &lt;span class=&quot;hljs-string&quot;&gt;&quot;some-uri&quot;&lt;/span&gt;)
  .onSuccess(request -&gt; {

    &lt;span class=&quot;hljs-comment&quot;&gt;// Connect to the server&lt;/span&gt;
    request.connect(ar -&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
        HttpClientResponse response = ar.result();

        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (response.statusCode() != &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;) {
          &lt;span class=&quot;hljs-comment&quot;&gt;// Connect failed for some reason&lt;/span&gt;
        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
          &lt;span class=&quot;hljs-comment&quot;&gt;// Tunnel created, raw buffers are transmitted on the wire&lt;/span&gt;
          NetSocket socket = response.netSocket();
        }
      }
    });
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The new &lt;code&gt;connect&lt;/code&gt; method tells the client that when a &lt;code&gt;201&lt;/code&gt; response is received
from the server then the connection should be switched to not interpret HTTP
data anymore.&lt;/p&gt;
&lt;p&gt;On the server, the API has become asynchronous and renamed to &lt;code&gt;toNetSocket()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;server.requestHandler(request -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (request.method() == HttpMethod.CONNECT) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Will send an HTTP 201 status code and switch the connection to use raw buffers&lt;/span&gt;
    request.toNetSocket(ar -&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
        NetSocket socket = ar.result();
      }
    });
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;websocket-upgrade-improvements&quot;&gt;WebSocket upgrade improvements&lt;/h4&gt;
&lt;p&gt;The server WebSocket manual upgrade operation has also become asynchronous and renamed
to &lt;code&gt;toWebSocket()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;server.requestHandler(request -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (request.method() == HttpMethod.GET &amp;&amp; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Upgrade&quot;&lt;/span&gt;.equals(request.getHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;connection&quot;&lt;/span&gt;))) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Will do the WebSocket handshake&lt;/span&gt;
    request.toWebSocket(ar -&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
        ServerWebSocket socket = ar.result();
      }
    });
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;row-to-json-conversion&quot;&gt;Row to JSON conversion&lt;/h4&gt;
&lt;p&gt;SQL client can now easily transform a &lt;code&gt;Row&lt;/code&gt; into a JSON object, this can be convienient
for applications directly transferring JSON results to the client:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;client
  .preparedQuery(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM USERS WHERE ID=$1&quot;&lt;/span&gt;)
  .execute(Tuple.of(id))
  .onSuccess(row -&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (row.size() == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {
      JsonObject json = row.iterator().next().toJson();
    }
  });&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;oauth2-oidc-pkce&quot;&gt;OAuth2/OIDC PKCE&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;OAuth2Handler&lt;/code&gt; can now handle &lt;a href=&quot;https://tools.ietf.org/html/rfc7636&quot;&gt;PKCE&lt;/a&gt;, which means another layer of security to your application.&lt;/p&gt;
&lt;h4 id=&quot;redis-resp3&quot;&gt;Redis RESP3&lt;/h4&gt;
&lt;p&gt;The redis client can now speak &lt;code&gt;RESP3&lt;/code&gt; with redis servers. This means it can handle all the new types and APIs available on redis from all versions (RESP2, redis &lt; 6) and (RESP3, redis &gt;= 6).&lt;/p&gt;
&lt;h4 id=&quot;finally&quot;&gt;Finally&lt;/h4&gt;
&lt;p&gt;This is the Beta3 relase of Vert.x 4, you can of course expect another beta as we get feedback from the community and fix issues that we failed to catch before.&lt;/p&gt;
&lt;p&gt;You can also read the milestone announces to know more about the overral changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-beta-1-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-beta-1-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-5-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-5-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-5-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-5-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-4-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-4-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-3-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-3-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-2-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-2-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-1-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-1-released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/4.0.0-Deprecations-and-breaking-changes&quot;&gt;deprecations and breaking changes&lt;/a&gt;
 can be found on the wiki.&lt;/p&gt;
&lt;p&gt;For this release there are no Docker images.&lt;/p&gt;
&lt;p&gt;The release artifacts have been deployed to &lt;a href=&quot;https://search.maven.org/search?q=g:io.vertx%20AND%20v:4.0.0.Beta1&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://repo1.maven.org/maven2/io/vertx/vertx-stack-manager/4.0.0.Beta1/&quot;&gt;Maven Central&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can bootstrap a Vert.x 4.0.0.Beta3 project using &lt;a href=&quot;https://start.vertx.io&quot;&gt;https://start.vertx.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The documentation has been deployed on this preview web-site &lt;a href=&quot;https://vertx-web-site.github.io/docs/&quot;&gt;https://vertx-web-site.github.io/docs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That’s it! Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Fri, 25 Sep 2020 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-4-beta-3-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-4-beta-3-released</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 3.9.3 released!</title>
          <description>
      &lt;article&gt;&lt;p&gt;We are extremely pleased to announce that the Eclipse Vert.x version 3.9.3 has been released.&lt;/p&gt;
&lt;p&gt;Since the release of Vert.x 3.9.3, quite a few bugs have been reported. We would like to thank you all for reporting these issues.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.9.3-Release-Notes&quot;&gt;3.9.3 release notes&lt;/a&gt; can be found on the wiki, as well as the
list of &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.9.3-Deprecations-and-breaking-changes&quot;&gt;deprecations and breaking changes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker images are available on &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Vert.x distribution can be downloaded on the website but is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge is available from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;NPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;Bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;WebJars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The release artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.9.3%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.9.3/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That’s it! Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Thu, 17 Sep 2020 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-3-9-3-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-9-3-released</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 4 beta 1 released!</title>
          <description>
      &lt;article&gt;&lt;p&gt;We are extremely pleased to announce the first 4.0 beta release of Eclipse Vert.x .&lt;/p&gt;
&lt;p&gt;Vert.x 4 is the evolution of the Vert.x 3.x series that will bring key features to Vert.x.&lt;/p&gt;
&lt;h4 id=&quot;sql-client-metrics&quot;&gt;SQL client metrics&lt;/h4&gt;
&lt;p&gt;Vert.x 4 supports metrics for clients which are critical for monitoring application performance.&lt;/p&gt;
&lt;p&gt;While the capabilities are generic and can apply to any client, each client needs a specific integration.
Obviously the SQL client was the perfect candidate in mind for this new feature.&lt;/p&gt;
&lt;p&gt;Micrometer metrics will report these metrics as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vertx_sql_queue_pending: number of requests scheduled but not yet executed&lt;/li&gt;
&lt;li&gt;vertx_sql_queue_time: time spent in queue before processing&lt;/li&gt;
&lt;li&gt;vertx_sql_processing_pending: number of request being processed&lt;/li&gt;
&lt;li&gt;vertx_sql_processing_time: requests latencies&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;a-better-api-for-jdbc-client&quot;&gt;A better API for JDBC Client&lt;/h4&gt;
&lt;p&gt;Our JDBC client will not go away in Vert.x 4, we do recknognize that JDBC is important because it supports
the most important number of databases in the ecosystem.&lt;/p&gt;
&lt;p&gt;When we designed the SQL client API we strived a lot to come with the simplest and most powerful API
for asynchonous SQL client.&lt;/p&gt;
&lt;p&gt;This release brings an implementation of the SQL client API for JDBC.&lt;/p&gt;
&lt;p&gt;The 3.x API series will continue to be supported for the lifetime of Vert.x 4.&lt;/p&gt;
&lt;h4 id=&quot;event-loop-affinity&quot;&gt;Event loop affinity&lt;/h4&gt;
&lt;p&gt;Using Vert.x from a non Vert.x thread is a very common use case we have been supporting since Vert.x 3.&lt;/p&gt;
&lt;p&gt;When you use a Vert.x resource (like a client) from a non Vert.x thread, Vert.x 3 obtains a new event-loop
everytime it happens.&lt;/p&gt;
&lt;p&gt;In Vert.x 4 we decided to pin the first event loop to the non Vert.x thread. The goal is to prevent
some data races and also makes reasonning about this easier.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;Vertx vertx = Vertx.vertx();

&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i &lt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;i++) {
  &lt;span class=&quot;hljs-keyword&quot;&gt;String&lt;/span&gt; msg = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Message &quot;&lt;/span&gt; + i;
  vertx.runOnContext(v -&gt; {
    System.out.&lt;span class=&quot;hljs-built_in&quot;&gt;println&lt;/span&gt;(i);
  });
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this with Vert.x 3 will print the 4 lines but they are likely to not be reordered, this code could
also be running in parallel (that is two different threads running at the same time on a different CPU core).&lt;/p&gt;
&lt;p&gt;Running this with Vert.x 4 will print the 4 lines in the correct order and always with the same thread. This
eliminates some potential data races and also allows to reason about what will happen at runtime.&lt;/p&gt;
&lt;h4 id=&quot;vert-x-json-schema-supports-draft2019-09&quot;&gt;Vert.x Json Schema supports Draft2019-09&lt;/h4&gt;
&lt;p&gt;The new &lt;a href=&quot;https://github.com/eclipse-vertx/vertx-json-schema&quot;&gt;vertx-json-schema&lt;/a&gt; module now supports the latest Json Schema &lt;a href=&quot;http://json-schema.org/specification.html&quot;&gt;Draft2019-09 spec&lt;/a&gt;. You can finally play with the new &lt;code&gt;$recursiveRef&lt;/code&gt; to build extensible recursive schemas and with &lt;code&gt;unevaluatedProperties&lt;/code&gt;/&lt;code&gt;unevaluatedItems&lt;/code&gt; to define strict schemas. Look at the module &lt;a href=&quot;https://vertx-web-site.github.io/docs/vertx-json-schema/java/&quot;&gt;documentation&lt;/a&gt; to start using it.&lt;/p&gt;
&lt;h4 id=&quot;clustering-configuration-simplified&quot;&gt;Clustering configuration simplified&lt;/h4&gt;
&lt;p&gt;In Vert.x 3, cluster host was set to &lt;code&gt;localhost&lt;/code&gt; by default in &lt;code&gt;EventBusOptions&lt;/code&gt;.
Consequently, a lot of new users were confused about why event bus consumers and producers were not able to communicate even if the underlying cluster manager was configured correctly.&lt;/p&gt;
&lt;p&gt;Also, when using the CLI tool or the &lt;code&gt;Launcher&lt;/code&gt; class, Vert.x tried to find a host among available network interfaces if none was provided with the &lt;code&gt;-cluster-host&lt;/code&gt; argument.
Sometimes, the host chosen by the cluster manager and Vert.x were not the same.&lt;/p&gt;
&lt;p&gt;Starting with Vert.x 4 beta 1, the cluster host default has been removed and, if users don’t provide any, Vert.x will ask the cluster manager which one it picked before trying to find one itself.
This applies whether Vert.x is embedded in any Java program or started with the CLI tool or with the &lt;code&gt;Launcher&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;So far, only &lt;code&gt;vertx-hazelcast&lt;/code&gt; and &lt;code&gt;vertx-infinispan&lt;/code&gt; cluster managers can provide Vert.x with a cluster host.
When other cluster managers are used, Vert.x will choose one itself.&lt;/p&gt;
&lt;h4 id=&quot;cluster-manager-upgrades&quot;&gt;Cluster manager upgrades&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;vertx-hazelcast&lt;/code&gt; has been upgraded to Hazelcast 4.0.2 and &lt;code&gt;vertx-infinispan&lt;/code&gt; to Infinispan 11.0.1.Final.&lt;/p&gt;
&lt;h4 id=&quot;finally&quot;&gt;Finally&lt;/h4&gt;
&lt;p&gt;This is the Beta1 relase of Vert.x 4, you can of course expect more betas as we get feedback from the community and fix issues that we failed to catch before.&lt;/p&gt;
&lt;p&gt;You can also read the milestone announces to know more about the overral changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-5-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-5-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-4-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-4-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-3-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-3-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-2-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-2-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-1-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-1-released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/4.0.0-Deprecations-and-breaking-changes&quot;&gt;deprecations and breaking changes&lt;/a&gt;
 can be found on the wiki.&lt;/p&gt;
&lt;p&gt;For this release there are no Docker images.&lt;/p&gt;
&lt;p&gt;The release artifacts have been deployed to &lt;a href=&quot;https://search.maven.org/search?q=g:io.vertx%20AND%20v:4.0.0.Beta1&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://repo1.maven.org/maven2/io/vertx/vertx-stack-manager/4.0.0.Beta1/&quot;&gt;Maven Central&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can bootstrap a Vert.x 4.0.0.Beta1 project using &lt;a href=&quot;https://start.vertx.io&quot;&gt;https://start.vertx.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The documentation has been deployed on this preview web-site &lt;a href=&quot;https://vertx-web-site.github.io/docs/&quot;&gt;https://vertx-web-site.github.io/docs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That’s it! Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Tue, 28 Jul 2020 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-4-beta-1-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-4-beta-1-released</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 3.9.2 released!</title>
          <description>
      &lt;article&gt;&lt;p&gt;We are extremely pleased to announce that the Eclipse Vert.x version 3.9.2 has been released.&lt;/p&gt;
&lt;p&gt;Among all bug fixes you can find in 3.9.2 this enhancement&lt;/p&gt;
&lt;h4 id=&quot;meet-the-reactive-db2-client&quot;&gt;Meet the Reactive DB2 Client&lt;/h4&gt;
&lt;p&gt;The Reactive SQL Client family gets a new child with an implementation contributed by our fellow maintainer
&lt;a href=&quot;https://twitter.com/andrew_guibert&quot;&gt;Andy Guibert&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using DB2 client is as straightforward as its elder sibblings:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;DB2ConnectOptions connectOptions = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DB2ConnectOptions()
  .setPort(&lt;span class=&quot;hljs-number&quot;&gt;50000&lt;/span&gt;)
  .setHost(&lt;span class=&quot;hljs-string&quot;&gt;&quot;the-host&quot;&lt;/span&gt;)
  .setDatabase(&lt;span class=&quot;hljs-string&quot;&gt;&quot;the-db&quot;&lt;/span&gt;)
  .setUser(&lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt;)
  .setPassword(&lt;span class=&quot;hljs-string&quot;&gt;&quot;secret&quot;&lt;/span&gt;);

&lt;span class=&quot;hljs-comment&quot;&gt;// Create the client pool&lt;/span&gt;
DB2Pool client = DB2Pool.pool(connectOptions, poolOptions);

&lt;span class=&quot;hljs-comment&quot;&gt;// A simple query&lt;/span&gt;
client
  .query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM users WHERE id=&#39;julien&#39;&quot;&lt;/span&gt;)
  .execute(ar -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    RowSet&lt;Row&gt; result = ar.result();
    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Got &quot;&lt;/span&gt; + result.size() + &lt;span class=&quot;hljs-string&quot;&gt;&quot; rows &quot;&lt;/span&gt;);
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Failure: &quot;&lt;/span&gt; + ar.cause().getMessage());
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;// Now close the pool&lt;/span&gt;
  client.close();
});&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;reactive-mysql-client-domain-socket-support&quot;&gt;Reactive MySQL Client domain socket support&lt;/h4&gt;
&lt;p&gt;The MySQL reactive Client can now connect using &lt;a href=&quot;https://github.com/eclipse-vertx/vertx-sql-client/issues/521&quot;&gt;domain sockets&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Connect Options&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// Socket file name /var/run/mysqld/mysqld.sock&lt;/span&gt;
MySQLConnectOptions connectOptions = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MySQLConnectOptions()
    .setHost(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/var/run/mysqld/mysqld.sock&quot;&lt;/span&gt;)
    .setDatabase(&lt;span class=&quot;hljs-string&quot;&gt;&quot;the-db&quot;&lt;/span&gt;);

&lt;span class=&quot;hljs-comment&quot;&gt;// Create the pooled client&lt;/span&gt;
MySQLPool client = MySQLPool.pool(connectOptions, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; PoolOptions().setMaxSize(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;finally&quot;&gt;Finally&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.9.2-Release-Notes&quot;&gt;3.9.2 release notes&lt;/a&gt; can be found on the wiki, as well as the
list of &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.9.2-Deprecations-and-breaking-changes&quot;&gt;deprecations and breaking changes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker images are available on &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Vert.x distribution can be downloaded on the website but is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge is available from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;NPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;Bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;WebJars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The release artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.9.2%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.9.2/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That’s it! Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Tue, 21 Jul 2020 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-3-9-2-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-9-2-released</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 4 milestone 5 released!</title>
          <description>
      &lt;article&gt;&lt;p&gt;We are extremely pleased to announce the fifth 4.0 milestone release of Eclipse Vert.x .&lt;/p&gt;
&lt;p&gt;Vert.x 4 is the evolution of the Vert.x 3.x series that will bring key features to Vert.x.&lt;/p&gt;
&lt;p&gt;This release aims to provide a reliable distribution of the current development of Vert.x 4 for people that
want to try it and provide feedback.&lt;/p&gt;
&lt;h4 id=&quot;new-kids-on-the-block-json-schema-web-validation-and-web-openapi&quot;&gt;New kids on the block: Json Schema, Web Validation and Web OpenAPI&lt;/h4&gt;
&lt;p&gt;we decide to take HTTP request validation in &lt;code&gt;vertx-web&lt;/code&gt; and Contract Driven development using &lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification&quot;&gt;OpenAPI&lt;/a&gt;
to a next level in Vert.x 4, allow us to introduce:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse-vertx/vertx-json-schema&quot;&gt;Vert.x Json Schema&lt;/a&gt;: Extensible sync/async json-schema validator designed for Vert.x JSON types, supporting Json Schema Draft-7 and OpenAPI dialect.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-web/tree/master/vertx-web-validation&quot;&gt;Vert.x Web Validation&lt;/a&gt;: Extensible sync/async HTTP request validator, providing a DSL to describe expected HTTP requests.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-web/tree/master/vertx-web-openapi&quot;&gt;Vert.x Web OpenAPI&lt;/a&gt;: New support for Contract Driven development based on OpenAPI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vert.x Json Schema is a powerful &lt;a href=&quot;https://json-schema.org/&quot;&gt;Json Schema&lt;/a&gt; validator which includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Async &lt;code&gt;$ref&lt;/code&gt; resolution&lt;/li&gt;
&lt;li&gt;Custom keywords/Custom dialects support&lt;/li&gt;
&lt;li&gt;A DSL to build schemas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Combining Vert.x Json Schema and Vert.x Web Validation you can easily validate HTTP requests:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;ValidationHandler handler = ValidationHandler
  .builder(schemaParser)
  .pathParameter(Parameters.param(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myPathParam&quot;&lt;/span&gt;, stringSchema()))
  .queryParameter(Parameters.optionalParam(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myQueryParam&quot;&lt;/span&gt;, intSchema()))
  .body(Bodies.json(Schemas.ref(JsonPointer.fromURI(URI.create(
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;some_schema.json&quot;&lt;/span&gt;
  )))))
  .build();

router.post(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/{myPathParam}&quot;&lt;/span&gt;).handler(handler);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/vert-x3/vertx-web/blob/master/vertx-web-validation/src/main/java/examples/WebValidationExamples.java&quot;&gt;Web validation examples&lt;/a&gt; and provide feedback on the APIs!&lt;/p&gt;
&lt;p&gt;Vert.x Web Validation allows you to use Vert.x Web API Service without Vert.x Web API Contract:
&lt;a href=&quot;https://github.com/vert-x3/vertx-web/tree/master/vertx-web-api-service/src/main/java/examples&quot;&gt;Vert.x Web API Service example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can achieve Contract Driven development, with Vert.x Web OpenAPI:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;RouterFactory.create(vertx, &lt;span class=&quot;hljs-string&quot;&gt;&quot;src/main/resources/petstore.yaml&quot;&lt;/span&gt;,
  routerFactoryAsyncResult -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (routerFactoryAsyncResult.succeeded()) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Spec loaded with success, retrieve the router&lt;/span&gt;
    RouterFactory routerFactory = routerFactoryAsyncResult.result();
    &lt;span class=&quot;hljs-comment&quot;&gt;// You can enable or disable different features of router factory using RouterFactoryOptions&lt;/span&gt;
    RouterFactoryOptions options = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; RouterFactoryOptions();
    &lt;span class=&quot;hljs-comment&quot;&gt;// Set the options&lt;/span&gt;
    routerFactory.setOptions(options);
    &lt;span class=&quot;hljs-comment&quot;&gt;// Add an handler to operation listPets&lt;/span&gt;
    routerFactory.operation(&lt;span class=&quot;hljs-string&quot;&gt;&quot;listPets&quot;&lt;/span&gt;).handler(routingContext -&gt; {
      &lt;span class=&quot;hljs-comment&quot;&gt;// Handle listPets operation&lt;/span&gt;
      routingContext.response().setStatusMessage(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Called listPets&quot;&lt;/span&gt;).end();
    }).failureHandler(routingContext -&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;// Add a failure handler to the same operation&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// This is the failure handler&lt;/span&gt;
      Throwable failure = routingContext.failure();
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (failure &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; BadRequestException)
        &lt;span class=&quot;hljs-comment&quot;&gt;// Handle Validation Exception&lt;/span&gt;
        routingContext
          .response()
          .setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt;)
          .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;)
          .end(((BadRequestException)failure).toJson().toBuffer());
    });

    &lt;span class=&quot;hljs-comment&quot;&gt;// Add a security handler&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle security here&lt;/span&gt;
    routerFactory.securityHandler(
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;api_key&quot;&lt;/span&gt;,
      JWTAuthHandler.create(jwtAuth)
    );

    &lt;span class=&quot;hljs-comment&quot;&gt;// Now you have to generate the router&lt;/span&gt;
    Router router = routerFactory.createRouter();
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Something went wrong during router factory initialization&lt;/span&gt;
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vert.x Web OpenAPI is the new way to do Vert.x Web API Contract, however Vert.x Web API Contract remains supported
for the whole lifetime of Vert.x 4 to provide a migration path: we will provide soon a migration guide for Vert.x Web API Contract.&lt;/p&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/vert-x3/vertx-web/blob/master/vertx-web-openapi/src/main/java/examples/OpenAPI3Examples.java&quot;&gt;Web OpenAPI examples&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;sql-client-templates&quot;&gt;SQL Client templates&lt;/h4&gt;
&lt;p&gt;SQL Client Templates is a small library designed to facilitate the execution of SQL queries.&lt;/p&gt;
&lt;p&gt;Simply put you execute prepared SQL queries with a map instead of a tuple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;Map&lt;String, Object&gt; parameters = Collections.singletonMap(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);

SqlTemplate
  .forQuery(client, &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM users WHERE id=#{id}&quot;&lt;/span&gt;)
  .execute(parameters)
  .onSuccess(users -&gt; {
    users.forEach(row -&gt; {
      System.out.println(row.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;first_name&quot;&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + row.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;last_name&quot;&lt;/span&gt;));
    });
  });&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A template can perform tuple to object mapping for parameters and rows.&lt;/p&gt;
&lt;p&gt;Here is row mapping using Jackson Databind.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;SqlTemplate
  .forQuery(client, &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM users WHERE id=#{id}&quot;&lt;/span&gt;)
  .mapTo(User.class)
  .execute(Collections.singletonMap(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))
  .onSuccess(users -&gt; {
    users.forEach(user -&gt; {
      System.out.println(user.firstName + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + user.lastName);
    });
  });&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also uses Vert.x data objects to generate mappers instead: when a data object is annotate with &lt;code&gt;@RowMapped&lt;/code&gt; a row mapper
function will be generated&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@DataObject&lt;/span&gt;
&lt;span class=&quot;hljs-annotation&quot;&gt;@RowMapped&lt;/span&gt;
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;User&lt;/span&gt; &lt;/span&gt;{
  ...
}

&lt;span class=&quot;hljs-comment&quot;&gt;// Generated by SQL template code generator&lt;/span&gt;
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UserRowMapper&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;java&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;util&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;function&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;Function&lt;/span&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;io&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;vertx&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;sqlclient&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;Row&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;User&lt;/span&gt;&gt; &lt;/span&gt;{
  ...
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then use this mapper instead of &lt;code&gt;User.class&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;SqlTemplate
  .forQuery(client, &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM users WHERE id=#{id}&quot;&lt;/span&gt;)
  .mapTo(UserRowMapper.INSTANCE)
  .execute(Collections.singletonMap(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))
  .onSuccess(users -&gt; {
    users.forEach(user -&gt; {
      System.out.println(user.firstName + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + user.lastName);
    });
  });&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;a-new-clustering-spi&quot;&gt;A new clustering SPI&lt;/h4&gt;
&lt;p&gt;This milestone introduces the clustering SPI redesign that allows to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;simplify both Vert.x core and cluster manager implementations&lt;/li&gt;
&lt;li&gt;leverage capabilities of some cluster managers (e.g. data loss protection)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read the &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/RFC:-clustering-SPI-revisited&quot;&gt;RFC&lt;/a&gt; document if you would like to know more.&lt;/p&gt;
&lt;p&gt;As a developer, you should not see much difference, the EventBus and Shared data API remain unchanged.&lt;/p&gt;
&lt;p&gt;However, if you operate a cluster in production, you cannot mix Vert.x 3 and Vert.x 4 nodes.&lt;/p&gt;
&lt;p&gt;The following cluster managers implementations have been updated: &lt;a href=&quot;https://vertx.io/docs/vertx-hazelcast/java/&quot;&gt;&lt;code&gt;vertx-hazelcast&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://vertx.io/docs/vertx-infinispan/java/&quot;&gt;&lt;code&gt;vertx-infinispan&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://vertx.io/docs/vertx-ignite/java/&quot;&gt;&lt;code&gt;vertx-iginite&lt;/code&gt;&lt;/a&gt; (thanks &lt;a href=&quot;https://github.com/zyclonite&quot;&gt;Lukas Prettenthaler&lt;/a&gt; for your help).
The &lt;a href=&quot;https://vertx.io/docs/vertx-zookeeper/java/&quot;&gt;&lt;code&gt;vertx-zookeeper&lt;/code&gt;&lt;/a&gt; update will be available in the next release.&lt;/p&gt;
&lt;h4 id=&quot;upgrade-to-infinispan-10-and-ignite-2-8-0&quot;&gt;Upgrade to Infinispan 10 and Ignite 2.8.0&lt;/h4&gt;
&lt;p&gt;Following-up on the clustering SPI update :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the Infinispan cluster manager now depends on Infinispan 10&lt;/li&gt;
&lt;li&gt;the Apache Ignite cluster manager on 2.8.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;complete-refactoring-on-vertx-auth-authn-authz-split&quot;&gt;Complete refactoring on vertx-auth authn/authz split&lt;/h4&gt;
&lt;p&gt;Authentication has been decoupled from authorization, all modules now implement at least one of the two interfaces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AuthenticationProvider&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AuthorizationProvider&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This improvement provides more flexiblity such as user authentication using a property file and authorization against a database.&lt;/p&gt;
&lt;p&gt;This milestone also includes a few new implementations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vertx-auth-ldap&lt;/code&gt; supersedes &lt;code&gt;shiro&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vertx-authproperties&lt;/code&gt; supersedes &lt;code&gt;shiro&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vertx-auth-sql&lt;/code&gt; to use &lt;code&gt;sql-client&lt;/code&gt;s as source of user data&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vertx-auth-webauthn&lt;/code&gt; provides &lt;code&gt;FIDO2&lt;/code&gt; &lt;code&gt;webauthn&lt;/code&gt; authentication&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Many bug fixes have been done and missing features such as &lt;code&gt;JWK&lt;/code&gt; rotation support for &lt;code&gt;OAuth2/OIDC&lt;/code&gt;/&lt;code&gt;JWT&lt;/code&gt; is now implemented.&lt;/p&gt;
&lt;h4 id=&quot;vertx-web-updates&quot;&gt;Vertx-web updates&lt;/h4&gt;
&lt;p&gt;Vert.x-Web also got some updates.&lt;/p&gt;
&lt;p&gt;The session handler code now allows other storages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cookie-session-store&lt;/code&gt; - stores all session data in a cookie&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redis-session-store&lt;/code&gt; - store all session data in a redis key store database&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sessions follows the latest OWASP recommendations and allows to now use &lt;code&gt;cookieless&lt;/code&gt; sessions, where the session key is passed in the URL.&lt;/p&gt;
&lt;p&gt;Routers are now proxy aware: when enabled, routers can parse the &lt;code&gt;Forward&lt;/code&gt; headers and rebind the internal values
for protocol, host and port for user convinience. This is quite useful when applications are deployed behind
a caching server, which can modify the original request.&lt;/p&gt;
&lt;h4 id=&quot;junit-5-support-updates&quot;&gt;JUnit 5 support updates&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;vertx-junit5&lt;/code&gt; module has had the following updates since the last milestone.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/4.0.0-Deprecations-and-breaking-changes#split-the-core-implementation-and-extensions&quot;&gt;The internals have been refactored&lt;/a&gt; to split the implementation and extensions around a service-provider interface.
While this is largely transparent in terms of API, you need to be aware that:&lt;ul&gt;
&lt;li&gt;the Vertx parameter should be placed before any parameter that requires it for creation, such as when injecting a WebClient,&lt;/li&gt;
&lt;li&gt;the vertx-junit5 module now only offers APIs for the Vert.x core module (vertx-core),&lt;/li&gt;
&lt;li&gt;the &lt;a href=&quot;https://github.com/reactiverse/reactiverse-junit5-extensions&quot;&gt;reactiverse-junit5-extensions module&lt;/a&gt; now hosts extensions that offer extra parameter types like WebClient,&lt;/li&gt;
&lt;li&gt;the RxJava 1 and 2 bindings are now offered as vertx-junit5-rx-java and vertx-junit5-rx-java2 modules in the vertx-junit5-extensions repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;succeeding()&lt;/code&gt; and &lt;code&gt;failing()&lt;/code&gt; methods in &lt;code&gt;VertxTestContext&lt;/code&gt; have been deprecated to improve ergonomics, you should instead use &lt;code&gt;succeedingThenComplete()&lt;/code&gt; and &lt;code&gt;failingThenComplete()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;ramping-up-to-vert-x-4&quot;&gt;Ramping up to Vert.x 4&lt;/h4&gt;
&lt;p&gt;Instead of developing all new features exclusively in Vert.x 4, we introduce some of these features in the 3.x branch
so the community can benefit from them. The Vert.x 4 development focus on more fundamental changes that cannot be done
in the 3.x series.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://vertx.io/assets/blog/vertx-4-milestone4-release/vertx-4-timeline.png&quot; alt=&quot;Screenshot&quot; class=&quot;img-responsive&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is the fifth milestone of Vert.x 4, you can of course expect more milestones to outline the progress of the effort.&lt;/p&gt;
&lt;p&gt;You can also read the previous milestone announces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-4-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-4-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-3-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-3-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-2-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-2-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-1-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-1-released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;finally&quot;&gt;Finally&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/4.0.0-Deprecations-and-breaking-changes&quot;&gt;deprecations and breaking changes&lt;/a&gt;
 can be found on the wiki.&lt;/p&gt;
&lt;p&gt;The release artifacts have been deployed to &lt;a href=&quot;https://search.maven.org/search?q=g:io.vertx%20AND%20v:4.0.0-milestone5&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://repo1.maven.org/maven2/io/vertx/vertx-stack-manager/4.0.0-milestone5/&quot;&gt;Maven Central&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can bootstrap a Vert.x 4.0.0-milestone5 project using &lt;a href=&quot;https://start.vertx.io&quot;&gt;https://start.vertx.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The documentation has been deployed on this preview web-site &lt;a href=&quot;https://vertx-ci.github.io/vertx-4-preview/docs/&quot;&gt;https://vertx-ci.github.io/vertx-4-preview/docs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That’s it! Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Wed, 10 Jun 2020 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-4-milestone-5-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-4-milestone-5-released</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 3.9.1 released!</title>
          <description>
      &lt;article&gt;&lt;p&gt;We are extremely pleased to announce that the Eclipse Vert.x version 3.9.1 has been released.&lt;/p&gt;
&lt;p&gt;Among all bug fixes you can find in 3.9.1 this enhancement&lt;/p&gt;
&lt;h4 id=&quot;jdk-8-http-2-support&quot;&gt;JDK 8 HTTP/2 support&lt;/h4&gt;
&lt;p&gt;Previously using the Jetty ALPN agent or netty-tcnative was required to use HTTP/2 on JDK 8.&lt;/p&gt;
&lt;p&gt;TLS ALPN support has been back-ported to JDK 8 recently and Vert.x has been upgraded to support it which means now you
can have HTTP/2 on JDK 8 out of the box. You need to most recent version of OpenJDK 8 or Oracle JDK 8.&lt;/p&gt;
&lt;h4 id=&quot;finally&quot;&gt;Finally&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.9.1-Release-Notes&quot;&gt;3.9.1 release notes&lt;/a&gt; can be found on the wiki, as well as the
list of &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.9.1-Deprecations-and-breaking-changes&quot;&gt;deprecations and breaking changes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker images are available on &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Vert.x distribution can be downloaded on the website but is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge is available from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;NPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;Bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;WebJars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The release artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.9.1%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.9.1/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That’s it! Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Fri, 22 May 2020 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-3-9-1-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-9-1-released</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 3.9.0 released!</title>
          <description>
      &lt;article&gt;&lt;p&gt;We are extremely pleased to announce that the Eclipse Vert.x version 3.9.0 has been released.&lt;/p&gt;
&lt;h4 id=&quot;sql-client-fluent-queries&quot;&gt;SQL Client fluent queries&lt;/h4&gt;
&lt;p&gt;The query API becomes fluent with the addition of a &lt;code&gt;Query&lt;/code&gt; API for queries creation and configuration.&lt;/p&gt;
&lt;p&gt;Collectors query now becomes part of the &lt;code&gt;Query&lt;/code&gt; interface.&lt;/p&gt;
&lt;p&gt;This is a breaking API change done under the tech preview status given that SQL client is a Vert.x 4 feature back-ported to Vert.x 3.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;client.prepareQuery(sql).execute(tuple, ar -&gt; ...);

&lt;span class=&quot;hljs-comment&quot;&gt;// With a collector&lt;/span&gt;
client.preparedQuery(sql).collecting(Collectors.toList()).execute(tuple, ar -&gt; ...);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can read more about this new feature &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.9.0-Deprecations-and-breaking-changes#fluent-query-api&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;redis-client-backport&quot;&gt;Redis client backport&lt;/h4&gt;
&lt;p&gt;For Vert.x 4.0 we are doing a full reboot to the redis client. The functionality for the new client is ready to test on the master branch. In order to give users the opportunity to test and make the upcoming client even better it has been backported to the 3.9.0 release. The new client will allow users to connect to a single node, sentinel or cluster of redis nodes. The easiest way to start is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;Redis.createClient(
      vertx,
      &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; RedisOptions()
        .setConnectionString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;redis://localhost:7006&quot;&lt;/span&gt;))
      .send(Request.cmd(Command.PING), send -&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (send.succeeded()) {
          &lt;span class=&quot;hljs-comment&quot;&gt;// Should have received a pong...&lt;/span&gt;
        }
      });&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;same-site-cookies&quot;&gt;Same-site cookies&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/draft-west-first-party-cookies-07&quot;&gt;&lt;code&gt;SameSite&lt;/code&gt; Cookie&lt;/a&gt; policy has been added to the HTTP Server Cookies.&lt;/p&gt;
&lt;p&gt;This is also applicable to web which allows cookie sessions to use &lt;code&gt;SameSite&lt;/code&gt; cookies:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;SessionHandler.create(store)
  .setCookieSameSite(CookieSameSite.STRICT);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Same-site cookies let servers require that a cookie shouldn’t be sent with cross-site (where Site is defined by the registrable domain) requests,
which provides some protection against cross-site request forgery attacks (CSRF).&lt;/p&gt;
&lt;h4 id=&quot;kafka-client-upgrade&quot;&gt;Kafka client upgrade&lt;/h4&gt;
&lt;p&gt;The Kafka client has been upgraded to Kafka 2.4.0 .&lt;/p&gt;
&lt;p&gt;Our reactive client exposes the Kafka Admin API. As of 2.4.0 this API has been replaced by a new Kafka Admin API and therefore
the Vert.x Kafka Admin API changes, e.g listing consumers groups&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;adminClient.listConsumerGroups(ar -&gt; {
    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ConsumerGroups= &quot;&lt;/span&gt; + ar.result());
});&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;future-api&quot;&gt;Future API&lt;/h4&gt;
&lt;p&gt;With the recent addition of &lt;code&gt;Future#onComplete(...)&lt;/code&gt; supporting several handlers per &lt;code&gt;Future&lt;/code&gt; in 3.9 made the
&lt;code&gt;Future#setHandler(...)&lt;/code&gt; method feel awkward. Indeed &lt;code&gt;setHandler&lt;/code&gt; conveys the meaning that the &lt;code&gt;Future&lt;/code&gt; manages
a single handler. In 3.9 we deprecate &lt;code&gt;Future#setHandler&lt;/code&gt; in favor of &lt;code&gt;Future#onComplete&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;edns-disabled-by-default&quot;&gt;EDNS disabled by default&lt;/h4&gt;
&lt;p&gt;EDNS is an extension mechanism for DNS (&lt;a href=&quot;https://fr.wikipedia.org/wiki/EDNS&quot;&gt;https://fr.wikipedia.org/wiki/EDNS&lt;/a&gt;) that should be disabled by default. It might
cause unwanted issue and should be disabled by default.&lt;/p&gt;
&lt;h4 id=&quot;auth-deprecation-warnings&quot;&gt;Auth Deprecation warnings&lt;/h4&gt;
&lt;p&gt;As of 3.9.0 many APIs will be start warning about deprecations. There is a big refactoring and some breaking API changes coming
on 4.0.0 and these warnings are just to give users a heads up that API will change on the upcoming version.&lt;/p&gt;
&lt;p&gt;For more information about the upcoming 4.0 changes you can read &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/4.0.0-Deprecations-and-breaking-changes&quot;&gt;4.0.0-Deprecations-and-breaking-changes&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;dependency-upgrades&quot;&gt;Dependency upgrades&lt;/h4&gt;
&lt;p&gt;In 3.9 we update a few versions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Netty 4.1.48.Final&lt;/li&gt;
&lt;li&gt;Jackson 2.10.2&lt;/li&gt;
&lt;li&gt;Guava 25.1-jre&lt;/li&gt;
&lt;li&gt;GraphQL Java 14&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;finally&quot;&gt;Finally&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.9.0-Release-Notes&quot;&gt;3.9.0 release notes&lt;/a&gt; can be found on the wiki, as well as the
list of &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.9.0-Deprecations-and-breaking-changes&quot;&gt;deprecations and breaking changes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker images are available on &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Vert.x distribution can be downloaded on the website but is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge is available from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;NPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;Bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;WebJars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The release artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.9.0%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.9.0/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That’s it! Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Thu, 02 Apr 2020 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-3-9-0-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-9-0-released</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Easy SSO for Vert.x with Keycloak</title>
          <description>
      &lt;article&gt;&lt;h1 id=&quot;easy-sso-for-vert-x-with-keycloak&quot;&gt;Easy SSO for Vert.x with Keycloak&lt;/h1&gt;
&lt;h2 id=&quot;tl-dr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;In this blog post you’ll learn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to implement Single Sign-on with OpenID Connect&lt;/li&gt;
&lt;li&gt;How to use Keycloak’s OpenID Discovery to infer OpenID provider configuration&lt;/li&gt;
&lt;li&gt;How to obtain user information&lt;/li&gt;
&lt;li&gt;How to check for authorization&lt;/li&gt;
&lt;li&gt;How to call a Bearer protected service with an Access Token&lt;/li&gt;
&lt;li&gt;How to implement a form based logout&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;hello-blog&quot;&gt;Hello Blog&lt;/h2&gt;
&lt;p&gt;This is my first post in the Vert.x Blog and I must admit that up until now I have never used Vert.x in a real project.
“Why are you here?”, you might ask… Well I currently have two main hobbies, learning new things and securing apps with &lt;a href=&quot;https://www.keycloak.org/&quot;&gt;Keycloak&lt;/a&gt;.
So a few days ago, I stumbled upon the &lt;a href=&quot;https://www.youtube.com/watch?v=LsaXy7SRXMY&amp;list=PLkeCJDaCC2ZsnySdg04Aq9D9FpAZY6K5D&quot;&gt;Introduction to Vert.x video series on youtube&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/infosec812&quot;&gt;Deven Phillips&lt;/a&gt; and I was immediately hooked. Vert.x was a new thing for me, so the next logical step was to figure out how to secure a Vert.x app with Keycloak.&lt;/p&gt;
&lt;p&gt;For this example I build a small web app with Vert.x that shows how to implement Single Sign-on (SSO) with Keycloak
and OpenID Connect, obtain information about the current user, check for roles, call bearer protected services and properly handling logout.&lt;/p&gt;
&lt;h2 id=&quot;keycloak&quot;&gt;Keycloak&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.keycloak.org/&quot;&gt;Keycloak&lt;/a&gt; is a Open Source Identity and Access Management solution which provides support for OpenID Connect
based Singe-Sign on, among many other things. I briefly looked for ways to securing a Vert.x app with Keycloak
and quickly found an &lt;a href=&quot;https://vertx.io/blog/vertx-3-and-keycloak-tutorial/&quot;&gt;older Vert.x Keycloak integration example&lt;/a&gt; in this very blog.
Whilst this is a good start for beginners, the example contains a few issues, e.g.:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It uses hardcoded OpenID provider configuration&lt;/li&gt;
&lt;li&gt;Features a very simplistic integration (for the sake of simplicity)&lt;/li&gt;
&lt;li&gt;No user information used&lt;/li&gt;
&lt;li&gt;No logout functionality is shown&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That somehow nerdsniped me a bit and so it came that, after a long day of consulting work, I sat down to create an example for a complete Keycloak integration based on &lt;a href=&quot;https://vertx.io/docs/vertx-auth-oauth2/java/&quot;&gt;Vert.x OpenID Connect / OAuth2 Support&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So let’s get started!&lt;/p&gt;
&lt;h3 id=&quot;keycloak-setup&quot;&gt;Keycloak Setup&lt;/h3&gt;
&lt;p&gt;To secure a Vert.x app with Keycloak we of course need a Keycloak instance. Although &lt;a href=&quot;https://www.keycloak.org/docs/latest/getting_started/&quot;&gt;Keycloak has a great getting started guide&lt;/a&gt; I wanted to make it a bit easier to put everything together, therefore I prepared a local Keycloak docker container &lt;a href=&quot;https://github.com/thomasdarimont/vertx-playground/tree/master/keycloak-vertx#start-keycloak-with-the-vertx-realm&quot;&gt;as described here&lt;/a&gt; that you can start easily, which comes with all the required configuration in place.&lt;/p&gt;
&lt;p&gt;The preconfigured Keycloak realm named &lt;code&gt;vertx&lt;/code&gt; contains a &lt;code&gt;demo-client&lt;/code&gt; for our Vert.x web app and a set
of users for testing.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;docker run \
  -&lt;span class=&quot;ruby&quot;&gt;it \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;-name vertx-keycloak \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;-rm \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;e &lt;span class=&quot;hljs-constant&quot;&gt;KEYCLOAK_USER&lt;/span&gt;=admin \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;e &lt;span class=&quot;hljs-constant&quot;&gt;KEYCLOAK_PASSWORD&lt;/span&gt;=admin \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;e &lt;span class=&quot;hljs-constant&quot;&gt;KEYCLOAK_IMPORT&lt;/span&gt;=&lt;span class=&quot;hljs-regexp&quot;&gt;/tmp/vertx&lt;/span&gt;-realm.json \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;v &lt;span class=&quot;hljs-variable&quot;&gt;$PWD&lt;/span&gt;/vertx-realm.&lt;span class=&quot;hljs-symbol&quot;&gt;json:&lt;/span&gt;/tmp/vertx-realm.json \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;p &lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt; \
&lt;/span&gt;  quay.io/keycloak/keycloak:9.0.0&lt;/code&gt;&lt;/pre&gt;


&lt;h2 id=&quot;vert-x-web-app&quot;&gt;Vert.x Web App&lt;/h2&gt;
&lt;p&gt;The simple web app consists of a single &lt;code&gt;Verticle&lt;/code&gt;, runs on &lt;code&gt;http://localhost:8090&lt;/code&gt; and provides a few routes with protected resources. &lt;a href=&quot;https://github.com/thomasdarimont/vertx-playground/blob/master/keycloak-vertx/src/main/java/demo/MainVerticle.java&quot;&gt;You can find the complete example here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The web app contains the following routes with handlers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; - The unprotected index page&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/protected&lt;/code&gt; - The protected page, which shows a greeting message, users need to login to access pages beneath this path.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/protected/user&lt;/code&gt; - The protected user page, which shows some information about the user.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/protected/admin&lt;/code&gt; - The protected admin page, which shows some information about the admin, only users with role &lt;code&gt;admin&lt;/code&gt; can access this page.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/protected/userinfo&lt;/code&gt; - The protected userinfo page, obtains user information from the bearer token protected userinfo endpoint in Keycloak.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/logout&lt;/code&gt; - The protected logout resource, which triggers the user logout.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;running-the-app&quot;&gt;Running the app&lt;/h3&gt;
&lt;p&gt;To run the app, we need to build our app via:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;cd&lt;/span&gt; keycloak-vertx
mvn clean &lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a runnable jar, which we can run via:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;java&lt;/span&gt; -jar target/&lt;span class=&quot;hljs-regexp&quot;&gt;*.jar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note, that you need to start Keycloak, since our app will try to fetch configuration from Keycloak.&lt;/p&gt;
&lt;p&gt;If the application is running, just browse to: &lt;code&gt;http://localhost:8090/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An example interaction with the app can be seen in the following gif:
&lt;img src=&quot;https://vertx.io/assets/blog/vertx-keycloak-integration/2020-03-07-vertx-keycloak-integration.gif&quot; alt=&quot;Vert.x Keycloak Integration Demo&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;router-sessionstore-and-csrf-protection&quot;&gt;Router, SessionStore and CSRF Protection&lt;/h3&gt;
&lt;p&gt;We start the configuration of our web app by creating a &lt;code&gt;Router&lt;/code&gt; where we can add custom handler functions for our routes.
To properly handle the authentication state we need to create a &lt;code&gt;SessionStore&lt;/code&gt; and attach it to the &lt;code&gt;Router&lt;/code&gt;.
The &lt;code&gt;SessionStore&lt;/code&gt; is used by our OAuth2/OpenID Connect infrastructure to associate authentication information with a session.
By the way, the &lt;code&gt;SessionStore&lt;/code&gt; can also be clustered if you need to distribute the server-side state.&lt;/p&gt;
&lt;p&gt;Note that if you want to keep your server stateless but still want to support clustering,
then you could provide your own implementation of a &lt;code&gt;SessionStore&lt;/code&gt; which stores the session information
as an encrypted cookie on the Client.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;Router router = Router.router(vertx);

&lt;span class=&quot;hljs-comment&quot;&gt;// Store session information on the server side&lt;/span&gt;
SessionStore sessionStore = LocalSessionStore.create(vertx);
SessionHandler sessionHandler = SessionHandler.create(sessionStore);
router.route().handler(sessionHandler);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to protected against CSRF attacks it is good practice to protect HTML forms with a CSRF token.
We need this for our logout form that we’ll see later.&lt;/p&gt;
&lt;p&gt;To do this we configure a &lt;code&gt;CSRFHandler&lt;/code&gt; and add it to our &lt;code&gt;Router&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// CSRF handler setup required for logout form&lt;/span&gt;
String csrfSecret = &lt;span class=&quot;hljs-string&quot;&gt;&quot;zwiebelfische&quot;&lt;/span&gt;;
CSRFHandler csrfHandler = CSRFHandler.create(csrfSecret);
router.route().handler(ctx -&gt; {
            &lt;span class=&quot;hljs-comment&quot;&gt;// Ensures that the csrf token request parameter is available for the CsrfHandler&lt;/span&gt;
            &lt;span class=&quot;hljs-comment&quot;&gt;// after the logout form was submitted.&lt;/span&gt;
            &lt;span class=&quot;hljs-comment&quot;&gt;// See &quot;Handling HTML forms&quot; https://vertx.io/docs/vertx-core/java/#_handling_requests&lt;/span&gt;
            ctx.request().setExpectMultipart(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);
            ctx.request().endHandler(v -&gt; csrfHandler.handle(ctx));
        }
);&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;keycloak-setup-via-openid-connect-discovery&quot;&gt;Keycloak Setup via OpenID Connect Discovery&lt;/h3&gt;
&lt;p&gt;Our app is registered as a confidential OpenID Connect client with Authorization Code Flow in Keycloak,
thus we need to configure &lt;code&gt;client_id&lt;/code&gt; and &lt;code&gt;client_secret&lt;/code&gt;. Confidential clients are typically used
for server-side web applications, where one can securely store the &lt;code&gt;client_secret&lt;/code&gt;. You can find out more
about&lt;a href=&quot;https://www.keycloak.org/docs/latest/server_admin/index.html#_access-type&quot;&gt;The different Client Access Types&lt;/a&gt; in the Keycloak documentation.&lt;/p&gt;
&lt;p&gt;Since we don’t want to configure things like OAuth2 / OpenID Connect Endpoints ourselves, we use Keycloak’s OpenID Connect discovery endpoint to infer the necessary Oauth2 / OpenID Connect endpoint URLs.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;String hostname = System.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http.host&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; port = Integer.getInteger(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http.port&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8090&lt;/span&gt;);
String baseUrl = String.format(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://%s:%d&quot;&lt;/span&gt;, hostname, port);
String oauthCallbackPath = &lt;span class=&quot;hljs-string&quot;&gt;&quot;/callback&quot;&lt;/span&gt;;

OAuth2ClientOptions clientOptions = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; OAuth2ClientOptions()
    .setFlow(OAuth2FlowType.AUTH_CODE)
    .setSite(System.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;oauth2.issuer&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://localhost:8080/auth/realms/vertx&quot;&lt;/span&gt;))
    .setClientID(System.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;oauth2.client_id&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;demo-client&quot;&lt;/span&gt;))
    .setClientSecret(System.getProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;oauth2.client_secret&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1f88bd14-7e7f-45e7-be27-d680da6e48d8&quot;&lt;/span&gt;));

KeycloakAuth.discover(vertx, clientOptions, asyncResult -&gt; {

    OAuth2Auth oauth2Auth = asyncResult.result();

    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (oauth2Auth == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Could not configure Keycloak integration via OpenID Connect Discovery Endpoint. Is Keycloak running?&quot;&lt;/span&gt;);
    }

    AuthHandler oauth2 = OAuth2AuthHandler.create(oauth2Auth, baseUrl + oauthCallbackPath)
        .setupCallback(router.get(oauthCallbackPath))
        &lt;span class=&quot;hljs-comment&quot;&gt;// Additional scopes: openid for OpenID Connect&lt;/span&gt;
        .addAuthority(&lt;span class=&quot;hljs-string&quot;&gt;&quot;openid&quot;&lt;/span&gt;);

    &lt;span class=&quot;hljs-comment&quot;&gt;// session handler needs access to the authenticated user, otherwise we get an infinite redirect loop&lt;/span&gt;
    sessionHandler.setAuthProvider(oauth2Auth);

    &lt;span class=&quot;hljs-comment&quot;&gt;// protect resources beneath /protected/* with oauth2 handler&lt;/span&gt;
    router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/protected/*&quot;&lt;/span&gt;).handler(oauth2);

    &lt;span class=&quot;hljs-comment&quot;&gt;// configure route handlers&lt;/span&gt;
    configureRoutes(router, webClient, oauth2Auth);
});

getVertx().createHttpServer().requestHandler(router).listen(port);&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;route-handlers&quot;&gt;Route handlers&lt;/h3&gt;
&lt;p&gt;We configure our route handlers via &lt;code&gt;configureRoutes&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;configureRoutes&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Router router, WebClient webClient, OAuth2Auth oauth2Auth)&lt;/span&gt; &lt;/span&gt;{

    router.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;).handler(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;::handleIndex);

    router.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/protected&quot;&lt;/span&gt;).handler(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;::handleGreet);
    router.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/protected/user&quot;&lt;/span&gt;).handler(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;::handleUserPage);
    router.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/protected/admin&quot;&lt;/span&gt;).handler(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;::handleAdminPage);

    &lt;span class=&quot;hljs-comment&quot;&gt;// extract discovered userinfo endpoint url&lt;/span&gt;
    String userInfoUrl =  ((OAuth2AuthProviderImpl)oauth2Auth).getConfig().getUserInfoPath();
    router.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/protected/userinfo&quot;&lt;/span&gt;).handler(createUserInfoHandler(webClient, userInfoUrl));

    router.post(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/logout&quot;&lt;/span&gt;).handler(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;::handleLogout);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The index handler exposes an unprotected resource:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;handleIndex&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext ctx)&lt;/span&gt; &lt;/span&gt;{
    respondWithOk(ctx, &lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;h1&gt;Welcome to Vert.x Keycloak Example&lt;/h1&gt;&lt;br&gt;&lt;a href=\&quot;/protected\&quot;&gt;Protected&lt;/a&gt;&quot;&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;extract-user-information-from-the-openid-connect-id-token&quot;&gt;Extract User Information from the OpenID Connect ID Token&lt;/h3&gt;
&lt;p&gt;Our app exposes a simple greeting page which shows some information about the user and provides links to other pages.&lt;/p&gt;
&lt;p&gt;The user greeting handler is protected by the Keycloak OAuth2 / OpenID Connect integration. To show information about
the current user, we first need to call the &lt;code&gt;ctx.user()&lt;/code&gt; method to get an user object we can work with.
To access the OAuth2 token information, we need to cast it to &lt;code&gt;OAuth2TokenImpl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can extract the user information like the username from the &lt;code&gt;IDToken&lt;/code&gt; exposed by the user object via &lt;code&gt;user.idToken().getString(&quot;preferred_username&quot;)&lt;/code&gt;.
Note, there are many more claims like (name, email, givenanme, familyname etc.) available. The &lt;a href=&quot;https://openid.net/specs/openid-connect-core-1_0.html#Claims&quot;&gt;OpenID Connect Core Specification&lt;/a&gt; contains a list of available claims.&lt;/p&gt;
&lt;p&gt;We also generate a list with links to the other pages which are supported:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;handleGreet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext ctx)&lt;/span&gt; &lt;/span&gt;{

    OAuth2TokenImpl oAuth2Token = (OAuth2TokenImpl) ctx.user();

    String username = oAuth2Token.idToken().getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;preferred_username&quot;&lt;/span&gt;);

    String greeting = String.format(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;h1&gt;Hi %s @%s&lt;/h1&gt;&lt;ul&gt;&quot;&lt;/span&gt; +
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;li&gt;&lt;a href=\&quot;/protected/user\&quot;&gt;User Area&lt;/a&gt;&lt;/li&gt;&quot;&lt;/span&gt; +
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;li&gt;&lt;a href=\&quot;/protected/admin\&quot;&gt;Admin Area&lt;/a&gt;&lt;/li&gt;&quot;&lt;/span&gt; +
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;li&gt;&lt;a href=\&quot;/protected/userinfo\&quot;&gt;User Info (Remote Call)&lt;/a&gt;&lt;/li&gt;&quot;&lt;/span&gt; +
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;/ul&gt;&quot;&lt;/span&gt;, username, Instant.now());

    String logoutForm = createLogoutForm(ctx);

    respondWithOk(ctx, &lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html&quot;&lt;/span&gt;, greeting + logoutForm);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The user page handler shows information about the current user:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;handleUserPage&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext ctx)&lt;/span&gt; &lt;/span&gt;{

    OAuth2TokenImpl user = (OAuth2TokenImpl) ctx.user();

    String username = user.idToken().getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;preferred_username&quot;&lt;/span&gt;);
    String displayName = oAuth2Token.idToken().getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;);

    String content = String.format(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;h1&gt;User Page: %s (%s) @%s&lt;/h1&gt;&lt;a href=\&quot;/protected\&quot;&gt;Protected Area&lt;/a&gt;&quot;&lt;/span&gt;,
                                   username, displayName, Instant.now());
    respondWithOk(ctx, &lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html&quot;&lt;/span&gt;, content);
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;authorization-checking-for-required-roles&quot;&gt;Authorization: Checking for Required Roles&lt;/h3&gt;
&lt;p&gt;Our app exposes a simple admin page which shows some information for admins, which should only be visible for admins. Thus we require that users must have the &lt;code&gt;admin&lt;/code&gt; realm role in Keycloak to be able to access the admin page.&lt;/p&gt;
&lt;p&gt;This is done via a call to &lt;code&gt;user.isAuthorized(&quot;realm:admin&quot;, cb)&lt;/code&gt;. The handler function &lt;code&gt;cb&lt;/code&gt; exposes
the result of the authorization check via the &lt;code&gt;AsyncResult&lt;Boolean&gt; res&lt;/code&gt;. If the current user has the
&lt;code&gt;admin&lt;/code&gt; role then the result is &lt;code&gt;true&lt;/code&gt; otherwise &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;handleAdminPage&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext ctx)&lt;/span&gt; &lt;/span&gt;{

    OAuth2TokenImpl user = (OAuth2TokenImpl) ctx.user();

    &lt;span class=&quot;hljs-comment&quot;&gt;// check for realm-role &quot;admin&quot;&lt;/span&gt;
    user.isAuthorized(&lt;span class=&quot;hljs-string&quot;&gt;&quot;realm:admin&quot;&lt;/span&gt;, res -&gt; {

        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!res.succeeded() || !res.result()) {
            respondWith(ctx, &lt;span class=&quot;hljs-number&quot;&gt;403&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;h1&gt;Forbidden&lt;/h1&gt;&quot;&lt;/span&gt;);
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
        }

        String username = user.idToken().getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;preferred_username&quot;&lt;/span&gt;);

        String content = String.format(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;h1&gt;Admin Page: %s @%s&lt;/h1&gt;&lt;a href=\&quot;/protected\&quot;&gt;Protected Area&lt;/a&gt;&quot;&lt;/span&gt;,
                                        username, Instant.now());
        respondWithOk(ctx, &lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html&quot;&lt;/span&gt;, content);
    });
}&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;call-services-protected-with-bearer-token&quot;&gt;Call Services protected with Bearer Token&lt;/h4&gt;
&lt;p&gt;Often we need to call other services from our web app that are protected via Bearer Authentication. This means
that we need a valid &lt;code&gt;access token&lt;/code&gt; to access a resource provided on another server.&lt;/p&gt;
&lt;p&gt;To demonstrate this we use Keycloak’s &lt;code&gt;/userinfo&lt;/code&gt; endpoint as a straw man to demonstrate backend calls with a bearer token.&lt;/p&gt;
&lt;p&gt;We can obtain the current valid &lt;code&gt;access token&lt;/code&gt; via &lt;code&gt;user.opaqueAccessToken()&lt;/code&gt;.
Since we use a &lt;code&gt;WebClient&lt;/code&gt; to call the protected endpoint, we need to pass the &lt;code&gt;access token&lt;/code&gt;
via the &lt;code&gt;Authorization&lt;/code&gt; header by calling &lt;code&gt;bearerTokenAuthentication(user.opaqueAccessToken())&lt;/code&gt;
in the current &lt;code&gt;HttpRequest&lt;/code&gt; object:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Handler&lt;RoutingContext&gt; &lt;span class=&quot;hljs-title&quot;&gt;createUserInfoHandler&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(WebClient webClient, String userInfoUrl)&lt;/span&gt; &lt;/span&gt;{

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (RoutingContext ctx) -&gt; {

        OAuth2TokenImpl user = (OAuth2TokenImpl) ctx.user();

        URI userInfoEndpointUri = URI.create(userInfoUrl);
        webClient
            .get(userInfoEndpointUri.getPort(), userInfoEndpointUri.getHost(), userInfoEndpointUri.getPath())
            &lt;span class=&quot;hljs-comment&quot;&gt;// use the access token for calls to other services protected via JWT Bearer authentication&lt;/span&gt;
            .bearerTokenAuthentication(user.opaqueAccessToken())
            .as(BodyCodec.jsonObject())
            .send(ar -&gt; {

                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!ar.succeeded()) {
                    respondWith(ctx, &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;{}&quot;&lt;/span&gt;);
                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
                }

                JsonObject body = ar.result().body();
                respondWithOk(ctx, &lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;, body.encode());
            });
    };
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;handle-logout&quot;&gt;Handle logout&lt;/h3&gt;
&lt;p&gt;Now that we got a working SSO login with authorization, it would be great if we would allow users to logout again.
To do this we can leverage the built-in OpenID Connect logout functionality which can be called via &lt;code&gt;oAuth2Token.logout(cb)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The handler function &lt;code&gt;cb&lt;/code&gt; exposes the result of the logout action via the &lt;code&gt;AsyncResult&lt;Void&gt; res&lt;/code&gt;.
If the logout was successfull we destory our session via &lt;code&gt;ctx.session().destroy()&lt;/code&gt; and redirect the user to the index page.&lt;/p&gt;
&lt;p&gt;The logout form is generated via the &lt;code&gt;createLogoutForm&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;As mentioned earlier, we need to protect our logout form with a CSRF token to prevent &lt;a href=&quot;https://owasp.org/www-community/attacks/csrf&quot;&gt;CSRF attacks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note: If we had endpoints that would accept data sent to the server, then we’d need to guard those endpoints with an CSRF token as well.&lt;/p&gt;
&lt;p&gt;We need to obtain the generated &lt;code&gt;CSRFToken&lt;/code&gt; and render it into a hidden form input field that’s transfered via HTTP POST when the logout form is submitted:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;handleLogout&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext ctx)&lt;/span&gt; &lt;/span&gt;{

    OAuth2TokenImpl oAuth2Token = (OAuth2TokenImpl) ctx.user();
    oAuth2Token.logout(res -&gt; {

        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!res.succeeded()) {
            &lt;span class=&quot;hljs-comment&quot;&gt;// the user might not have been logged out, to know why:&lt;/span&gt;
            respondWith(ctx, &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html&quot;&lt;/span&gt;, String.format(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;h1&gt;Logout failed %s&lt;/h1&gt;&quot;&lt;/span&gt;, res.cause()));
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
        }

        ctx.session().destroy();
        ctx.response().putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;location&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/?logout=true&quot;&lt;/span&gt;).setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;302&lt;/span&gt;).end();
    });
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;createLogoutForm&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext ctx)&lt;/span&gt; &lt;/span&gt;{

    String csrfToken = ctx.get(CSRFHandler.DEFAULT_HEADER_NAME);

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;form action=\&quot;/logout\&quot; method=\&quot;post\&quot;&gt;&quot;&lt;/span&gt;
            + String.format(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;input type=\&quot;hidden\&quot; name=\&quot;%s\&quot; value=\&quot;%s\&quot;&gt;&quot;&lt;/span&gt;, CSRFHandler.DEFAULT_HEADER_NAME, csrfToken)
            + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;button&gt;Logout&lt;/button&gt;&lt;/form&gt;&quot;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some additional plumbing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;respondWithOk&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext ctx, String contentType, String content)&lt;/span&gt; &lt;/span&gt;{
    respondWith(ctx, &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, contentType, content);
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext ctx, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; statusCode, String contentType, String content)&lt;/span&gt; &lt;/span&gt;{
    ctx.request().response() &lt;span class=&quot;hljs-comment&quot;&gt;//&lt;/span&gt;
            .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;, contentType) &lt;span class=&quot;hljs-comment&quot;&gt;//&lt;/span&gt;
            .setStatusCode(statusCode)
            .end(content);
}&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;more-examples&quot;&gt;More examples&lt;/h2&gt;
&lt;p&gt;This concludes the Keycloak integration example.&lt;/p&gt;
&lt;p&gt;Check out the complete example in &lt;a href=&quot;https://github.com/thomasdarimont/vertx-playground/tree/master/keycloak-vertx&quot;&gt;keycloak-vertx Examples Repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thank you for your time, stay tuned for more updates! If you want to learn more about Keycloak, feel free to reach out to me. You can find me via &lt;a href=&quot;https://twitter.com/thomasdarimont&quot;&gt;thomasdarimont on twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy Hacking!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 16 Mar 2020 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/easy-sso-for-vert-x-with-keycloak</link>
          <guid isPermaLink="true">https://vertx.io/blog/easy-sso-for-vert-x-with-keycloak</guid>
          <author>
            <name>thomasdarimont</name>
            <uri>http://github.com/thomasdarimont</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 3.8.5</title>
          <description>
      &lt;article&gt;&lt;p&gt;We have just released Vert.x 3.8.5, a bug fix release of Vert.x 3.8.x.&lt;/p&gt;
&lt;p&gt;Since the release of Vert.x 3.8.5, quite a few bugs have been reported. We would like to thank you all for reporting these issues.&lt;/p&gt;
&lt;p&gt;Vert.x 3.8.5 deprecations and breaking changes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.8.5-Deprecations-and-breaking-changes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.8.5-Deprecations-and-breaking-changes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vert.x 3.8.5 release notes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.8.5-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.8.5-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.8.%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.8.4/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can bootstrap a Vert.x 3.8.5 project using &lt;a href=&quot;https://start.vertx.io&quot;&gt;https://start.vertx.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Fri, 24 Jan 2020 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-3-8-5</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-8-5</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 4 milestone 4 released!</title>
          <description>
      &lt;article&gt;&lt;p&gt;We are extremely pleased to announce the fourth 4.0 milestone release of Eclipse Vert.x .&lt;/p&gt;
&lt;p&gt;Vert.x 4 is the evolution of the Vert.x 3.x series that will bring key features to Vert.x.&lt;/p&gt;
&lt;p&gt;This release aims to provide a reliable distribution of the current development of Vert.x 4 for people that
want to try it and provide feedback.&lt;/p&gt;
&lt;h4 id=&quot;futurisation&quot;&gt;Futurisation&lt;/h4&gt;
&lt;p&gt;Vert.x 4 extends the 3.x callback asynchronous model to a future/callback hybrid model.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;NetClient&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-comment&quot;&gt;// Since 3.0&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; port, String host, Handler&lt;AsyncResult&lt;NetSocket&gt;&gt; handler)&lt;/span&gt;&lt;/span&gt;;

  &lt;span class=&quot;hljs-comment&quot;&gt;// New in 4.0&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;Future&lt;NetSocket&gt; &lt;span class=&quot;hljs-title&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; port, String host)&lt;/span&gt;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This third milestone makes progress and fully covers with the following stack modules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vert.x Shell&lt;/li&gt;
&lt;li&gt;Vert.x Mail Client&lt;/li&gt;
&lt;li&gt;Vert.x Consul Client&lt;/li&gt;
&lt;li&gt;Vert.x RabbitMQ Client&lt;/li&gt;
&lt;li&gt;Vert.x Stomp&lt;/li&gt;
&lt;li&gt;Vert.x Mongo Client&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;mail-client-improvements&quot;&gt;Mail client improvements&lt;/h4&gt;
&lt;p&gt;Our mail clients had nice contribution with the ability to use streaming payload for attachements and the
support for DKIM signatures.&lt;/p&gt;
&lt;h4 id=&quot;general-client-improvements&quot;&gt;General client improvements&lt;/h4&gt;
&lt;p&gt;Some Vert.x client are designed to be used within the verticle that created it while some can be shared between
verticles. This is a technical limitation that stems from the fact that client are implemented using Vert.x or Netty
(such as &lt;code&gt;HttpClient&lt;/code&gt;) and are bound to the underlying event-loop that powers them.&lt;/p&gt;
&lt;p&gt;In Vert.x 4 we decided to get away of this limitation to simplify the usage and the configuration of the clients. Of course
it is possible to continue confining clients within a verticle (for best performance) but clients can be now shared between
verticles when desired with a neglectible impact on performance (requiring message passing).&lt;/p&gt;
&lt;h4 id=&quot;security-improvements&quot;&gt;Security improvements&lt;/h4&gt;
&lt;p&gt;Finally here are a few improvements done in our security layer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vertx Auth is now decoupled to handle authn/authz as 2 independent functions thanks to @sbastiandev&lt;/li&gt;
&lt;li&gt;Auth Shiro is deprecated in favour of the new “auth properties” module and “auth ldap”&lt;/li&gt;
&lt;li&gt;Web CSRF tokens are session aware to allow multiple requests from the same user&lt;/li&gt;
&lt;li&gt;Initial support for webauthn&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;ramping-up-to-vert-x-4&quot;&gt;Ramping up to Vert.x 4&lt;/h4&gt;
&lt;p&gt;Instead of developing all new features exclusively in Vert.x 4, we introduce some of these features in the 3.x branch
so the community can benefit from them. The Vert.x 4 development focus on more fundamental changes that cannot be done
in the 3.x series.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://vertx.io/assets/blog/vertx-4-milestone4-release/vertx-4-timeline.png&quot; alt=&quot;Screenshot&quot; class=&quot;img-responsive&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is the forth milestone of Vert.x 4, you can of course expect more milestones to outline the progress of the effort.&lt;/p&gt;
&lt;p&gt;You can also read the previous milestone announces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-3-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-3-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-2-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-2-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-4-milestone-1-released&quot;&gt;https://vertx.io/blog/eclipse-vert-x-4-milestone-1-released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;finally&quot;&gt;Finally&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/4.0.0-Deprecations-and-breaking-changes&quot;&gt;deprecations and breaking changes&lt;/a&gt;
 can be found on the wiki.&lt;/p&gt;
&lt;p&gt;For this release there are no Docker images.,&lt;/p&gt;
&lt;p&gt;The release artifacts have been deployed to &lt;a href=&quot;https://search.maven.org/search?q=g:io.vertx%20AND%20v:4.0.0-milestone4&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://repo1.maven.org/maven2/io/vertx/vertx-stack-manager/4.0.0-milestone4/&quot;&gt;Maven Central&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can bootstrap a Vert.x 4.0.0-milestone4 project using &lt;a href=&quot;https://start.vertx.io&quot;&gt;https://start.vertx.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The documentation has been deployed on this preview web-site &lt;a href=&quot;https://vertx-ci.github.io/vertx-4-preview/docs/&quot;&gt;https://vertx-ci.github.io/vertx-4-preview/docs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That’s it! Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Fri, 13 Dec 2019 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-4-milestone-4-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-4-milestone-4-released</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 3.8.4</title>
          <description>
      &lt;article&gt;&lt;p&gt;We have just released Vert.x 3.8.4, a bug fix release of Vert.x 3.8.x.&lt;/p&gt;
&lt;p&gt;Since the release of Vert.x 3.8.4, quite a few bugs have been reported. We would like to thank you all for reporting these issues.&lt;/p&gt;
&lt;p&gt;Vert.x 3.8.4 release notes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.8.4-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.8.4-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.8.%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.8.4/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can bootstrap a Vert.x 3.8.4 project using &lt;a href=&quot;https://start.vertx.io&quot;&gt;https://start.vertx.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Thu, 28 Nov 2019 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-3-8-4</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-8-4</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Send web requests and assert results with vertx-junit5-web-client</title>
          <description>
      &lt;article&gt;&lt;p&gt;In last Vert.x 3.8 release we added a new module called &lt;code&gt;vertx-junit5-web-client&lt;/code&gt;, that brings &lt;a href=&quot;https://vertx.io/docs/vertx-web-client/java/&quot;&gt;Vert.x Web Client&lt;/a&gt; injection
into tests and provides an API called &lt;code&gt;TestRequest&lt;/code&gt; to simplify the creation and assertions on &lt;code&gt;WebClient&lt;/code&gt; requests:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; io.vertx.junit5.web.TestRequest.*;

&lt;span class=&quot;hljs-annotation&quot;&gt;@ExtendWith&lt;/span&gt;({
  VertxExtension.class, &lt;span class=&quot;hljs-comment&quot;&gt;// VertxExtension MUST be configured before VertxWebClientExtension&lt;/span&gt;
  VertxWebClientExtension.class
})
&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TestRequestExample&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-annotation&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(WebClient client, VertxTestContext testContext)&lt;/span&gt; &lt;/span&gt;{
    testRequest(client, HttpMethod.GET, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/hello&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// Build the request&lt;/span&gt;
      .with(
        queryParam(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;francesco&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-comment&quot;&gt;// Add query param&lt;/span&gt;
        requestHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x-my&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// Add request header&lt;/span&gt;
      )
      .expect(
        &lt;span class=&quot;hljs-comment&quot;&gt;// Assert that response is a JSON with a specific body&lt;/span&gt;
        jsonBodyResponse(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject().put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello Francesco!&quot;&lt;/span&gt;)),
        &lt;span class=&quot;hljs-comment&quot;&gt;// Assert that response contains a particular header&lt;/span&gt;
        responseHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x-my&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;)
      )
      .send(testContext); &lt;span class=&quot;hljs-comment&quot;&gt;// Complete (or fail) the VertxTestContext&lt;/span&gt;
  }

}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;testRequest()&lt;/code&gt; will use Vert.x Web Client to send the request. When the response is received, It succeds the test or it correctly propagates assertion failures, if any.&lt;/p&gt;
&lt;p&gt;You can also send multiple requests using &lt;a href=&quot;https://vertx.io/docs/apidocs/io/vertx/junit5/Checkpoint.html&quot;&gt;&lt;code&gt;Checkpoint&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; io.vertx.junit5.web.TestRequest.*;

&lt;span class=&quot;hljs-annotation&quot;&gt;@ExtendWith&lt;/span&gt;({
  VertxExtension.class, &lt;span class=&quot;hljs-comment&quot;&gt;// VertxExtension MUST be configured before VertxWebClientExtension&lt;/span&gt;
  VertxWebClientExtension.class
})
&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MultiTestRequestExample&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-annotation&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(WebClient client, VertxTestContext testContext)&lt;/span&gt; &lt;/span&gt;{
    Checkpoint checkpoint = testContext.checkpoint(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Create the Checkpoint to flag when request succeds&lt;/span&gt;

    testRequest(
        client    &lt;span class=&quot;hljs-comment&quot;&gt;// Create the test request using WebClient APIs&lt;/span&gt;
          .get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/hello&quot;&lt;/span&gt;)
          .addQueryParam(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;francesco&quot;&lt;/span&gt;)
          .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x-my&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;)
      )
      .expect(
        jsonBodyResponse(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject().put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello Francesco!&quot;&lt;/span&gt;)),
        responseHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x-my&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;)
      )
      .send(testContext, checkpoint); &lt;span class=&quot;hljs-comment&quot;&gt;// Pass the checkpoint to flag&lt;/span&gt;

    testRequest(
        client
          .get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/hello&quot;&lt;/span&gt;)
          .addQueryParam(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;julien&quot;&lt;/span&gt;)
          .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x-my&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;)
      )
      .expect(
        jsonBodyResponse(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject().put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello Julien!&quot;&lt;/span&gt;)),
        responseHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x-my&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;)
      )
      .send(testContext, checkpoint);
  }

}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Look at &lt;a href=&quot;https://vertx.io/docs/vertx-junit5-web-client/java/&quot;&gt;Vert.x JUnit 5 Web Client documentation&lt;/a&gt; for more details&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Tue, 22 Oct 2019 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/send-web-requests-and-assert-results-with-vertx-junit5-web-client</link>
          <guid isPermaLink="true">https://vertx.io/blog/send-web-requests-and-assert-results-with-vertx-junit5-web-client</guid>
          <author>
            <name>slinkydeveloper</name>
            <uri>http://github.com/slinkydeveloper</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 3.8.3</title>
          <description>
      &lt;article&gt;&lt;p&gt;We have just released Vert.x 3.8.3, a bug fix release of Vert.x 3.8.x.&lt;/p&gt;
&lt;p&gt;Since the release of Vert.x 3.8.3, quite a few bugs have been reported. We would like to thank you all for reporting these issues.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Vert.x 3.8.3 deprecations and breaking changes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.8.3-Deprecations-and-breaking-changes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.8.3-Deprecations-and-breaking-changes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vert.x 3.8.3 release notes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.8.3-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.8.3-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.8.3%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.8.3/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can bootstrap a Vert.x 3.8.3 project using &lt;a href=&quot;https://start.vertx.io&quot;&gt;https://start.vertx.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Fri, 18 Oct 2019 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-3-8-3</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-8-3</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 3.8.2</title>
          <description>
      &lt;article&gt;&lt;p&gt;We have just released Vert.x 3.8.2, a bug fix release of Vert.x 3.8.x.&lt;/p&gt;
&lt;p&gt;Since the release of Vert.x 3.8.2, quite a few bugs have been reported. We would like to thank you all for reporting these issues.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Vert.x 3.8.2 deprecations and breaking changes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.8.2-Deprecations-and-breaking-changes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.8.2-Deprecations-and-breaking-changes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vert.x 3.8.2 release notes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.8.2-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.8.2-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.8.2%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.8.2/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can bootstrap a Vert.x 3.8.2 project using &lt;a href=&quot;https://start.vertx.io&quot;&gt;https://start.vertx.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 07 Oct 2019 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-3-8-2</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-8-2</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 4 milestone 3 released!</title>
          <description>
      &lt;article&gt;&lt;p&gt;We are extremely pleased to announce the third 4.0 milestone release of Eclipse Vert.x .&lt;/p&gt;
&lt;p&gt;Vert.x 4 is the evolution of the Vert.x 3.x series that will bring key features to Vert.x.&lt;/p&gt;
&lt;p&gt;This release aims to provide a reliable distribution of the current development of Vert.x 4 for people that
want to try it and provide feedback.&lt;/p&gt;
&lt;h4 id=&quot;futurisation&quot;&gt;Futurisation&lt;/h4&gt;
&lt;p&gt;Vert.x 4 extends the 3.x callback asynchronous model to a future/callback hybrid model.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;NetClient&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-comment&quot;&gt;// Since 3.0&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; port, String host, Handler&lt;AsyncResult&lt;NetSocket&gt;&gt; handler)&lt;/span&gt;&lt;/span&gt;;

  &lt;span class=&quot;hljs-comment&quot;&gt;// New in 4.0&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;Future&lt;NetSocket&gt; &lt;span class=&quot;hljs-title&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; port, String host)&lt;/span&gt;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This third milestone makes progress and coverts the following stack modules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vertx-service-discovery&lt;/li&gt;
&lt;li&gt;vertx-config&lt;/li&gt;
&lt;li&gt;vertx-circuit-breaker&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;data-object-mapping-for-service-proxies&quot;&gt;Data object mapping for service proxies&lt;/h4&gt;
&lt;p&gt;Vert.x 3 service proxies is a lightweight layer on top of Vert.x Event-Bus providing typed contracts.&lt;/p&gt;
&lt;p&gt;One can easily create a service on top of the Event-Bus.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@VertxGen&lt;/span&gt;
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;DateService&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-comment&quot;&gt;// callback the handler with the current date&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Handler&lt;AsyncResult&lt;String&gt;&gt; handler)&lt;/span&gt;
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Service proxies request/response payload are of type JSON.&lt;/p&gt;
&lt;p&gt;Of course service proxies allow to map beans to JSON using data objects but this comes with two caveats&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;only JSON object can be mapped&lt;/li&gt;
&lt;li&gt;the data object must be a &lt;code&gt;@DataObject&lt;/code&gt; annotated bean with a &lt;code&gt;toJson()&lt;/code&gt; method and a JSON object constructor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Vert.x 4 we extend the data object support to any Java class and any JSON type, e.g in this example&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@VertxGen&lt;/span&gt;
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;DateService&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-comment&quot;&gt;// encode the date with iso date format&lt;/span&gt;
  &lt;span class=&quot;hljs-annotation&quot;&gt;@Mapper&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ZonedDateTime value)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ZonedDateTime.format(value);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;// decode the date with iso date format&lt;/span&gt;
  &lt;span class=&quot;hljs-annotation&quot;&gt;@Mapper&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; ZonedDateTime &lt;span class=&quot;hljs-title&quot;&gt;fromJson&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String value)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ZonedDateTime.parse(value);
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;// callback the handler with the current date&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Handler&lt;AsyncResult&lt;ZonedDateTime&gt;&gt; handler)&lt;/span&gt;
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The generated code will then use these mappers to encode and decode JSON values.&lt;/p&gt;
&lt;p&gt;For reusability mappers can also be &lt;code&gt;java.util.function.Function&lt;/code&gt; instead, e.g&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@Mapper&lt;/span&gt; Function&lt;String, ZonedDateTime) fromJson = ZonedDateTime::parse;
&lt;span class=&quot;hljs-annotation&quot;&gt;@Mapper&lt;/span&gt; Function&lt;ZonedDateTime, String&gt; toJson = ZonedDateTime::toString;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;mongo-client-gridfs&quot;&gt;Mongo client GridFS&lt;/h4&gt;
&lt;p&gt;The client can store and retrieve files and binary data using MongoDB GridFS.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;Future&lt;String&gt; fut = gridFsClient.uploadFile(&lt;span class=&quot;hljs-string&quot;&gt;&quot;file.name&quot;&lt;/span&gt;);

fut.setHandler(res -&gt; {
   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (res.succeeded()) {
     String id = res.result();
     &lt;span class=&quot;hljs-comment&quot;&gt;//The ID of the stored object in Grid FS&lt;/span&gt;
   } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
     res.cause().printStackTrace();
   }
 });&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client can perform the usual CRUD operations on files and also provide bucket management.&lt;/p&gt;
&lt;h4 id=&quot;vert-x-web-utilities&quot;&gt;Vert.x Web utilities&lt;/h4&gt;
&lt;p&gt;While the routing context will allow you to access the underlying request and response objects, sometimes it will be
more productive if a few shortcuts would be present to help with common tasks. A few helpers are present in
the context to facilitate with this task.&lt;/p&gt;
&lt;p&gt;Serve an “attachment”, an attachment is a response that will trigger the browser to open the response on the OS application
configured to handle a specific mime type. Imagine you’re generating a PDF:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;routingContext
  .attachment(&lt;span class=&quot;hljs-string&quot;&gt;&quot;weekly-report.pdf&quot;&lt;/span&gt;)
  .end(pdfBuffer);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perform a redirect to a different page or host. One example is to redirect to an HTTPS variant of the application:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;routingContext.redirect(&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://securesite.com/&quot;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Send a JSON response to the client:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// no need to specify the content type headers&lt;/span&gt;
rc.json(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject().put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;vert.x&quot;&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple content type check:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (routingContext.is(&lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;)) {
  &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Verify if a request is “fresh” with respect to the cache headers and the current values of last modified/ etag:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (rc.isFresh()) {
  &lt;span class=&quot;hljs-comment&quot;&gt;// client cache value is fresh perhaps we&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;// can stop and return 304?&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;other-changes&quot;&gt;Other changes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Groovy has been simplified in Vert.x 4 to remove code generation that was not really needed in practice&lt;/li&gt;
&lt;li&gt;The original Redis client deprecated in 3.7 has been removed replaced by the new Redis client&lt;/li&gt;
&lt;li&gt;JSON changes&lt;ul&gt;
&lt;li&gt;Jackson databind is now an optional Maven dependency which means that applications need to explicitly add this dependency to the classpath&lt;/li&gt;
&lt;li&gt;Specific Jackson utility methods are moved to specific Jackson classes&lt;/li&gt;
&lt;li&gt;Vert.x can use an alternative implementation than Jackson for JSON encoding and JSON decoding&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The following components have reached their end of life and have been pruned&lt;ul&gt;
&lt;li&gt;MySQL / PostgreSQL async client replaced by the Vert.x SQL Client (since 3.8)&lt;/li&gt;
&lt;li&gt;AMQP bridge replaced by the Vert.x AMQP Client (since 3.7)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;ramping-up-to-vert-x-4&quot;&gt;Ramping up to Vert.x 4&lt;/h4&gt;
&lt;p&gt;Instead of developing all new features exclusively in Vert.x 4, we introduce some of these features in the 3.x branch
so the community can benefit from them. The Vert.x 4 development focus on more fundamental changes that cannot be done
in the 3.x series.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://vertx.io/assets/blog/vertx-4-milestone3-release/vertx-4-timeline.png&quot; alt=&quot;Screenshot&quot; class=&quot;img-responsive&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is the third milestone of Vert.x 4, we aim to release Vert.x 4 by the end of this year and you can of course
expect more milestones to outline the progress of the effort.&lt;/p&gt;
&lt;h4 id=&quot;finally&quot;&gt;Finally&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/4.0.0-Deprecations-and-breaking-changes&quot;&gt;deprecations and breaking changes&lt;/a&gt;
 can be found on the wiki.&lt;/p&gt;
&lt;p&gt;For this release there are no Docker images.,&lt;/p&gt;
&lt;p&gt;The release artifacts have been deployed to &lt;a href=&quot;https://search.maven.org/search?q=g:io.vertx%20AND%20v:4.0.0-milestone3&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://repo1.maven.org/maven2/io/vertx/vertx-stack-manager/4.0.0-milestone3/&quot;&gt;Maven Central&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can bootstrap a Vert.x 4.0.0-milestone3 project using &lt;a href=&quot;https://start.vertx.io&quot;&gt;https://start.vertx.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The documentation has been deployed on this preview web-site &lt;a href=&quot;https://vertx-ci.github.io/vertx-4-preview/docs/&quot;&gt;https://vertx-ci.github.io/vertx-4-preview/docs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That’s it! Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Thu, 19 Sep 2019 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-4-milestone-3-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-4-milestone-3-released</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x for Scala next steps</title>
          <description>
      &lt;article&gt;&lt;h1 id=&quot;scala-for-eclipse-vert-x-the-next-steps&quot;&gt;Scala for Eclipse Vert.x: The next steps&lt;/h1&gt;
&lt;h2 id=&quot;tl-dr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;No Scala 2.13 in Eclipse Vert.x 3.x due to increased support burden&lt;/li&gt;
&lt;li&gt;New value classes based approach for Vert.x 4&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;retrospective&quot;&gt;Retrospective&lt;/h2&gt;
&lt;p&gt;It’s been more than two years since the inception of &lt;code&gt;vert-lang-scala&lt;/code&gt; to the Vert.x ecosystem. And almost as long since I wrote my first &lt;a href=&quot;https://vertx.io/blog/scala-is-here/&quot;&gt;blog post&lt;/a&gt; about it.&lt;/p&gt;
&lt;p&gt;A lot has happened since March 2017:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vertx-lang-scala&lt;/code&gt; kept up with new versions of Scala&lt;/li&gt;
&lt;li&gt;all Vert.x-modules are supported (35 so far)&lt;/li&gt;
&lt;li&gt;a Giter8 based &lt;a href=&quot;https://github.com/vert-x3/vertx-scala.g8&quot;&gt;template&lt;/a&gt; was added for easily bootstrapping a Vert.x-Scala-project&lt;/li&gt;
&lt;li&gt;Bugs were squashed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And most recently we received a great contribution by &lt;a href=&quot;https://github.com/NikolajLeischner&quot;&gt;Nikolaj Leischner&lt;/a&gt; who was kind enough to port the &lt;a href=&quot;https://github.com/TechEmpower/FrameworkBenchmarks/tree/master/frameworks/Scala/vertx-web-scala&quot;&gt;techempowered&lt;/a&gt; benchmark to vert-lang-scala. Which will be part of the next steps.&lt;/p&gt;
&lt;p&gt;The numbers produced by this benchmark were very promising and and additional motivation to move to the next phase of Scala support for Vert.x.&lt;/p&gt;
&lt;h2 id=&quot;old-idea&quot;&gt;Old idea&lt;/h2&gt;
&lt;p&gt;Before getting to the new ideas I want to take a look at the “old” one.&lt;/p&gt;
&lt;p&gt;The current version of vert-lang-scala is based around the idea of wrapping the Vert.x-API with a dedicated Scala-layer. That layer is created using a Freemarker-based code generator. I took this idea from the first try by Tim Fox for building that support.&lt;/p&gt;
&lt;p&gt;Wrapping the existing Java-API was rather painful but gave me great flexibility to create an idiomatic Scala-API.&lt;/p&gt;
&lt;p&gt;But an approach like that comes with a price:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are a lot of intermediate objects being created.&lt;/li&gt;
&lt;li&gt;Many unneccessary conversions between Java/Scala types&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both increased memory consumption and garbage collection activity quite a bit and has been bugging me from the beginning.&lt;/p&gt;
&lt;h2 id=&quot;new-idea&quot;&gt;New idea&lt;/h2&gt;
&lt;p&gt;With Vert.x 4 approaching I was finally able to invest time into the rework I had wanted to do for quite a while.&lt;/p&gt;
&lt;p&gt;The core idea is to replace the current wrapping based approach with something more lightweight but native to the Scala-world.&lt;/p&gt;
&lt;p&gt;And that’s where &lt;a href=&quot;https://docs.scala-lang.org/overviews/core/value-classes.html&quot;&gt;value classes&lt;/a&gt; come in.&lt;/p&gt;
&lt;p&gt;Value classes allow the extension of existing classes with additional methods. They make it easy to control &lt;strong&gt;when&lt;/strong&gt; methods become visible and do that with a minimum of overhead. To be precise: A wrapping class is normally ever only instantiated &lt;strong&gt;once&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A good example is the addition of methods for wrapping the Vert.x approach of Promises with Scala-Futures. Each method returning a Vert.x-Promise needs to receive an alternative version which returns a Scala-Future.&lt;/p&gt;
&lt;p&gt;In Vert.x 3 I achieved that by adding methods to the wrapper and giving them a distinct name. A method called &lt;strong&gt;listen&lt;/strong&gt; returning a Promise would receive a companion called &lt;strong&gt;listenFuture&lt;/strong&gt; in the Scala layer.&lt;/p&gt;
&lt;p&gt;Let’s look at how this looks in the new approach:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs scala&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; io.vertx.scala
&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;core&lt;/span&gt;{&lt;/span&gt;
   &lt;span class=&quot;hljs-keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HttpServerScala&lt;/span&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;asJava&lt;/span&gt;:&lt;/span&gt; io.vertx.core.http.&lt;span class=&quot;hljs-type&quot;&gt;HttpServer&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;AnyVal&lt;/span&gt; {
      &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;listenFuture&lt;/span&gt;(&lt;/span&gt;port: java.lang.&lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt;): scala.concurrent.&lt;span class=&quot;hljs-type&quot;&gt;Future&lt;/span&gt;[io.vertx.core.http.&lt;span class=&quot;hljs-type&quot;&gt;HttpServer&lt;/span&gt;] = {..}
      ..
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above does the following things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It creates a package object for &lt;strong&gt;io.vertx.scala.core&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;it adds an implict class &lt;strong&gt;HttpServerScala&lt;/strong&gt; to wrpa &lt;strong&gt;HttpServer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;it adds a &lt;strong&gt;listenFuture&lt;/strong&gt; method&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using this method in code looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs scala&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; io.vertx.scala.demo

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.lang.scala.&lt;span class=&quot;hljs-type&quot;&gt;VertxExecutionContext&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.scala.core._

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; scala.util.{&lt;span class=&quot;hljs-type&quot;&gt;Failure&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;Success&lt;/span&gt;}

&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Main&lt;/span&gt; {&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;(&lt;/span&gt;args: &lt;span class=&quot;hljs-type&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;]): &lt;span class=&quot;hljs-type&quot;&gt;Unit&lt;/span&gt; = {
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;vertx&lt;/span&gt; =&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Vertx&lt;/span&gt;.vertx()
    &lt;span class=&quot;hljs-keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ec&lt;/span&gt; =&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;VertxExecutionContext&lt;/span&gt;(vertx.getOrCreateContext())
    vertx
      .createHttpServer()
      .requestHandler(r =&gt; {
        r.response().end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bye&quot;&lt;/span&gt;)
      })
      .listenFuture(&lt;span class=&quot;hljs-number&quot;&gt;6667&lt;/span&gt;)
      .onComplete {
        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Success&lt;/span&gt;(_) =&gt; println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Started&quot;&lt;/span&gt;)
        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Failure&lt;/span&gt;(exception) =&gt; println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Failure&quot;&lt;/span&gt;)
      }
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Importing the package object using &lt;strong&gt;import io.vertx.scala.core._&lt;/strong&gt; brings the extension method into scope and makes them available on all instances of &lt;strong&gt;HttpServer&lt;/strong&gt;. In the example above &lt;strong&gt;createHttpServer()&lt;/strong&gt; return such an instance and we can now use the idiomatic Scala way of handling a Future.&lt;/p&gt;
&lt;h3 id=&quot;even-more&quot;&gt;Even more&lt;/h3&gt;
&lt;p&gt;Extending classes with Future-methods is only one of the new things to come. On top of that the support for DataObjects will be considerably improved, both through extending them and by providing type aliases.&lt;/p&gt;
&lt;p&gt;I also switched from doing all conversions for collections automatically to handing the control back to the user. Something which gets even more important for Scala 2.13 and the new collection API.&lt;/p&gt;
&lt;h3 id=&quot;the-downside&quot;&gt;The downside&lt;/h3&gt;
&lt;p&gt;The clear downside of this approach is that the Java-methods will stay visible since the java-classes won’t be wrapped but extended. This might lead to some confusion but I am pretty sure the benefits outweight this downside.&lt;/p&gt;
&lt;p&gt;The bigger change will be the removal of automatic vonversion between Scala types (Long/Int/String and  Collections) and their Java counterparts. I spent considerable time trying to tune that part in the current version bbut always ended up hitting some edgecase. For now I’ve decided to have the user pick the right time to convert.&lt;/p&gt;
&lt;p&gt;I might still add this feature in a later version if user feedback points into that direction.&lt;/p&gt;
&lt;h2 id=&quot;when-will-i-get-it-&quot;&gt;When will I get it?&lt;/h2&gt;
&lt;p&gt;First for the good news: There is already a &lt;a href=&quot;https://github.com/vert-x3/vertx-lang-scala/tree/4.0&quot;&gt;branch&lt;/a&gt; with a full implementation.&lt;/p&gt;
&lt;p&gt;The bad news: It will break until Vert.x 4.0 is finally released.&lt;/p&gt;
&lt;p&gt;Vert.x 4 is in active development with most APIs already finalized but breaking changes still happen. So use at your own risk!&lt;/p&gt;
&lt;h2 id=&quot;what-about-scala-2-13-&quot;&gt;What about Scala 2.13?&lt;/h2&gt;
&lt;p&gt;Scala 2.13 has been released recently which prompted questions from the community about when it will be supported by Vert.x.&lt;/p&gt;
&lt;p&gt;I haven’t done a good job providing the results of our internal discussions on that topic to the community. So here we go:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vert.x 3 will stay on 2.12 for the following reasons:&lt;ul&gt;
&lt;li&gt;Both are still actively supported&lt;/li&gt;
&lt;li&gt;Scala ecosystems takes some time to do the switch to 2.13&lt;/li&gt;
&lt;li&gt;We simply don’t have the capacity to support both versions &lt;strong&gt;AND&lt;/strong&gt; the upcoming new version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vert.x 4 will receive 2.13 support&lt;ul&gt;
&lt;li&gt;Scala ecosystem will have moved closer to 2.13 adoption when Vert.x 4 comes out&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;for-the-adventure-seaker&quot;&gt;For the adventure seaker&lt;/h2&gt;
&lt;p&gt;I actually did a port of vertx-lang-scala 3.8 to Scala 2.13 and you can grab the work in this &lt;a href=&quot;https://github.com/vert-x3/vertx-lang-scala/tree/3.8_2.13&quot;&gt;branch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Don’t expect &lt;strong&gt;ANY&lt;/strong&gt; support for this branch. This was only an experiment to see how much I had to change for initial 2.13 support.&lt;/p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Vert.x 4 will be an evolutionary step for vertx-lang-scala. Value classes promise to reduce both complexity and allocation rate, two things which have been bugging me quite a bit with the current approach.&lt;/p&gt;
&lt;p&gt;I am eager to hear from you all what you think about this new direction.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Fri, 30 Aug 2019 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-for-scala-next-steps</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-for-scala-next-steps</guid>
          <author>
            <name>codepitbull</name>
            <uri>http://github.com/codepitbull</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 4 milestone 2 released!</title>
          <description>
      &lt;article&gt;&lt;p&gt;We are extremely pleased to announce the second 4.0 milestone release of Eclipse Vert.x .&lt;/p&gt;
&lt;p&gt;Vert.x 4 is the evolution of the Vert.x 3.x series that will bring key features to Vert.x.&lt;/p&gt;
&lt;p&gt;This release aims to provide a reliable distribution of the current development of Vert.x 4 for people that
want to try it and provide feedback.&lt;/p&gt;
&lt;h4 id=&quot;futurisation&quot;&gt;Futurisation&lt;/h4&gt;
&lt;p&gt;Vert.x 4 extends the 3.x callback asynchronous model to a future/callback hybrid model.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;NetClient&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-comment&quot;&gt;// Since 3.0&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; port, String host, Handler&lt;AsyncResult&lt;NetSocket&gt;&gt; handler)&lt;/span&gt;&lt;/span&gt;;

  &lt;span class=&quot;hljs-comment&quot;&gt;// New in 4.0&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;Future&lt;NetSocket&gt; &lt;span class=&quot;hljs-title&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; port, String host)&lt;/span&gt;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first milestone, only covered &lt;em&gt;Vert.x Core&lt;/em&gt;, this second milestone has made significant progress with the futurisation
of the following stack modules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vertx-auth&lt;/li&gt;
&lt;li&gt;vertx-web&lt;/li&gt;
&lt;li&gt;vertx-mqtt&lt;/li&gt;
&lt;li&gt;vertx-cassandra-client&lt;/li&gt;
&lt;li&gt;vertx-redis-client&lt;/li&gt;
&lt;li&gt;vertx-kakfa-client&lt;/li&gt;
&lt;li&gt;vertx-amqp-client&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;tracing&quot;&gt;Tracing&lt;/h4&gt;
&lt;p&gt;Instrumenting asynchronous application for distributed tracing is quite challenging because most tracing libraries
rely on &lt;a href=&quot;https://fr.wikipedia.org/wiki/Thread_Local_Storage&quot;&gt;thread local storage&lt;/a&gt;. While it works reasonnably well
in a blocking application, this does not work for an asynchronous application.&lt;/p&gt;
&lt;p&gt;This supposes that the application control flow matters (i.e threads) although what really matters is the application
request flow (e.g the incoming HTTP request).&lt;/p&gt;
&lt;p&gt;We improved Vert.x 4 to reify the request flow, making it possible to integrate popular tracing tools such as &lt;a href=&quot;https://zipkin.io&quot;&gt;Zipkin&lt;/a&gt;
or &lt;a href=&quot;https://opentracing.io&quot;&gt;Opentracing&lt;/a&gt;. Vert.x performance is legendary and we made sure that this does not have
any overhead out of the box (disabled).&lt;/p&gt;
&lt;p&gt;We provide support for these two popular libraries under the &lt;em&gt;Vert.x Tracing&lt;/em&gt; umbrella.&lt;/p&gt;
&lt;h4 id=&quot;other-changes&quot;&gt;Other changes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Groovy has been simplified in Vert.x 4 to remove code generation that was not really needed in practice&lt;/li&gt;
&lt;li&gt;The original Redis client deprecated in 3.7 has been removed replaced by the new Redis client&lt;/li&gt;
&lt;li&gt;The following components have reached their end of life and have been pruned&lt;ul&gt;
&lt;li&gt;MySQL / PostgreSQL async client replaced by the Vert.x SQL Client (since 3.8)&lt;/li&gt;
&lt;li&gt;AMQP bridge replaced by the Vert.x AMQP Client (since 3.7)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;ramping-up-to-vert-x-4&quot;&gt;Ramping up to Vert.x 4&lt;/h4&gt;
&lt;p&gt;Instead of developing all new features exclusively in Vert.x 4, we introduce some of these features in the 3.x branch
so the community can benefit from them. The Vert.x 4 development focus on more fundamental changes that cannot be done
in the 3.x series.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://vertx.io/assets/blog/vertx-4-milestone2-release/vertx-4-timeline.png&quot; alt=&quot;Screenshot&quot; class=&quot;img-responsive&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is the first milestone of Vert.x 4, we aim to release Vert.x 4 by the end of this year and you can of course
expect more milestones to outline the progress of the effort.&lt;/p&gt;
&lt;h4 id=&quot;finally&quot;&gt;Finally&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/4.0.0-Deprecations-and-breaking-changes&quot;&gt;deprecations and breaking changes&lt;/a&gt;
 can be found on the wiki.&lt;/p&gt;
&lt;p&gt;For this release there are no Docker images.,&lt;/p&gt;
&lt;p&gt;The release artifacts have been deployed to &lt;a href=&quot;https://search.maven.org/search?q=g:io.vertx%20AND%20v:4.0.0-milestone2&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://repo1.maven.org/maven2/io/vertx/vertx-stack-manager/4.0.0-milestone2/&quot;&gt;Maven Central&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can bootstrap a Vert.x 4.0.0-milestone2 project using &lt;a href=&quot;https://start.vertx.io&quot;&gt;https://start.vertx.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The documentation has been deployed on this preview web-site &lt;a href=&quot;https://vertx-ci.github.io/vertx-4-preview/docs/&quot;&gt;https://vertx-ci.github.io/vertx-4-preview/docs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That’s it! Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 26 Aug 2019 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-4-milestone-2-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-4-milestone-2-released</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 3.8.1</title>
          <description>
      &lt;article&gt;&lt;p&gt;We have just released Vert.x 3.8.1, a bug fix release of Vert.x 3.8.x.&lt;/p&gt;
&lt;p&gt;This version updates to Netty 4.1.39.Final fixing the following HTTP/2 related CVE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CVE-2019-9512: Ping Flood&lt;/li&gt;
&lt;li&gt;CVE-2019-9514: Reset Flood&lt;/li&gt;
&lt;li&gt;CVE-2019-9515: Settings Flood&lt;/li&gt;
&lt;li&gt;CVE-2019-9518: Empty DATA frame flooding&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since the release of Vert.x 3.8.0, quite a few bugs have been reported. We would like to thank you all for reporting these issues.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Vert.x 3.8.1 deprecations and breaking changes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.8.1-Deprecations-and-breaking-changes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.8.1-Deprecations-and-breaking-changes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vert.x 3.8.1 release notes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.8.1-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.8.1-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.8.1%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.8.1/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can bootstrap a Vert.x 3.8.1 project using &lt;a href=&quot;https://start.vertx.io&quot;&gt;https://start.vertx.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Fri, 23 Aug 2019 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-3-8-1</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-8-1</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 4 milestone 1 released!</title>
          <description>
      &lt;article&gt;&lt;p&gt;We are extremely pleased to announce the first 4.0 milestone release of Eclipse Vert.x .&lt;/p&gt;
&lt;p&gt;Vert.x 4 is the evolution of the Vert.x 3.x series that will bring key features to Vert.x.&lt;/p&gt;
&lt;p&gt;This release aims to provide a reliable distribution of the current development of Vert.x 4 for people that
want to try it and provide feedback.&lt;/p&gt;
&lt;h4 id=&quot;core-futurisation&quot;&gt;Core futurisation&lt;/h4&gt;
&lt;p&gt;Vert.x 4 extends the 3.x callback asynchronous model to a future/callback hybrid model.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;NetClient&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-comment&quot;&gt;// Since 3.0&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; port, String host, Handler&lt;AsyncResult&lt;NetSocket&gt;&gt; handler)&lt;/span&gt;&lt;/span&gt;;

  &lt;span class=&quot;hljs-comment&quot;&gt;// New in 4.0&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;Future&lt;NetSocket&gt; &lt;span class=&quot;hljs-title&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; port, String host)&lt;/span&gt;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this first milestone, only the &lt;em&gt;Vert.x Core&lt;/em&gt; library contains the hybrid model. More Vert.x components
will be futurized soon and you will be able to try them in the next milestones.&lt;/p&gt;
&lt;h4 id=&quot;tracing&quot;&gt;Tracing&lt;/h4&gt;
&lt;p&gt;Instrumenting asynchronous application for distributed tracing is quite challenging because most tracing libraries
rely on &lt;a href=&quot;https://fr.wikipedia.org/wiki/Thread_Local_Storage&quot;&gt;thread local storage&lt;/a&gt;. While it works reasonnably well
in a blocking application, this does not work for an asynchronous application.&lt;/p&gt;
&lt;p&gt;This supposes that the application control flow matters (i.e threads) although what really matters is the application
request flow (e.g the incoming HTTP request).&lt;/p&gt;
&lt;p&gt;We improved Vert.x 4 to reify the request flow, making it possible to integrate popular tracing tools such as &lt;a href=&quot;https://zipkin.io&quot;&gt;Zipkin&lt;/a&gt;
or &lt;a href=&quot;https://opentracing.io&quot;&gt;Opentracing&lt;/a&gt;. Vert.x performance is legendary and we made sure that this does not have
any overhead out of the box (disabled).&lt;/p&gt;
&lt;p&gt;We provide support for these two popular libraries under the &lt;em&gt;Vert.x Tracing&lt;/em&gt; umbrella.&lt;/p&gt;
&lt;h4 id=&quot;other-changes&quot;&gt;Other changes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Groovy has been simplified in Vert.x 4 to remove code generation that was not really needed in practice&lt;/li&gt;
&lt;li&gt;The original Redis client deprecated in 3.7 has been removed replaced by the new Redis client&lt;/li&gt;
&lt;li&gt;The following components have reached their end of life and have been pruned&lt;ul&gt;
&lt;li&gt;MySQL / PostgreSQL async client replaced by the Vert.x SQL Client (since 3.8)&lt;/li&gt;
&lt;li&gt;AMQP bridge replaced by the Vert.x AMQP Client (since 3.7)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;ramping-up-to-vert-x-4&quot;&gt;Ramping up to Vert.x 4&lt;/h4&gt;
&lt;p&gt;Instead of developing all new features exclusively in Vert.x 4, we introduce some of these features in the 3.x branch
so the community can benefit from them. The Vert.x 4 development focus on more fundamental changes that cannot be done
in the 3.x series.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://vertx.io/assets/blog/vertx-4-milestone1-release/vertx-4-timeline.png&quot; alt=&quot;Screenshot&quot; class=&quot;img-responsive&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is the first milestone of Vert.x 4, we aim to release Vert.x 4 by the end of this year and you can of course
expect more milestones to outline the progress of the effort.&lt;/p&gt;
&lt;h4 id=&quot;finally&quot;&gt;Finally&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/4.0.0-Deprecations-and-breaking-changes&quot;&gt;deprecations and breaking changes&lt;/a&gt;
 can be found on the wiki.&lt;/p&gt;
&lt;p&gt;For this release there are no Docker images.,&lt;/p&gt;
&lt;p&gt;The release artifacts have been deployed to &lt;a href=&quot;https://search.maven.org/search?q=g:io.vertx%20AND%20v:4.0.0-milestone1&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://repo1.maven.org/maven2/io/vertx/vertx-stack-manager/4.0.0-milestone1/&quot;&gt;Maven Central&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Most importantly the documentation has been deployed on this preview web-site &lt;a href=&quot;https://vertx-ci.github.io/vertx-4-preview/docs/&quot;&gt;https://vertx-ci.github.io/vertx-4-preview/docs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That’s it! Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Fri, 26 Jul 2019 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-4-milestone-1-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-4-milestone-1-released</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 3.8.0 released!</title>
          <description>
      &lt;article&gt;&lt;p&gt;We are extremely pleased to announce that the Eclipse Vert.x version 3.8.0 has been released.&lt;/p&gt;
&lt;p&gt;This is an important release that introduces a few changes ramping up to Vert.x 4 expected by the end of this year.&lt;/p&gt;
&lt;h4 id=&quot;-a-id-the-reactive-sql-client-a-&quot;&gt;&lt;a id=&quot;&quot;&gt;The Reactive SQL Client&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The client is the evolution of the legendary &lt;em&gt;Reactive PostgreSQL Client&lt;/em&gt; and provides&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Reactive PostgreSQL Client aka Vert.x PostgreSQL Client&lt;/li&gt;
&lt;li&gt;The Reactive MySQL Client aka Vert.x MySQL Client&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These implementations provide real high performance non-blocking access to PostgreSQL and MySQL.&lt;/p&gt;
&lt;p&gt;To use these new modules, add the following to the &lt;em&gt;dependencies&lt;/em&gt; section of your Maven POM file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.vertx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;vertx-pg-client&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;3.8.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.vertx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;vertx-mysql-client&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;3.8.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, if you use Gradle:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;io.vertx:vertx-pg-client:3.8.0&#39;&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;io.vertx:vertx-mysql-client:3.8.0&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you are good to go!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Connect options&lt;/span&gt;
PgConnectOptions connectOptions = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; PgConnectOptions()
  .setPort(&lt;span class=&quot;hljs-number&quot;&gt;5432&lt;/span&gt;)
  .setHost(&lt;span class=&quot;hljs-string&quot;&gt;&quot;the-host&quot;&lt;/span&gt;)
  .setDatabase(&lt;span class=&quot;hljs-string&quot;&gt;&quot;the-db&quot;&lt;/span&gt;)
  .setUser(&lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt;)
  .setPassword(&lt;span class=&quot;hljs-string&quot;&gt;&quot;secret&quot;&lt;/span&gt;);

PgPool client = PgPool.pool(connectOptions, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; PoolOptions().setMaxSize(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;));

client.query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM users WHERE id=&#39;julien&#39;&quot;&lt;/span&gt;, ar -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    RowSet result = ar.result();
    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Got &quot;&lt;/span&gt; + result.size() + &lt;span class=&quot;hljs-string&quot;&gt;&quot; rows &quot;&lt;/span&gt;);
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Failure: &quot;&lt;/span&gt; + ar.cause().getMessage());
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Likewise you can achieve the same for MySQL:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;MySQLConnectOptions connectOptions = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MySQLConnectOptions()
  .setPort(&lt;span class=&quot;hljs-number&quot;&gt;3306&lt;/span&gt;)
  .setHost(&lt;span class=&quot;hljs-string&quot;&gt;&quot;the-host&quot;&lt;/span&gt;)
  .setDatabase(&lt;span class=&quot;hljs-string&quot;&gt;&quot;the-db&quot;&lt;/span&gt;)
  .setUser(&lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt;)
  .setPassword(&lt;span class=&quot;hljs-string&quot;&gt;&quot;secret&quot;&lt;/span&gt;);

MySQLPool client = MySQLPool.pool(connectOptions, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; PoolOptions().setMaxSize(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;));

client.query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM users WHERE id=&#39;julien&#39;&quot;&lt;/span&gt;, ar -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    RowSet result = ar.result();
    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Got &quot;&lt;/span&gt; + result.size() + &lt;span class=&quot;hljs-string&quot;&gt;&quot; rows &quot;&lt;/span&gt;);
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Failure: &quot;&lt;/span&gt; + ar.cause().getMessage());
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;em&gt;Reactive SQL Client&lt;/em&gt; brings to you the next generation database access, it is certainly the most exciting
thing happening in the reactive database access space.&lt;/p&gt;
&lt;h4 id=&quot;future-api-improvements&quot;&gt;Future API improvements&lt;/h4&gt;
&lt;p&gt;In this release we updated the Vert.x &lt;code&gt;Future&lt;/code&gt; interface to expose completion methods in a new &lt;code&gt;Promise&lt;/code&gt; interface.&lt;/p&gt;
&lt;p&gt;This improves the design of the API of &lt;code&gt;Future&lt;/code&gt; by having &lt;code&gt;Promise&lt;/code&gt; being the write side of an asynchronous result
and the &lt;code&gt;Future&lt;/code&gt; being its read side.&lt;/p&gt;
&lt;p&gt;While there is little use for this in Vert.x 3.x, this has an impact on Vert.x 4.&lt;/p&gt;
&lt;p&gt;Consequently some method signatures have been changed to use &lt;code&gt;Promise&lt;/code&gt; instead of &lt;code&gt;Future&lt;/code&gt; explained in this &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.8.0-Deprecations-and-breaking-changes#future-creation-and-completion&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;upgrading-to-3-8&quot;&gt;Upgrading to 3.8&lt;/h4&gt;
&lt;p&gt;Upgrading to 3.8.0 might require a few changes in your application, you can read this &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.8.0-Deprecations-and-breaking-changes#future-creation-and-completion&quot;&gt;page&lt;/a&gt; to understand the impact of the
3.8 release on your application upgrade.&lt;/p&gt;
&lt;h4 id=&quot;and-more-&quot;&gt;And more…&lt;/h4&gt;
&lt;p&gt;Here are some other important improvements you can find in this release:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cassandra Client gets out of tech preview&lt;/li&gt;
&lt;li&gt;Jackson upgrade to 2.9.9 and databind 2.9.9.1&lt;/li&gt;
&lt;li&gt;And obviously we have the usual bug fixes!&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;finally&quot;&gt;Finally&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.8.0-Release-Notes&quot;&gt;3.8.0 release notes&lt;/a&gt; can be found on the wiki, as well as the
list of &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.8.0-Deprecations-and-breaking-changes&quot;&gt;deprecations and breaking changes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker images are available on &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Vert.x distribution can be downloaded on the website but is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge is available from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;NPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;Bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;WebJars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The release artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.8.0%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.8.0/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That’s it! Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Fri, 19 Jul 2019 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-3-8-0-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-8-0-released</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>VS Code Vert.x Starter Extension</title>
          <description>
      &lt;article&gt;&lt;p&gt;Hi Vert.x community! Today, we are really excited to announce the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=danielpetisme.vscode-vertx-starter&quot;&gt;Visual Studio Code Vert.x Starter&lt;/a&gt; extension.&lt;/p&gt;
&lt;p&gt;The extension is a community contribution made by &lt;a href=&quot;https://twitter.com/danielpetisme&quot;&gt;Daniel Petisme (@danielpetisme)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=R3ZbQ_5Jf4M&quot; title=&quot;VSCode Vert.x Starter extension&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/R3ZbQ_5Jf4M/0.jpg&quot; alt=&quot;VSCode Vert.x Starter extension&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Click on the image to watch the video on YouTube&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; is a popular code editor with a lot of additional extensions.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=danielpetisme.vscode-vertx-starter&quot;&gt;Visual Studio Code Vert.x Starter&lt;/a&gt; extension allows your to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a Vert.x project&lt;/li&gt;
&lt;li&gt;Customize the creation (Vert.x version, language, build tool, &lt;code&gt;groupId&lt;/code&gt;, &lt;code&gt;artifactId&lt;/code&gt;, package name, JDK version)&lt;/li&gt;
&lt;li&gt;Search for dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The extension can be configured to match your context (e.g. defining your default company &lt;code&gt;groupId&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;
&lt;p&gt;Behind the scene, the extension relies on the Vert.x application generator API and demonstrate how easy it is to develop your own IDE plugin or custom tooling to generate Vert.x projects.
For further details about the &lt;a href=&quot;https://start.vertx.io&quot;&gt;start.vertx.io&lt;/a&gt; API, please refer to the &lt;a href=&quot;https://github.com/vert-x3/vertx-starter&quot;&gt;Vert.x Starter project on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;questions-&quot;&gt;Questions?&lt;/h2&gt;
&lt;p&gt;Feel free to ask questions or propose new features on the &lt;a href=&quot;https://github.com/danielpetisme/vscode-vertx-starter&quot;&gt;VSCode Vert.x Starter GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Wed, 29 May 2019 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/vs-code-vert-x-starter-extension</link>
          <guid isPermaLink="true">https://vertx.io/blog/vs-code-vert-x-starter-extension</guid>
          <author>
            <name>danielpetisme</name>
            <uri>http://github.com/danielpetisme</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 3.7.1</title>
          <description>
      &lt;article&gt;&lt;p&gt;We have just released Vert.x 3.7.1, a bug fix release of Vert.x 3.7.x and a few small features.&lt;/p&gt;
&lt;p&gt;Since the release of Vert.x 3.7.0, quite a few bugs have been reported. We would like to thank you all for reporting these issues.&lt;/p&gt;
&lt;p&gt;In addition of bug fixes, this release prepares the ground for Vert.x 4 with a few enhancements and deprecations.&lt;/p&gt;
&lt;h3 id=&quot;http-client-unix-domain-sockets&quot;&gt;HTTP client Unix Domain Sockets&lt;/h3&gt;
&lt;p&gt;Since this release the &lt;code&gt;HttpClient&lt;/code&gt; supports &lt;a href=&quot;https://en.wikipedia.org/wiki/Unix_domain_socket&quot;&gt;Unix Domain Sockets&lt;/a&gt; when using
Netty’s native transports, which can be really useful if you need to connect to a local daemon such as Docker’s Daemon:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-constant&quot;&gt;HttpClient &lt;/span&gt;httpClient = vertx.createHttpClient();

&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;hljs-constant&quot;&gt;Only &lt;/span&gt;available on &lt;span class=&quot;hljs-constant&quot;&gt;BSD &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-constant&quot;&gt;Linux &lt;/span&gt;with native transport
&lt;span class=&quot;hljs-constant&quot;&gt;SocketAddress &lt;/span&gt;addr = &lt;span class=&quot;hljs-constant&quot;&gt;SocketAddress.&lt;/span&gt;domainSocketAddress(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/var/tmp/myservice.sock&quot;&lt;/span&gt;);

&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;hljs-constant&quot;&gt;Send &lt;/span&gt;request to the server
httpClient.request(&lt;span class=&quot;hljs-constant&quot;&gt;HttpMethod.GET,&lt;/span&gt; addr, &lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;, resp -&gt; {
  &lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;hljs-constant&quot;&gt;Process &lt;/span&gt;response
}).&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;http-client-websocket-connect-revisited&quot;&gt;HTTP client WebSocket connect revisited&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;HttpClient&lt;/code&gt; WebSocket methods have been revisited, indeed these methods were lacking of usability in general or
with vertx-rx due to the optional error handling:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;HttpClient client = vertx.createHttpClient();
client.websocket(&lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;example.com&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;, websocket -&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// connected&lt;/span&gt;
});

&lt;span class=&quot;hljs-comment&quot;&gt;// or&lt;/span&gt;

client.websocket(&lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;example.com&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;, websocket -&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// connected&lt;/span&gt;
}, err -&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// handle error&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The new &lt;code&gt;webSocket&lt;/code&gt; method provides now the best developer experience for connecting a WebSocket:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;HttpClient client = vertx.createHttpClient();
client.webSocket(&lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;example.com&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;, ar -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// connected&lt;/span&gt;
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// handler error&lt;/span&gt;
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With RxJava2, you can use now:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;HttpClient client = vertx.createHttpClient();
Single&lt;WebSocket&gt; single = client.rxWebSocket(&lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;example.com&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;);
single.subscribe(
  ws -&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// connected&lt;/span&gt;
  },
  err -&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// handle error&lt;/span&gt;
  });&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;vert-x-rx-usability-improvements&quot;&gt;Vert.x Rx usability improvements&lt;/h3&gt;
&lt;p&gt;As you may know, the &lt;a href=&quot;/docs/vertx-rx/java2/#_rxified_api&quot;&gt;Vert.x &lt;em&gt;Rxified&lt;/em&gt; API&lt;/a&gt; is generated from the bare Vert.x API.&lt;/p&gt;
&lt;p&gt;In this release, &lt;code&gt;vertx-codegen&lt;/code&gt; has been improved to determine if an API object is an &lt;code&gt;Iterable&lt;/code&gt;, &lt;code&gt;Iterator&lt;/code&gt;, or &lt;code&gt;Function&lt;/code&gt;.
Then its &lt;em&gt;Rxified&lt;/em&gt; equivalent will be an &lt;code&gt;Iterable&lt;/code&gt;, &lt;code&gt;Iterator&lt;/code&gt;, or &lt;code&gt;Function&lt;/code&gt; too.&lt;/p&gt;
&lt;p&gt;Let’s take an example.
The Vert.x &lt;code&gt;MultiMap&lt;/code&gt; class represents a multi-map of &lt;code&gt;String&lt;/code&gt; keys to a list of &lt;code&gt;String&lt;/code&gt; values.
It’s useful to represent things like HTTP headers and parameters which allow multiple values for keys.&lt;/p&gt;
&lt;p&gt;Since the bare &lt;code&gt;io.vertx.core.MultiMap&lt;/code&gt; implements &lt;code&gt;Iterable&lt;Map.Entry&lt;String, String&gt;&gt;&lt;/code&gt;, you can iterate through the content with a &lt;code&gt;for-each&lt;/code&gt; loop.
Starting with 3.7.1, the same is possible with the &lt;em&gt;Rxified&lt;/em&gt; version:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;io.vertx.reactivex.core.MultiMap headers = request.headers();
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Entry&lt;String, String&gt; header : headers) {
  &lt;span class=&quot;hljs-comment&quot;&gt;// inspect header  &lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, for advanced transformations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;Flowable&lt;Entry&lt;String, String&gt;&gt; headers = Flowable.fromIterable(request.headers());&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;graphiql-ide&quot;&gt;GraphiQL IDE&lt;/h3&gt;
&lt;p&gt;Vert.x 3.7.0 added support for building &lt;a href=&quot;https://vertx.io/docs/vertx-web-graphql/java/&quot;&gt;GraphQL servers&lt;/a&gt; with Vert.x Web and &lt;a href=&quot;http://graphql-java.com/&quot;&gt;GraphQL-Java&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In 3.7.1, the GraphQL handler can be configured to expose the GraphiQL IDE:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;GraphQLHandlerOptions options = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; GraphQLHandlerOptions()
  .setGraphiQLOptions(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; GraphiQLOptions()
    .setEnabled(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;)
  );

router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/graphql&quot;&lt;/span&gt;).handler(GraphQLHandler.create(graphQL, options));&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;vert-x-3-8-0-is-the-next-release&quot;&gt;Vert.x 3.8.0 is the next release&lt;/h3&gt;
&lt;p&gt;The next version of Vert.x will be 3.8 and targets end of June / early July with the following themes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introducing a Promise interface to be used instead of Future in a couple of places of the codebase such as &lt;code&gt;Verticle&lt;/code&gt; start or
&lt;code&gt;executeBlocking&lt;/code&gt;. The goal is to move the completion part in Vert.x 4 from &lt;code&gt;Future&lt;/code&gt; to &lt;code&gt;Promise&lt;/code&gt; which becomes the object to be
completed and &lt;code&gt;Future&lt;/code&gt; is a view that is consumed by clients&lt;/li&gt;
&lt;li&gt;Json Pointer support&lt;/li&gt;
&lt;li&gt;The new SQL client will be released as tech preview (until v4)&lt;/li&gt;
&lt;li&gt;RedisPool as tech preview (until v4) bring back connection management, lazy reconnect and scaling to all client modes (Single, Sentinel and Cluster)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vert.x 3.7.1 release notes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.7.1-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.7.1-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vert.x 3.7.1 deprecations and breaking changes&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.7.1-Deprecations-and-breaking-changes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.7.1-Deprecations-and-breaking-changes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.6.3%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.7.1/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 27 May 2019 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-3-7-1</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-7-1</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 3.7.0 released!</title>
          <description>
      &lt;article&gt;&lt;p&gt;We are extremely pleased to announce that the Eclipse Vert.x version 3.7.0 has been released.&lt;/p&gt;
&lt;p&gt;It is an exciting milestone for a couple of reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;it comes with great new features like the &lt;a href=&quot;#vertx-web-graphql&quot;&gt;GraphQL extension for Vert.x Web&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;this is the last minor version before Vert.x 4! &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Before we go throught the most notable new features, we would like to thank all the contributors.
Your participation has been essential to this achievement.&lt;/p&gt;
&lt;h4 id=&quot;-a-id-vertx-web-graphql-vert-x-web-graphql-a-&quot;&gt;&lt;a id=&quot;vertx-web-graphql&quot;&gt;Vert.x Web GraphQL&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Vert.x Web GraphQL extends Vert.x Web with the &lt;a href=&quot;https://www.graphql-java.com&quot;&gt;GraphQL-Java&lt;/a&gt; library so that you can build a GraphQL server.&lt;/p&gt;
&lt;p&gt;To use this new module, add the following to the &lt;em&gt;dependencies&lt;/em&gt; section of your Maven POM file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.vertx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;vertx-web-graphql&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;3.7.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, if you use Gradle:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;io.vertx:vertx-web-graphql:3.7.0&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then create a Vert.x Web &lt;code&gt;Route&lt;/code&gt; and a &lt;code&gt;GraphQLHandler&lt;/code&gt; for it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Setup the GraphQL-Java object&lt;/span&gt;
GraphQL graphQL = setupGraphQLJava();
&lt;span class=&quot;hljs-comment&quot;&gt;// Use it to handle requests on a Vert.x Web route &lt;/span&gt;
router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/graphql&quot;&lt;/span&gt;).handler(GraphQLHandler.create(graphQL));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The GraphQL handler supports out of the box:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;query context customization&lt;/li&gt;
&lt;li&gt;GraphQL-Java data loaders&lt;/li&gt;
&lt;li&gt;batching on &lt;code&gt;POST&lt;/code&gt; requests (compatible with the &lt;a href=&quot;https://www.apollographql.com/docs/link/links/batch-http.html&quot;&gt;&lt;code&gt;apollo-link-batch-http&lt;/code&gt;&lt;/a&gt; transport)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For detailed usage instructions, please refer to the &lt;a href=&quot;/docs/vertx-web-graphql/java/&quot;&gt;Vert.x Web GraphQL documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;vert-x-cassandra-client&quot;&gt;Vert.x Cassandra Client&lt;/h4&gt;
&lt;h5 id=&quot;object-mapper-support&quot;&gt;Object mapper support&lt;/h5&gt;
&lt;p&gt;Vert.x Cassandra Client now supports the &lt;a href=&quot;https://github.com/datastax/java-driver/tree/3.x/manual/object_mapper&quot;&gt;cassandra-driver-mapping&lt;/a&gt; module.&lt;/p&gt;
&lt;p&gt;To enable this feature, you need to update your classpath by adding:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;com.datastax.cassandra&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;cassandra-driver-mapping&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;3.7.1&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then for a given entity: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@Table&lt;/span&gt;(keyspace = &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;, name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;users&quot;&lt;/span&gt;)
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;User&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-annotation&quot;&gt;@PartitionKey&lt;/span&gt; String name;
  &lt;span class=&quot;hljs-comment&quot;&gt;// ... other fields and methods &lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can retrieve a mapper and execute CRUD operations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;VertxMappingManager manager = VertxMappingManager.create(cassandraClient);
VertxMapper&lt;User&gt; mapper = manager.mapper(User.class, vertx);
mapper.save(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; User(&lt;span class=&quot;hljs-string&quot;&gt;&quot;john&quot;&lt;/span&gt;, hander -&gt; {}));&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;collector-api&quot;&gt;Collector API&lt;/h5&gt;
&lt;p&gt;The feature allows to use Java &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collector.html&quot;&gt;collectors&lt;/a&gt; for query results:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Create a collector projecting a row set to a string in the form (last_name_1,last_name_2,...)&lt;/span&gt;
Collector&lt;Row, ?, String&gt; collector = Collectors.mapping(
    row -&gt; row.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;last_name&quot;&lt;/span&gt;),
    Collectors.joining(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;(&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;)&quot;&lt;/span&gt;)
);

&lt;span class=&quot;hljs-comment&quot;&gt;// Run the query with the collector&lt;/span&gt;
client.execute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM users&quot;&lt;/span&gt;, collector, ar -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Result in the form (last_name_1,last_name_2,...)&lt;/span&gt;
    String result = ar.result();
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Failure: &quot;&lt;/span&gt; + ar.cause().getMessage());
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;cursor-api&quot;&gt;Cursor API&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;ResultSet&lt;/code&gt; object has been enhanced with &lt;code&gt;ResultSet#several&lt;/code&gt; method, allowing you to obtain several rows at once:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;resultSet.several(&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, ar -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    List&lt;Row&gt; result = ar.result();
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Failure: &quot;&lt;/span&gt; + ar.cause().getMessage());
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A very useful feature for result batch iterations without resorting to streaming or fetching all rows in memory.&lt;/p&gt;
&lt;h5 id=&quot;client-lifecyle&quot;&gt;Client lifecyle&lt;/h5&gt;
&lt;p&gt;The client lifecyle has been revisited in 3.7.&lt;/p&gt;
&lt;p&gt;Previously users expected to &lt;code&gt;connect&lt;/code&gt; manually before sending requests. It was also possible to &lt;code&gt;disconnect&lt;/code&gt; a shared client
thus failing requests sent from another verticle or part of the application.&lt;/p&gt;
&lt;p&gt;Now it is no longer required to manually connect a client (in fact, the method has been removed).&lt;/p&gt;
&lt;p&gt;As soon as you retrieve an instance you can start using it, the lifecyle is automatically managed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;CassandraClientOptions options = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; CassandraClientOptions()
  .addContactPoint(&lt;span class=&quot;hljs-string&quot;&gt;&quot;node1.address&quot;&lt;/span&gt;)
  .addContactPoint(&lt;span class=&quot;hljs-string&quot;&gt;&quot;node2.address&quot;&lt;/span&gt;)
  .addContactPoint(&lt;span class=&quot;hljs-string&quot;&gt;&quot;node3.address&quot;&lt;/span&gt;)
  .setKeyspace(&lt;span class=&quot;hljs-string&quot;&gt;&quot;my_keyspace&quot;&lt;/span&gt;);
CassandraClient sharedClient = CassandraClient.createShared(vertx, &lt;span class=&quot;hljs-string&quot;&gt;&quot;sharedClientName&quot;&lt;/span&gt;, options);
&lt;span class=&quot;hljs-comment&quot;&gt;// Start sending requests to Cassandra with the client instance&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, when the new &lt;code&gt;close&lt;/code&gt; method is invoked on a shared client, only the last active instance will actually disconnect from Cassandra:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Disconnects only if this is the last running instance of the shared client&lt;/span&gt;
sharedClient.close();&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;vert-x-redis-client&quot;&gt;Vert.x Redis Client&lt;/h4&gt;
&lt;p&gt;The Vert.x Redis client has been reworked internally and provides now a new (more evolution friendly) API.&lt;/p&gt;
&lt;p&gt;The current API had the limitation of being manually crafted after the redis API and involved many non controlable features
such as auto reconnect, unlimited buffering of requests, etc… The new API offers a more &lt;em&gt;vert.x-y&lt;/em&gt; experience.&lt;/p&gt;
&lt;p&gt;It just exposes the base client:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;Redis
  .createClient(vertx, inetSocketAddress(&lt;span class=&quot;hljs-number&quot;&gt;7006&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;))
  .connect(create -&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Redis redis = create.result();

    redis.send(Request.cmd(Command.PING), send -&gt; {
      &lt;span class=&quot;hljs-comment&quot;&gt;// ... should reply with PONG&lt;/span&gt;
    });
  });&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This has the benefits that you can now connect to Redis in any of it’s operation modes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single server&lt;/li&gt;
&lt;li&gt;HA mode&lt;/li&gt;
&lt;li&gt;Cluster mode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The API is decoupled from the handcrafted commands, which means that you can use new features such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://redis.io/commands#stream&quot;&gt;streams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://redis.io/commands#hyperloglog&quot;&gt;hyperloglog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/RedisLabsModules&quot;&gt;any extension module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A generated helper &lt;code&gt;RedisAPI&lt;/code&gt; is available that can wrap the client to provide a similar experience to the old API.&lt;/p&gt;
&lt;p&gt;The main difference is that this new wrapper is generated from the &lt;a href=&quot;https://redis.io/commands/command&quot;&gt;COMMAND&lt;/a&gt; command,
so the correct API it always exposed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;RedisAPI redis = RedisAPI.api(client);

redis.set(Arrays.asList(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;value1&quot;&lt;/span&gt;), set -&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;vert-x-amqp-client&quot;&gt;Vert.x AMQP Client&lt;/h4&gt;
&lt;p&gt;The Vert.x AMQP client allows receiving and sending AMQP messages. It supersedes the current AMQP bridge and provide an API more
flexible and very much user-friendly.&lt;/p&gt;
&lt;p&gt;The Vert.x AMQP client allows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connecting to an AMQP broker or router - SASL and TLS connections are supported&lt;/li&gt;
&lt;li&gt;Consuming message from a queue or a topic&lt;/li&gt;
&lt;li&gt;Sending messages to a queue or a topic&lt;/li&gt;
&lt;li&gt;Checking acknowledgement for sent messages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The AMQP 1.0 protocol support durable subscriptions, persistence, security, conversations, sophisticated routing… More
 details on the protocol can be found on the &lt;a href=&quot;https://www.amqp.org/&quot;&gt;AMQP homepage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Vert.x AMQP client is based on Vert.x Proton. If you need fine-grain control, we recommend using
&lt;a href=&quot;https://github.com/vert-x3/vertx-proton&quot;&gt;Vert.x Proton&lt;/a&gt; directly.&lt;/p&gt;
&lt;p&gt;To use this new module, add the following to the &lt;em&gt;dependencies&lt;/em&gt; section of your Maven POM file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.vertx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;vertx-amqp-client&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;3.7.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, if you use Gradle:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;io.vertx:vertx-amqp-client:3.7.0&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, you can connect to an AMQP broker:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;AmqpClientOptions options = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; AmqpClientOptions()
      .setHost(&lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;)
      .setPort(&lt;span class=&quot;hljs-number&quot;&gt;5672&lt;/span&gt;)
      .setUsername(&lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt;)
      .setPassword(&lt;span class=&quot;hljs-string&quot;&gt;&quot;secret&quot;&lt;/span&gt;);

AmqpClient client = AmqpClient.create(vertx, options);

client.connect(ar -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.failed()) {
    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to connect to the broker&quot;&lt;/span&gt;);
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Connection succeeded&quot;&lt;/span&gt;);
    AmqpConnection connection = ar.result();

    &lt;span class=&quot;hljs-comment&quot;&gt;// You can create receivers and senders&lt;/span&gt;
    connection.createReceiver(&lt;span class=&quot;hljs-string&quot;&gt;&quot;my-queue&quot;&lt;/span&gt;,
      msg -&gt; {
        &lt;span class=&quot;hljs-comment&quot;&gt;// called on every received messages&lt;/span&gt;
        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Received &quot;&lt;/span&gt; + msg.bodyAsString());
      },
      done -&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (done.failed()) {
          System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to create receiver&quot;&lt;/span&gt;);
        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
          AmqpReceiver receiver = done.result();
        }
      }
    );

    connection.createSender(&lt;span class=&quot;hljs-string&quot;&gt;&quot;my-queue&quot;&lt;/span&gt;, done -&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (done.failed()) {
        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to create a sender&quot;&lt;/span&gt;);
      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        AmqpSender sender = done.result();
        sender.send(AmqpMessage.create().withBody(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;).build());
      }
    });

  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;stream-pipes&quot;&gt;Stream pipes&lt;/h4&gt;
&lt;p&gt;When it comes to streaming, back-pressure is something you need to care about.&lt;/p&gt;
&lt;p&gt;You have very much likely heard or used the Vert.x &lt;code&gt;Pump&lt;/code&gt; API to transfer data from a read stream to a write stream while
respecting the write stream back-pressure.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Pipe&lt;/code&gt; a new API superseding the &lt;code&gt;Pump&lt;/code&gt; to achieve the same effect and even more, it acts like a pump and handles for you&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read stream pause/resume&lt;/li&gt;
&lt;li&gt;write stream termination&lt;/li&gt;
&lt;li&gt;stream failures handling&lt;/li&gt;
&lt;li&gt;asynchronous result upon streaming completion&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can transfer a read stream to a write stream simply, the write stream will be ended upon completion of the stream&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;readStream.pipeTo(writeStream);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also be notified when the pipe completes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;readStream.pipeTo(writeStream, ar -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;done&quot;&lt;/span&gt;);
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;failed &quot;&lt;/span&gt; + ar.cause());
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creating and using an asynchronous pipe is easy&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// The read stream will be paused until the pipe is used&lt;/span&gt;
Pipe&lt;Buffer&gt; pipe = readStream.pipe();
getAsyncPipe(ar -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    pipe.to(writeStream);
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    pipe.close();
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;kafka-admin-client&quot;&gt;Kafka admin client&lt;/h4&gt;
&lt;p&gt;The new version brings a Vert.x based first implementation of the native &lt;a href=&quot;https://kafka.apache.org/documentation/#adminapi&quot;&gt;Kafka Admin Client API&lt;/a&gt;
which are in Java, instead of Scala used in the previous version.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;AdminUtils&lt;/code&gt; is now deprecated and the new &lt;code&gt;KafkaAdminClient&lt;/code&gt; is available instead.
It allows to remove the last Scala artifact dependency.&lt;/p&gt;
&lt;p&gt;While the &lt;code&gt;AdminUtils&lt;/code&gt; implementation needs to connect to Zookeeper for administration purposes,
the &lt;code&gt;KafkaAdminClient&lt;/code&gt; only uses the Kafka bootstrap brokers connection.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;Properties config = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Properties();
config.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, &lt;span class=&quot;hljs-string&quot;&gt;&quot;my-kafka-broker:9092&quot;&lt;/span&gt;);

KafkaAdminClient adminClient = KafkaAdminClient.create(vertx, config);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The features currently supported are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create and delete topics&lt;/li&gt;
&lt;li&gt;list all the topics&lt;/li&gt;
&lt;li&gt;describe topics for getting information about leader partition, follower replicas and ISR (in-sync replicas) list&lt;/li&gt;
&lt;li&gt;alter topics configuration&lt;/li&gt;
&lt;li&gt;list all consumer groups&lt;/li&gt;
&lt;li&gt;describe consumer groups for getting information like the state, the coordinator host, consumers per topics and so on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are using the &lt;code&gt;AdminUtils&lt;/code&gt; today, consider migrate to the new &lt;code&gt;KafkaAdminClient&lt;/code&gt; because the former will be removed in Vert.x 4.0.&lt;/p&gt;
&lt;h4 id=&quot;and-more-&quot;&gt;And more…&lt;/h4&gt;
&lt;p&gt;Here are some other important improvements you can find in this release:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shared data structures available in local-only mode even when Vert.x is clustered&lt;/li&gt;
&lt;li&gt;JSON decoding without prior knowledge of the structure (object, array, string, …etc)&lt;/li&gt;
&lt;li&gt;Infinispan Cluster Manager upgraded to &lt;a href=&quot;https://infinispan.org&quot;&gt;Infinispan&lt;/a&gt; 9.4.10.Final&lt;/li&gt;
&lt;li&gt;And obviously we have the usual bug fixes!&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;finally&quot;&gt;Finally&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.7.0-Release-Notes&quot;&gt;3.7.0 release notes&lt;/a&gt; can be found on the wiki, as well as the
list of &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.7.0-Deprecations-and-breaking-changes&quot;&gt;deprecations and breaking changes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker images are available on &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Vert.x distribution can be downloaded on the website but is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge is available from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;NPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;Bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;WebJars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The release artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.7.0%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.7.0/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That’s it! Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Tue, 02 Apr 2019 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-3-7-0-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-7-0-released</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 3.6.3</title>
          <description>
      &lt;article&gt;&lt;p&gt;We have just released Vert.x 3.6.3, a bug fix release of Vert.x 3.6.x.&lt;/p&gt;
&lt;p&gt;Since the release of Vert.x 3.6.2, quite a few bugs have been reported. We would like to thank you all for reporting these issues.&lt;/p&gt;
&lt;p&gt;In addition, the Kotlin support for data objects provides now a more &lt;a href=&quot;https://github.com/vert-x3/vertx-lang-kotlin/issues/103[idiomatic&quot;&gt;https://github.com/vert-x3/vertx-lang-kotlin/issues/103[idiomatic&lt;/a&gt;],
data object support.&lt;/p&gt;
&lt;p&gt;Vert.x 3.6.3 release notes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.6.3-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.6.3-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.6.3%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.6.3/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 04 Feb 2019 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-3-6-3</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-6-3</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 3.6.2</title>
          <description>
      &lt;article&gt;&lt;p&gt;We have just released Vert.x 3.6.2, a bug fix release of Vert.x 3.6.x.&lt;/p&gt;
&lt;p&gt;There is already a 3.6.1 release but that exhibited a (Maven dependency) regression for Vert.x RxJava, so we reacted immediately and
did a 3.6.2 release to fix the issue, as RxJava is a critical component of the Vert.x stack. Therefore 3.6.2 is instead
announced.&lt;/p&gt;
&lt;p&gt;Since the release of Vert.x 3.6.0, quite a few bugs have been reported. We would like to thank you all for reporting these issues.&lt;/p&gt;
&lt;p&gt;As you might know, the development of Vert.x 4 has started and therefore a few API will be deprecated in Vert.x 3.&lt;/p&gt;
&lt;p&gt;Such APIs will be deprecated step by step in Vert.x 3 with an alternative API so you can anticipate the API upgrade
in Vert.x 4 from the Vert.x 3.6, for 3.6.2 here is the list of deprecations you can find&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.6.2-Deprecations&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.6.2-Deprecations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vert.x 3.6.2 release notes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.6.2-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.6.2-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.5.4%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.5.4/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 17 Dec 2018 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-3-6-2</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-6-2</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Vert.x Web API Service Introduction</title>
          <description>
      &lt;article&gt;&lt;h1 id=&quot;vert-x-web-api-service&quot;&gt;Vert.x Web API Service&lt;/h1&gt;
&lt;p&gt;Vert.x 3.6 introduces a new module called &lt;code&gt;vertx-web-api-service&lt;/code&gt;. With the new Web API Services you can easily combine the &lt;a href=&quot;https://vertx.io/docs/vertx-web/java/&quot;&gt;Vert.x Web Router&lt;/a&gt; and the &lt;a href=&quot;https://vertx.io/docs/vertx-web-api-contract/java/&quot;&gt;Vert.x OpenAPI Router Factory&lt;/a&gt; features with &lt;a href=&quot;https://vertx.io/docs/vertx-service-proxy/java/&quot;&gt;Vert.x Services on Event Bus&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;small-recap-on-openapi-and-vert-x-web-api-contract&quot;&gt;Small recap on OpenAPI and Vert.x Web API Contract&lt;/h2&gt;
&lt;p&gt;Let’s start from this OpenAPI definition:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openapi: &lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;/span&gt;
paths:
  /api/transactions:
    get:
      operationId: getTransactionsList
      description: Get transactions list filtered by sender
      x-vertx-event-bus: transactions_manager.myapp
      parameters:
        - name: from
          &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;: query
          description: Matches exactly the email from
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses: &lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;
    post:
      operationId: addTransaction
      x-vertx-event-bus: transactions_manager.myapp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: &lt;span class=&quot;hljs-string&quot;&gt;&quot;#/components/schemas/Transaction&quot;&lt;/span&gt;
      responses: &lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;
  /api/transactions/{transactionId}:
    parameters:
      - name: transactionId
        &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;: path
        required: true
        schema:
          type: string
    put:
      operationId: updateTransaction
      x-vertx-event-bus: transactions_manager.myapp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: &lt;span class=&quot;hljs-string&quot;&gt;&quot;#/components/schemas/Transaction&quot;&lt;/span&gt;
      responses: &lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;
    delete:
      operationId: removeTransaction
      x-vertx-event-bus: transactions_manager.myapp
      responses: &lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;
components:
  schemas:
    Transaction: &lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;
    Error: &lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We defined &lt;code&gt;getTransactionsList&lt;/code&gt;, &lt;code&gt;addTransaction&lt;/code&gt;, &lt;code&gt;updateTransaction&lt;/code&gt; and &lt;code&gt;removeTransaction&lt;/code&gt; operations. Now with &lt;code&gt;OpenAPI3RouterFactory&lt;/code&gt; we create a &lt;code&gt;Router&lt;/code&gt; that accepts this various operation requests:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;OpenAPI3RouterFactory.create(vertx, &lt;span class=&quot;hljs-string&quot;&gt;&quot;src/main/resources/petstore.yaml&quot;&lt;/span&gt;, ar -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Spec loaded with success&lt;/span&gt;
    OpenAPI3RouterFactory routerFactory = ar.result();
    routerFactory.addHandlerByOperationId(&lt;span class=&quot;hljs-string&quot;&gt;&quot;getTransactionsList&quot;&lt;/span&gt;, routingContext -&gt; {
      RequestParameters params = routingContext.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;parsedParameters&quot;&lt;/span&gt;);
      RequestParameter from = params.queryParameter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;from&quot;&lt;/span&gt;);
      &lt;span class=&quot;hljs-comment&quot;&gt;// getTransactionsList business logic&lt;/span&gt;
    });
    &lt;span class=&quot;hljs-comment&quot;&gt;// add handlers for addTransaction, updateTransaction and removeTransaction&lt;/span&gt;
    Router router = routerFactory.getRouter();
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Something went wrong during router factory initialization&lt;/span&gt;
    Throwable exception = ar.cause();
    &lt;span class=&quot;hljs-comment&quot;&gt;// Log exception, fail verticle deployment ... etc&lt;/span&gt;
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;OpenAPI3RouterFactory&lt;/code&gt; provides an easy way to create a specification compliant &lt;code&gt;Router&lt;/code&gt;, but it doesn’t provide a mechanism to decouple the business logic from your operation handlers.&lt;/p&gt;
&lt;p&gt;In a typical Vert.x application, when you receive a request to your router, you would forward it to an event bus endpoint that performs some actions and sends the result back to the operation handler.&lt;/p&gt;
&lt;p&gt;Vert.x Web API Service simplifies that integration between &lt;code&gt;RouterFactory&lt;/code&gt; and &lt;code&gt;EventBus&lt;/code&gt; with a new code generator. The final result is a &lt;em&gt;loose coupling&lt;/em&gt; between the Web Router logic and your business logic.&lt;/p&gt;
&lt;h2 id=&quot;let-s-get-started-with-vert-x-web-api-services-&quot;&gt;Let’s get started with Vert.x Web Api Services!&lt;/h2&gt;
&lt;p&gt;To use &lt;code&gt;vertx-web-api-service&lt;/code&gt; you need to add a couple of dependencies to your project. In a Maven POM file that would be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.vertx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;vertx-codegen&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;3.6.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;classifier&lt;/span&gt;&gt;&lt;/span&gt;processor&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;classifier&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.vertx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;vertx-web-api-service&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;3.6.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will proceed in this order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Model the service interface&lt;/li&gt;
&lt;li&gt;Rewrite it to work with Web Api Services&lt;/li&gt;
&lt;li&gt;Implement the service&lt;/li&gt;
&lt;li&gt;Mount the service on the event bus&lt;/li&gt;
&lt;li&gt;Use the router factory to build a router with handlers that connects to our event bus services&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;model-your-service&quot;&gt;Model your service&lt;/h2&gt;
&lt;p&gt;Let’s say that we want to model a service that manages all operations regarding CRUD transactions. An example interface for this asynchronous service could be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TransactionsManagerService&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getTransactionsList&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(List&lt;String&gt; from, Handler&lt;AsyncResult&lt;List&lt;Transaction&gt;&gt;&gt; resultHandler)&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;addTransaction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Transaction transaction, Handler&lt;AsyncResult&lt;Transaction&gt;&gt; resultHandler)&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;updateTransaction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String transactionId, Transaction transaction, Handler&lt;AsyncResult&lt;Transaction&gt;&gt; resultHandler)&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;removeTransaction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String transactionId, Handler&lt;AsyncResult&lt;Integer&gt;&gt; resultHandler)&lt;/span&gt;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For each operation, we have some parameters, depending on the operation, and a callback (&lt;code&gt;resultHandler&lt;/code&gt;) that should be called when the operation succeeds or fails.&lt;/p&gt;
&lt;p&gt;With &lt;a href=&quot;https://vertx.io/docs/vertx-service-proxy/java/&quot;&gt;Vert.x Service Proxy&lt;/a&gt;, you can define an event bus service with a Java interface similar to the one we just saw and then annotate it with &lt;code&gt;@ProxyGen&lt;/code&gt;. This annotation will generate a &lt;em&gt;service handler&lt;/em&gt; for the defined service that can be plugged to the event bus with &lt;code&gt;ServiceBinder&lt;/code&gt;. &lt;code&gt;vertx-web-api-service&lt;/code&gt; works in a very similar way: you need to annotate the Java interface with &lt;code&gt;@WebApiServiceGen&lt;/code&gt; and it will generate the service handler for the event bus.&lt;/p&gt;
&lt;p&gt;Let’s rewrite the &lt;code&gt;TransactionsManagerService&lt;/code&gt; to work with Web API Service:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.ext.web.api.*;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.ext.web.api.generator.WebApiServiceGen;

&lt;span class=&quot;hljs-annotation&quot;&gt;@WebApiServiceGen&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TransactionsManagerService&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getTransactionsList&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(List&lt;String&gt; from, OperationRequest context, Handler&lt;AsyncResult&lt;OperationResponse&gt;&gt; resultHandler)&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;addTransaction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Transaction body, OperationRequest context, Handler&lt;AsyncResult&lt;OperationResponse&gt;&gt; resultHandler)&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;updateTransaction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String transactionId, Transaction body, OperationRequest context, Handler&lt;AsyncResult&lt;OperationResponse&gt;&gt; resultHandler)&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;removeTransaction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String transactionId, OperationRequest context, Handler&lt;AsyncResult&lt;OperationResponse&gt;&gt; resultHandler)&lt;/span&gt;&lt;/span&gt;;

  &lt;span class=&quot;hljs-comment&quot;&gt;// Factory method to instantiate the implementation&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; TransactionsManagerService &lt;span class=&quot;hljs-title&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Vertx vertx)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TransactionsManagerServiceImpl&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(vertx)&lt;/span&gt;&lt;/span&gt;;
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First of all, look at the annotation &lt;code&gt;@WebApiServiceGen&lt;/code&gt;. This annotation will trigger the code generator that generates the event bus handler for this service. Each method has the same two last parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OperationRequest context&lt;/code&gt;: this data object contains the headers and the parameters of the HTTP request&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Handler&lt;AsyncResult&lt;OperationResponse&gt;&gt; resultHandler&lt;/code&gt;: this callback accepts an &lt;code&gt;OperationResponse&lt;/code&gt; data object that will encapsulate the body of the result, the status code, the status message and the headers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The generated handler receives only the &lt;code&gt;OperationRequest&lt;/code&gt; data object and extracts from it all operation parameters. For example, when the router receives a request at &lt;code&gt;getTransactionsList&lt;/code&gt;, it sends to &lt;code&gt;TransactionsManagerService&lt;/code&gt; the &lt;code&gt;OperationRequest&lt;/code&gt; containing the &lt;code&gt;RequestParameters&lt;/code&gt; map. From this map, the service generated handler extracts the &lt;code&gt;from&lt;/code&gt; parameter. &lt;/p&gt;
&lt;p&gt;Therefore &lt;strong&gt;operation parameters names should match method parameter names&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When you want to extract the body you must use &lt;code&gt;body&lt;/code&gt; keyword. For more details, please refer to the &lt;a href=&quot;https://vertx.io/docs/vertx-web-api-service/java/&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;implement-the-service&quot;&gt;Implement the service&lt;/h2&gt;
&lt;p&gt;Now that you have your interface, you can implement the service:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TransactionsManagerServiceImpl&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TransactionsManagerService&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Vertx vertx;

  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TransactionsManagerServiceImpl&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Vertx vertx)&lt;/span&gt; &lt;/span&gt;{  &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.vertx = vertx;  }

  &lt;span class=&quot;hljs-annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getTransactionsList&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(List&lt;String&gt; from, OperationRequest context, Handler&lt;AsyncResult&lt;OperationResponse&gt;&gt; resultHandler)&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;hljs-comment&quot;&gt;// Write your business logic here&lt;/span&gt;
    resultHandler.handle(Future.succeededFuture(OperationResult.completedWithJson(resultJson)));
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;// Implement other operations&lt;/span&gt;

}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the &lt;code&gt;OperationResult&lt;/code&gt; documentation to look at various handy methods to create a complete response.&lt;/p&gt;
&lt;h2 id=&quot;mount-the-service&quot;&gt;Mount the Service&lt;/h2&gt;
&lt;p&gt;Now that you have your service interface and implementation, you can mount your service with &lt;code&gt;ServiceBinder&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;ServiceBinder serviceBinder = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ServiceBinder(vertx);

TransactionsManagerService transactionsManagerService = TransactionsManagerService.create(vertx);
registeredConsumers.add(
  serviceBinder
    .setAddress(&lt;span class=&quot;hljs-string&quot;&gt;&quot;transactions_manager.myapp&quot;&lt;/span&gt;)
    .register(TransactionsManagerService.class, transactionsManagerService)
);&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;and-the-router-factory-&quot;&gt;And the Router Factory?&lt;/h2&gt;
&lt;p&gt;The service is up and running, but we need to connect it to the &lt;code&gt;Router&lt;/code&gt; built by &lt;code&gt;OpenAPI3RouterFactory&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;OpenAPI3RouterFactory.create(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.vertx, &lt;span class=&quot;hljs-string&quot;&gt;&quot;my_spec.yaml&quot;&lt;/span&gt;, openAPI3RouterFactoryAsyncResult -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (openAPI3RouterFactoryAsyncResult.succeeded()) {
    OpenAPI3RouterFactory routerFactory = openAPI3RouterFactoryAsyncResult.result();
    &lt;span class=&quot;hljs-comment&quot;&gt;// Mount services on event bus based on extensions&lt;/span&gt;
    routerFactory.mountServicesFromExtensions(); &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;- Pure magic happens!&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;// Generate the router&lt;/span&gt;
    Router router = routerFactory.getRouter();
    server = vertx.createHttpServer(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HttpServerOptions().setPort(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;));
    server.requestHandler(router).listen();
    &lt;span class=&quot;hljs-comment&quot;&gt;// Initialization completed&lt;/span&gt;
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Something went wrong during router factory initialization&lt;/span&gt;
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our spec example we added an extension &lt;code&gt;x-vertx-event-bus&lt;/code&gt; to each operation that specifies the address of the service. Using this extension, you only need to call &lt;code&gt;OpenAPI3RouterFactory.mountServicesFromExtensions()&lt;/code&gt; to trigger a scan of all operations and mount all found service addresses. For each operation that contains &lt;code&gt;x-vertx-event-bus&lt;/code&gt;, the Router Factory instantiates an handler that routes the incoming requests to the address you specified.&lt;/p&gt;
&lt;p&gt;This is one of the methods you can use to match services with router operation handlers. Check the documentation for all details.&lt;/p&gt;
&lt;h2 id=&quot;more-examples&quot;&gt;More examples&lt;/h2&gt;
&lt;p&gt;Check out the complete example in &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/master/web-api-service-example&quot;&gt;vertx-examples repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks you for your time, stay tuned for more updates! And please provide feedback about this new package!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Thu, 13 Dec 2018 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/vert-x-web-api-service-introduction</link>
          <guid isPermaLink="true">https://vertx.io/blog/vert-x-web-api-service-introduction</guid>
          <author>
            <name>slinkydeveloper</name>
            <uri>http://github.com/slinkydeveloper</uri>
          </author>
        </item>
      
        <item>
          <title>HTTP response validation with the Vert.x Web Client</title>
          <description>
      &lt;article&gt;&lt;p&gt;By default, a &lt;a href=&quot;/docs/vertx-web-client/java/&quot;&gt;Vert.x Web Client&lt;/a&gt; request ends with an error only if something wrong happens at the network level.
In other words, a &lt;code&gt;404 Not Found&lt;/code&gt; response, or a response with the wrong content type, are &lt;strong&gt;not&lt;/strong&gt; considered as failures.&lt;/p&gt;
&lt;p&gt;Hence, you would usually perform sanity checks manually after the response is received:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;client
  .get(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;myserver.mycompany.com&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/some-uri&quot;&lt;/span&gt;)
  .send(ar -&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
      &lt;span class=&quot;hljs-type&quot;&gt;HttpResponse&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;Buffer&lt;/span&gt;&gt; response = ar.&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;();
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (response.statusCode() == &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt; &amp;&amp; response.getHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;).equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;)) {
        // &lt;span class=&quot;hljs-type&quot;&gt;Decode&lt;/span&gt; the body &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; a json &lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt;
        &lt;span class=&quot;hljs-type&quot;&gt;JsonObject&lt;/span&gt; body = response.bodyAsJsonObject();
      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Something went wrong &quot;&lt;/span&gt; + response.statusCode());
      }
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Something went wrong &quot;&lt;/span&gt; + ar.cause().getMessage());
    }
  });&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Starting with &lt;a href=&quot;/blog/eclipse-vert-x-3-6-0-released/&quot;&gt;Vert.x 3.6&lt;/a&gt;, you can can trade flexibility for clarity and conciseness using &lt;em&gt;response predicates&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;response-predicates&quot;&gt;Response predicates&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;/docs/apidocs/io/vertx/ext/web/client/predicate/ResponsePredicate.html&quot;&gt;Response predicates&lt;/a&gt; can fail a request when the response does not match criterion.&lt;/p&gt;
&lt;p&gt;The Web Client module comes with a set of ready-to-use predicates:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;client
  .get(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;myserver.mycompany.com&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/some-uri&quot;&lt;/span&gt;)
  .expect(&lt;span class=&quot;hljs-type&quot;&gt;ResponsePredicate&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;SC_SUCCESS&lt;/span&gt;)
  .expect(&lt;span class=&quot;hljs-type&quot;&gt;ResponsePredicate&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;JSON&lt;/span&gt;)
  .send(ar -&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
      &lt;span class=&quot;hljs-type&quot;&gt;HttpResponse&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;Buffer&lt;/span&gt;&gt; response = ar.&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;();
      // &lt;span class=&quot;hljs-type&quot;&gt;Safely&lt;/span&gt; decode the body &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; a json &lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt;
      &lt;span class=&quot;hljs-type&quot;&gt;JsonObject&lt;/span&gt; body = response.bodyAsJsonObject();
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Something went wrong &quot;&lt;/span&gt; + ar.cause().getMessage());
    }
  });&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The web is full of HTTP/JSON endpoints, so there is no doubt the &lt;code&gt;ResponsePredicate.SC_SUCCESS&lt;/code&gt; and &lt;code&gt;ResponsePredicate.JSON&lt;/code&gt; can be handy.&lt;/p&gt;
&lt;p&gt;Nevertheless, you might also need to check that the status code is whithin a specific range:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;client
  .&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;myserver.mycompany.com&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/some-uri&quot;&lt;/span&gt;)
  .expect(ResponsePredicate.status(&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;202&lt;/span&gt;))
  .send(ar -&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// ....&lt;/span&gt;
  });&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or that the content is of a specific type: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;client
  .&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;myserver.mycompany.com&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/some-uri&quot;&lt;/span&gt;)
  .expect(ResponsePredicate.contentType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;some/content-type&quot;&lt;/span&gt;))
  .send(ar -&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// ....&lt;/span&gt;
  });&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please refer to the &lt;a href=&quot;/docs/apidocs/io/vertx/ext/web/client/predicate/ResponsePredicate.html&quot;&gt;&lt;code&gt;ResponsePredicate&lt;/code&gt; documentation&lt;/a&gt; for a full list of predefined predicates.&lt;/p&gt;
&lt;h3 id=&quot;custom-predicates&quot;&gt;Custom predicates&lt;/h3&gt;
&lt;p&gt;Eventually, predicates were not designed for status code and content type checking only, so feel free to create your own validation code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Check CORS header allowing to do POST&lt;/span&gt;
Function&lt;span class=&quot;hljs-subst&quot;&gt;&lt;&lt;/span&gt;HttpResponse&lt;span class=&quot;hljs-subst&quot;&gt;&lt;&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;hljs-subst&quot;&gt;&gt;&lt;/span&gt;, ResponsePredicateResult&lt;span class=&quot;hljs-subst&quot;&gt;&gt;&lt;/span&gt; methodsPredicate &lt;span class=&quot;hljs-subst&quot;&gt;=&lt;/span&gt; resp &lt;span class=&quot;hljs-subst&quot;&gt;-&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; methods &lt;span class=&quot;hljs-subst&quot;&gt;=&lt;/span&gt; resp&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;getHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access-Control-Allow-Methods&quot;&lt;/span&gt;);
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (methods &lt;span class=&quot;hljs-subst&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;null&lt;/span&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (methods&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;contains(&lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;)) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ResponsePredicateResult&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;success();
    }
  }
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ResponsePredicateResult&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;failure(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Does not work&quot;&lt;/span&gt;);
};

&lt;span class=&quot;hljs-comment&quot;&gt;// Send pre-flight CORS request&lt;/span&gt;
client
  &lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;request(HttpMethod&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;OPTIONS, &lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;myserver.mycompany.com&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/some-uri&quot;&lt;/span&gt;)
  &lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Origin&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Server-b.com&quot;&lt;/span&gt;)
  &lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Access-Control-Request-Method&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;)
  &lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;expect(methodsPredicate)
  &lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;send(ar &lt;span class=&quot;hljs-subst&quot;&gt;-&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;succeeded()) {
      &lt;span class=&quot;hljs-comment&quot;&gt;// Process the POST request now&lt;/span&gt;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      System&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Something went wrong &quot;&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;+&lt;/span&gt; ar&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;cause()&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;getMessage());
    }
  });&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that response predicates are evaluated &lt;em&gt;before&lt;/em&gt; the response body is received.
Therefore &lt;strong&gt;you can’t inspect the response body&lt;/strong&gt; in a predicate test function, only status code, status message and response headers.&lt;/p&gt;
&lt;h2 id=&quot;dealing-with-failures&quot;&gt;Dealing with failures&lt;/h2&gt;
&lt;p&gt;By default, response predicates (including the predefined ones) use a generic error converter which discards the response body and conveys a simple message.
You can customize the exception class by changing the error converter:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;ResponsePredicate&lt;/span&gt; predicate = &lt;span class=&quot;hljs-type&quot;&gt;ResponsePredicate&lt;/span&gt;.create(&lt;span class=&quot;hljs-type&quot;&gt;ResponsePredicate&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;SC_SUCCESS&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; new &lt;span class=&quot;hljs-type&quot;&gt;MyCustomException&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;.message());
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Beware that creating exceptions in Java comes with the &lt;strong&gt;performance cost&lt;/strong&gt; of capturing the call stack.
The generic error converter generates exceptions that do not capture it.&lt;/p&gt;
&lt;h3 id=&quot;reading-details-in-error-responses&quot;&gt;Reading details in error responses&lt;/h3&gt;
&lt;p&gt;Many web APIs provide details in error responses.
For example, the &lt;a href=&quot;https://developer.marvel.com/docs&quot;&gt;Marvel API&lt;/a&gt; uses this JSON object format:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;{
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;code&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;InvalidCredentials&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;message&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;The passed API key is invalid.&quot;&lt;/span&gt;
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To avoid losing this information, it is possible to wait for the response body to be fully received before the error converter is called:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;ErrorConverter&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;converter&lt;/span&gt; = &lt;span class=&quot;hljs-type&quot;&gt;ErrorConverter&lt;/span&gt;.createFullBody(&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; -&gt; {

  // &lt;span class=&quot;hljs-type&quot;&gt;Invoked&lt;/span&gt; after the response body &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; fully received
  &lt;span class=&quot;hljs-type&quot;&gt;HttpResponse&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;Buffer&lt;/span&gt;&gt; response = &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;.response();

  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (response.getHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;).equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;)) {
    // &lt;span class=&quot;hljs-type&quot;&gt;Error&lt;/span&gt; body &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JSON&lt;/span&gt; data
    &lt;span class=&quot;hljs-type&quot;&gt;JsonObject&lt;/span&gt; body = response.bodyAsJsonObject();
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; new &lt;span class=&quot;hljs-type&quot;&gt;MyCustomException&lt;/span&gt;(body.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;code&quot;&lt;/span&gt;), body.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;message&quot;&lt;/span&gt;));
  }

  // &lt;span class=&quot;hljs-type&quot;&gt;Fallback&lt;/span&gt; to defaut message
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; new &lt;span class=&quot;hljs-type&quot;&gt;MyCustomException&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;.message());
});

&lt;span class=&quot;hljs-type&quot;&gt;ResponsePredicate&lt;/span&gt; predicate = &lt;span class=&quot;hljs-type&quot;&gt;ResponsePredicate&lt;/span&gt;.create(&lt;span class=&quot;hljs-type&quot;&gt;ResponsePredicate&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;SC_SUCCESS&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;converter&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it! Feel free to comment here or ask questions on our &lt;a href=&quot;/community&quot;&gt;community channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 10 Dec 2018 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/http-response-validation-with-the-vert-x-web-client</link>
          <guid isPermaLink="true">https://vertx.io/blog/http-response-validation-with-the-vert-x-web-client</guid>
          <author>
            <name>tsegismont</name>
            <uri>http://github.com/tsegismont</uri>
          </author>
        </item>
      
        <item>
          <title>The RSS reader tutorial. Step 3.</title>
          <description>
      &lt;article&gt;&lt;h1 id=&quot;quick-recap&quot;&gt;Quick recap&lt;/h1&gt;
&lt;p&gt;Now that &lt;a href=&quot;https://vertx.io/blog/eclipse-vert-x-3-6-0-released/&quot;&gt;Vert.x 3.6.0 has been released&lt;/a&gt;, it’s the perfect time to conclude our &lt;a href=&quot;https://vertx.io/docs/vertx-cassandra-client/java/&quot;&gt;Vert.x Cassandra Client&lt;/a&gt; tutorial!&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;https://vertx.io/blog/the-rss-reader-tutorial-step-2/&quot;&gt;the previous step&lt;/a&gt; we have successfully implemented the second endpoint 
of the RSS reader app.&lt;/p&gt;
&lt;p&gt;The RSS reader example assumes implementing 3 endpoints. This article is dedicated to implementing the last &lt;code&gt;GET /articles/by_rss_link?link={rss_link}&lt;/code&gt; endpoint.&lt;/p&gt;
&lt;p&gt;Before completing this step, make sure your are in the &lt;code&gt;step_3&lt;/code&gt; git branch:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;git checkout step_3&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;implementing-the-3rd-endpoint&quot;&gt;Implementing the 3rd endpoint&lt;/h1&gt;
&lt;p&gt;The 3rd endpoint serves a list of articles, related to a specific RSS channel. In a request, we specify RSS channel by providing a link. On the application side, after receiving a request we execute the following query:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; title, article_link, description, pubDate &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; articles_by_rss_link &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; rss_link = RSS_LINK_FROM_REQUEST ;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;/h1&gt;
&lt;p&gt;For obtaining articles by RSS link we need to prepare a related statement first. Change &lt;code&gt;AppVerticle#prepareSelectArticlesByRssLink&lt;/code&gt; in this way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Future&lt;Void&gt; &lt;span class=&quot;hljs-title&quot;&gt;prepareSelectArticlesByRssLink&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Util.prepareQueryAndSetReference(client,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT title, article_link, description, pubDate FROM articles_by_rss_link WHERE rss_link = ? ;&quot;&lt;/span&gt;,
            selectArticlesByRssLink
    );
}&lt;/code&gt;&lt;/pre&gt; 

&lt;p&gt;And now, we can implement the &lt;code&gt;AppVerticle#getArticles&lt;/code&gt; method. Basically, it will use the &lt;code&gt;selectArticlesByRssLink&lt;/code&gt; statement for finding articles by the given link. Here’s the implementation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getArticles&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext ctx)&lt;/span&gt; &lt;/span&gt;{
    String link = ctx.request().getParam(&lt;span class=&quot;hljs-string&quot;&gt;&quot;link&quot;&lt;/span&gt;);
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (link == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {
        responseWithInvalidRequest(ctx);
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        client.executeWithFullFetch(selectArticlesByRssLink.bind(link), handler -&gt; {
            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (handler.succeeded()) {
                List&lt;Row&gt; rows = handler.result();

                JsonObject responseJson = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject();
                JsonArray articles = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonArray();

                rows.forEach(eachRow -&gt; articles.add(
                        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject()
                                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;title&quot;&lt;/span&gt;, eachRow.getString(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))
                                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;link&quot;&lt;/span&gt;, eachRow.getString(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))
                                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;description&quot;&lt;/span&gt;, eachRow.getString(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;))
                                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pub_date&quot;&lt;/span&gt;, eachRow.getTimestamp(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;).getTime())
                ));

                responseJson.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;articles&quot;&lt;/span&gt;, articles);
                ctx.response().end(responseJson.toString());
            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
                log.error(&lt;span class=&quot;hljs-string&quot;&gt;&quot;failed to get articles for &quot;&lt;/span&gt; + link, handler.cause());
                ctx.response().setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;).end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to retrieve the info from C*&quot;&lt;/span&gt;);
            }
        });
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;During the series we have showed how the RSS reader app can be implemented with &lt;a href=&quot;https://github.com/vert-x3/vertx-cassandra-client&quot;&gt;Vert.x Cassandra client&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for reading this. I hope you enjoyed reading this series. See you soon on our &lt;a href=&quot;https://gitter.im/eclipse-vertx/vertx-users&quot;&gt;Gitter channel&lt;/a&gt;!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Thu, 06 Dec 2018 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/the-rss-reader-tutorial-step-3</link>
          <guid isPermaLink="true">https://vertx.io/blog/the-rss-reader-tutorial-step-3</guid>
          <author>
            <name>Sammers21</name>
            <uri>http://github.com/Sammers21</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 3.6.0 released !</title>
          <description>
      &lt;article&gt;&lt;p&gt;We are pleased to announce the Eclipse Vert.x 3.6.0 release.&lt;/p&gt;
&lt;p&gt;As always, the community contributions have been key in achieving this milestone. 
To all of you who participated: thank you, you are awesome!&lt;/p&gt;
&lt;p&gt;Without further ado, let’s take a look at some of the most exciting new features and enhancements.  &lt;/p&gt;
&lt;h4 id=&quot;vert-x-cassandra-client&quot;&gt;Vert.x Cassandra client&lt;/h4&gt;
&lt;p&gt;In this release we introduce the &lt;a href=&quot;https://github.com/vert-x3/vertx-cassandra-client&quot;&gt;Vert.x Cassandra client&lt;/a&gt;, an extension for interation with &lt;a href=&quot;http://cassandra.apache.org/&quot;&gt;Apache Cassandra&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The client supports:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prepared queries&lt;/li&gt;
&lt;li&gt;batching&lt;/li&gt;
&lt;li&gt;query streaming&lt;/li&gt;
&lt;li&gt;bulk fetching&lt;/li&gt;
&lt;li&gt;low level fetching&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To give you an idea of how the API usage may looks like, we provide this example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;cassandraClient.queryStream(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT my_string_col FROM my_keyspace.my_table where my_key = &#39;my_value&#39;&quot;&lt;/span&gt;, queryStream -&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (queryStream.succeeded()) {
    CassandraRowStream stream = queryStream.result();

    &lt;span class=&quot;hljs-comment&quot;&gt;// resume stream when queue is ready to accept buffers again&lt;/span&gt;
    response.drainHandler(v -&gt; stream.resume());

    stream.handler(row -&gt; {
        String value = row.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;my_string_col&quot;&lt;/span&gt;);
        response.write(value);

        &lt;span class=&quot;hljs-comment&quot;&gt;// pause row stream when we buffer queue is full&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (response.writeQueueFull()) {
        stream.pause();
        }
    });

    &lt;span class=&quot;hljs-comment&quot;&gt;// end request when we reached end of the stream&lt;/span&gt;
    stream.endHandler(end -&gt; response.end());

    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    queryStream.cause().printStackTrace();
    &lt;span class=&quot;hljs-comment&quot;&gt;// response with internal server error if we are not able to execute given query&lt;/span&gt;
    response
        .setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;)
        .end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to execute the query&quot;&lt;/span&gt;);
    }
});&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;vert-x-for-kotlin&quot;&gt;Vert.x for Kotlin&lt;/h4&gt;
&lt;p&gt;Vert.x for Kotlin has been updated to the very recent Kotlin 1.3 (and coroutines 1.0).&lt;/p&gt;
&lt;p&gt;Vert.x 3.5 introduced a powerful way to write synchronous non-blocking code with Kotlin coroutines:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;val &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; = awaitResult&lt;&lt;span class=&quot;hljs-type&quot;&gt;ResultSet&lt;/span&gt;&gt; { client.queryWithParams(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT TITLE FROM MOVIE WHERE ID=?&quot;&lt;/span&gt;, json { &lt;span class=&quot;hljs-type&quot;&gt;array&lt;/span&gt;(id) }, it) };&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this release, &lt;code&gt;awaitResult&lt;/code&gt; idiom as extension methods are provided, so now you can directly write:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;val &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; = client.queryWithParamsAwait(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT TITLE FROM MOVIE WHERE ID=?&quot;&lt;/span&gt;, json { &lt;span class=&quot;hljs-type&quot;&gt;array&lt;/span&gt;(id) })&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the &lt;code&gt;Await&lt;/code&gt; suffix: all Vert.x asynchronous methods provide now an &lt;em&gt;awaitified&lt;/em&gt; extension.&lt;/p&gt;
&lt;h4 id=&quot;web-api-gateways&quot;&gt;Web API gateways&lt;/h4&gt;
&lt;p&gt;The new &lt;a href=&quot;https://vertx.io/docs/vertx-web-api-service/java/&quot;&gt;Vert.x Web API Service&lt;/a&gt; module allows you to
 create &lt;a href=&quot;https://vertx.io/docs/vertx-web-api-contract/java/&quot;&gt;Vert.x Web API Contract&lt;/a&gt; gateways.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blog/vertx-web-api-service/vertx-web-api-service.png&quot; alt=&quot;Web API Service Architecture&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@WebApiServiceGen&lt;/code&gt; can annotate your service interface to handle
&lt;a href=&quot;https://www.openapis.org/&quot;&gt;OpenAPI 3&lt;/a&gt;: &lt;a href=&quot;https://vertx.io/docs/vertx-web-api-service/java/&quot;&gt;Vert.x Web API Service&lt;/a&gt;
requests:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@WebApiServiceGen&lt;/span&gt;
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TransactionService&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getTransactionsList&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String from, String to, OperationRequest context, Handler&lt;AsyncResult&lt;OperationResponse&gt;&gt; resultHandler)&lt;/span&gt;&lt;/span&gt;;

  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;putTransaction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(JsonObject body, OperationRequest context, Handler&lt;AsyncResult&lt;OperationResponse&gt;&gt; resultHandler)&lt;/span&gt;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;OpenAPI3RouterFactory&lt;/code&gt; web router becomes an API gateway sending requests directly to your services.&lt;/p&gt;
&lt;p&gt;These services are powered by the Vert.x &lt;a href=&quot;https://vertx.io/docs/vertx-core/java/#event_bus&quot;&gt;event bus&lt;/a&gt; and benefits
 from features like load balancing and clustering.&lt;/p&gt;
&lt;p&gt;Check the &lt;a href=&quot;https://vertx.io/docs/vertx-web-api-service/java/&quot;&gt;complete documentation&lt;/a&gt; for more details (a tutorial post is coming soon!)&lt;/p&gt;
&lt;h4 id=&quot;web-client&quot;&gt;Web Client&lt;/h4&gt;
&lt;p&gt;Our beloved &lt;a href=&quot;https://vertx.io/docs/vertx-web-client/java/&quot;&gt;WebClient&lt;/a&gt; is now capable of handling client sessions. The
&lt;code&gt;WebClientSession&lt;/code&gt; is a client extension that is very helpful when you need to manage cookies on the client side.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// The session is created per user&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// from now on cookies are handled by the session&lt;/span&gt;
WebClientSession session = WebClientSession.create(client);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cherry on the cake, the web client is now capable of performing server side response checks using &lt;em&gt;response predicates&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;client
  .get(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;myserver.mycompany.com&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/some-uri&quot;&lt;/span&gt;)
  .expect(ResponsePredicate.SC_SUCCESS)
  .expect(ResponsePredicate.JSON)
  .send(result -&gt; { ... });&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The server side response must validate the expectations defined before sending the request in order to make the response
successful, relieving the user code to perform these checks manually. Of course many out of box expecations are provided
and you can always create your own to implement custom checks.&lt;/p&gt;
&lt;h4 id=&quot;use-templating-everywhere&quot;&gt;Use templating everywhere&lt;/h4&gt;
&lt;p&gt;Template engines can now be used outside the realm of Vert.x Web.
One great use case is to use them to generate email content:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;TemplateEngine template = ...

template.render(new JsonObject(), &quot;my-template.txt, res -&gt; {
   // Send result with the Vert.x Mail client
});&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;openid-connect-discovery&quot;&gt;OpenID Connect Discovery&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://vertx.io/docs/vertx-auth-oauth2/java/&quot;&gt;Oauth2&lt;/a&gt; has been greatly enhanced to support more of OpenID Connect, the most noticible is the support of &lt;code&gt;OpenID Connect Discovery 1.0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What this means for the end user is that, configuration is now a trivial task, as it is “&lt;em&gt;discoverd&lt;/em&gt;“ from the server, e.g.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;OpenIDConnectAuth.discover(vertx,
  &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; OAuth2ClientOptions()
    .setSite(&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://accounts.google.com&quot;&lt;/span&gt;)
    .setClientID(&lt;span class=&quot;hljs-string&quot;&gt;&quot;clientId&quot;&lt;/span&gt;),
  res -&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (res.succeeded()) {
      &lt;span class=&quot;hljs-comment&quot;&gt;// the setup call succeeded.&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// at this moment your auth is ready to use and&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// google signature keys are loaded so tokens can be decoded and verified.&lt;/span&gt;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;hljs-comment&quot;&gt;// the setup failed.&lt;/span&gt;
    }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you know your &lt;strong&gt;clientId&lt;/strong&gt; and your provider server URL (of course), all the remaining endoints, key signature algorithms and &lt;em&gt;JSON Web Keys&lt;/em&gt; are “discovered” for you and
configured to the auth provider.&lt;/p&gt;
&lt;h4 id=&quot;password-hashing-strategy&quot;&gt;Password Hashing strategy&lt;/h4&gt;
&lt;p&gt;Vert.x auth components now support user defined password hashing strategies, If you’re not happy with the provided implementations: &lt;code&gt;SHA512&lt;/code&gt; or &lt;code&gt;PKDBF2&lt;/code&gt; you can now provide your own strategy
so it can be used with &lt;code&gt;JDBC&lt;/code&gt; or &lt;code&gt;Mongo&lt;/code&gt; auth.&lt;/p&gt;
&lt;p&gt;The hash verification algorithm has been improved to be time constant, regardless of the result, which protects Vert.x
applications from hash timing attacks.&lt;/p&gt;
&lt;h4 id=&quot;externalized-configuration-of-vert-x-options&quot;&gt;Externalized configuration of Vert.x options&lt;/h4&gt;
&lt;p&gt;Whether you run your Vert.x app with the CLI or as an executable JAR with the &lt;code&gt;Launcher&lt;/code&gt;, you can now provide Vert.x
options as a command line parameter:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;java -jar &lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt;-app.jar -options /path/&lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt;/&lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt;/&lt;span class=&quot;hljs-type&quot;&gt;file&lt;/span&gt;.json&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or with the CLI:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;vertx &lt;span class=&quot;hljs-command&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt;-verticle.js -options /path/&lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt;/&lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt;/&lt;span class=&quot;hljs-type&quot;&gt;file&lt;/span&gt;.json&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is particularly useful for complex clustered event-bus setups (encryption, public host vs cluster host…).&lt;/p&gt;
&lt;h4 id=&quot;and-more-&quot;&gt;And more…&lt;/h4&gt;
&lt;p&gt;Here are some other important improvements you can find in this release:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 11 support (unless a Vert.x module depends on a third-party dependency that does not support it yet)&lt;/li&gt;
&lt;li&gt;Hazelcast Cluster Manager &lt;a href=&quot;/docs/vertx-hazelcast/java/#_using_lite_members&quot;&gt;support for lite members&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/simplified-database-transaction-management-with-the-vert-x-rxjava-api/&quot;&gt;Simplified database transaction management&lt;/a&gt; with the Vert.x &lt;em&gt;Rxified&lt;/em&gt; API&lt;/li&gt;
&lt;li&gt;Event-bus interceptors&lt;/li&gt;
&lt;li&gt;Documentation improvements&lt;ul&gt;
&lt;li&gt;Cluster administration with &lt;a href=&quot;/docs/vertx-infinispan/java/#_cluster_administration&quot;&gt;Infinispan&lt;/a&gt; and &lt;a href=&quot;/docs/vertx-hazelcast/java/#_cluster_administration&quot;&gt;Hazelcast&lt;/a&gt; cluster managers&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Rxified&lt;/em&gt; API in the Vert.x &lt;a href=&quot;/docs/vertx-kafka-client/java/#_rxjava_2_api&quot;&gt;Kafka&lt;/a&gt;, &lt;a href=&quot;/docs/vertx-web-client/java/#_rxjava_2_api&quot;&gt;Web&lt;/a&gt; and &lt;a href=&quot;/docs/vertx-mongo-client/java/#_rxjava_2_api&quot;&gt;Mongo&lt;/a&gt; clients&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Performance improvements&lt;/li&gt;
&lt;li&gt;And obviously we have the usual bug fixes!&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;finally&quot;&gt;Finally&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.6.0-Release-Notes&quot;&gt;3.6.0 release notes&lt;/a&gt; can be found on the wiki, as well as the list of &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.6.0-Deprecations-and-breaking-changes&quot;&gt;deprecations and breaking changes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker images are available on &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Vert.x distribution can be downloaded on the website but is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge is available from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;NPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;Bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;WebJars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The release artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.6.0%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.6.0/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That’s it! Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 03 Dec 2018 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-3-6-0-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-6-0-released</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 3.5.4</title>
          <description>
      &lt;article&gt;&lt;p&gt;We have just released Vert.x 3.5.4, a bug fix release of Vert.x 3.5.x.&lt;/p&gt;
&lt;p&gt;Since the release of Vert.x 3.5.3, quite a few bugs have been reported. We would like to thank you all for reporting these issues.&lt;/p&gt;
&lt;p&gt;Three CVE have also been reported and fixed in this release:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse-vertx/vert.x/issues/2648&quot;&gt;CVE-2018-12541&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-web/issues/1025&quot;&gt;CVE-2018-12542&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-web/issues/1021&quot;&gt;CVE-2018-12544&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vert.x 3.5.4 release notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.5.4-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.5.4-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.5.4%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.5.4/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Wed, 03 Oct 2018 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-3-5-4</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-5-4</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>The RSS reader tutorial. Step 2.</title>
          <description>
      &lt;article&gt;&lt;h1 id=&quot;quick-recap&quot;&gt;Quick recap&lt;/h1&gt;
&lt;p&gt;In &lt;a href=&quot;https://vertx.io/blog/the-rss-reader-tutorial/&quot;&gt;the previous step&lt;/a&gt; we have successfully implemented the first endpoint 
of the RSS reader app.&lt;/p&gt;
&lt;p&gt;The RSS reader example assumes implementing 3 endpoints. This article is dedicated to implementing the &lt;code&gt;GET /user/{user_id}/rss_channels&lt;/code&gt; endpoint.&lt;/p&gt;
&lt;p&gt;Before completing this step, make sure your are in the &lt;code&gt;step_2&lt;/code&gt; git branch:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;git checkout step_2&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;implementing-the-second-endpoint&quot;&gt;Implementing the second endpoint&lt;/h1&gt;
&lt;p&gt;The second endpoint produces an array of RSS channels by given &lt;code&gt;user_id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We need to execute the two following queries to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fetch RSS links for a given user: &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; rss_link &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; rss_by_user &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; login = GIVEN_USER_ID ;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Fetch RSS channel details for a given link: &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; description, title, site_link, rss_link &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; channel_info_by_rss_link &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; rss_link = GIVEN_LINK ;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;/h1&gt;
&lt;p&gt;The endpoint allows the the front-end app to display the list of RSS feeds a user subscribed on. When the endpoint is accessed, the &lt;code&gt;AppVerticle#getRssChannels&lt;/code&gt; method is called. We can implement this method in this way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getRssChannels&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext ctx)&lt;/span&gt; &lt;/span&gt;{
    String userId = ctx.request().getParam(&lt;span class=&quot;hljs-string&quot;&gt;&quot;user_id&quot;&lt;/span&gt;);
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (userId == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {
        responseWithInvalidRequest(ctx);
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        Future&lt;List&lt;Row&gt;&gt; future = Future.future();
        client.executeWithFullFetch(selectRssLinksByLogin.bind(userId), future);
        future.compose(rows -&gt; {
            List&lt;String&gt; links = rows.stream()
                    .map(row -&gt; row.getString(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))
                    .collect(Collectors.toList());

            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; CompositeFuture.all(
                    links.stream().map(selectChannelInfo::bind).map(statement -&gt; {
                        Future&lt;List&lt;Row&gt;&gt; channelInfoRow = Future.future();
                        client.executeWithFullFetch(statement, channelInfoRow);
                        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; channelInfoRow;
                    }).collect(Collectors.toList())
            );
        }).setHandler(h -&gt; {
            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (h.succeeded()) {
                CompositeFuture result = h.result();
                List&lt;List&lt;Row&gt;&gt; results = result.list();
                List&lt;Row&gt; list = results.stream()
                        .flatMap(List::stream)
                        .collect(Collectors.toList());
                JsonObject responseJson = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject();
                JsonArray channels = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonArray();

                list.forEach(eachRow -&gt; channels.add(
                        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject()
                                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;description&quot;&lt;/span&gt;, eachRow.getString(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))
                                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;title&quot;&lt;/span&gt;, eachRow.getString(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))
                                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;link&quot;&lt;/span&gt;, eachRow.getString(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;))
                                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rss_link&quot;&lt;/span&gt;, eachRow.getString(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;))
                ));

                responseJson.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;channels&quot;&lt;/span&gt;, channels);
                ctx.response().end(responseJson.toString());
            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
                log.error(&lt;span class=&quot;hljs-string&quot;&gt;&quot;failed to get rss channels&quot;&lt;/span&gt;, h.cause());
                ctx.response().setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;).end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to retrieve the info from C*&quot;&lt;/span&gt;);
            }
        });
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, this method uses &lt;code&gt;selectChannelInfo&lt;/code&gt; and &lt;code&gt;selectRssLinksByLogin&lt;/code&gt; fields, they should be initialized in the &lt;code&gt;AppVerticle#prepareNecessaryQueries&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Future&lt;Void&gt; &lt;span class=&quot;hljs-title&quot;&gt;prepareNecessaryQueries&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
        Future&lt;PreparedStatement&gt; selectChannelInfoPrepFuture = Future.future();
        client.prepare(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT description, title, site_link, rss_link FROM channel_info_by_rss_link WHERE rss_link = ? ;&quot;&lt;/span&gt;, selectChannelInfoPrepFuture);

        Future&lt;PreparedStatement&gt; selectRssLinkByLoginPrepFuture = Future.future();
        client.prepare(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT rss_link FROM rss_by_user WHERE login = ? ;&quot;&lt;/span&gt;, selectRssLinkByLoginPrepFuture);

        Future&lt;PreparedStatement&gt; insertNewLinkForUserPrepFuture = Future.future();
        client.prepare(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO rss_by_user (login , rss_link ) VALUES ( ?, ?);&quot;&lt;/span&gt;, insertNewLinkForUserPrepFuture);

        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; CompositeFuture.all(
                selectChannelInfoPrepFuture.compose(preparedStatement -&gt; {
                    selectChannelInfo = preparedStatement;
                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Future.succeededFuture();
                }),
                selectRssLinkByLoginPrepFuture.compose(preparedStatement -&gt; {
                    selectRssLinksByLogin = preparedStatement;
                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Future.succeededFuture();
                }),
                insertNewLinkForUserPrepFuture.compose(preparedStatement -&gt; {
                    insertNewLinkForUser = preparedStatement;
                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Future.succeededFuture();
                })
        ).mapEmpty();
    }&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In this part, we have successfully implemented the second endpoint, which allows the browser app to obtain channels information for a specific user. To ensure that it is working fine, point your browser to &lt;code&gt;localhost:8080&lt;/code&gt; and click to the refresh button. Channel list should appear immediately.&lt;/p&gt;
&lt;p&gt;If you have any problems with completing this step you can checkout to &lt;code&gt;step_3&lt;/code&gt;, where you can find all changes made for completing this step:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;git checkout step_3&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Thanks for reading this. I hope you enjoyed reading this article. See you soon on our &lt;a href=&quot;https://gitter.im/eclipse-vertx/vertx-users&quot;&gt;Gitter channel&lt;/a&gt;!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Wed, 05 Sep 2018 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/the-rss-reader-tutorial-step-2</link>
          <guid isPermaLink="true">https://vertx.io/blog/the-rss-reader-tutorial-step-2</guid>
          <author>
            <name>Sammers21</name>
            <uri>http://github.com/Sammers21</uri>
          </author>
        </item>
      
        <item>
          <title>The RSS reader tutorial</title>
          <description>
      &lt;article&gt;&lt;h1 id=&quot;the-rss-reader-tutorial&quot;&gt;The RSS reader tutorial&lt;/h1&gt;
&lt;p&gt;This tutorial is dedicated for users who’d like to know how to use the Eclipse Vert.x Cassandra client with in practice.&lt;/p&gt;
&lt;h1 id=&quot;before-you-start-this-tutorial&quot;&gt;Before you start this tutorial&lt;/h1&gt;
&lt;p&gt;Before starting, you should :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;be familiar with &lt;a href=&quot;https://vertx.io/&quot;&gt;Eclipse Vert.x&lt;/a&gt;. If you are not, here is the &lt;a href=&quot;https://vertx.io/docs/guide-for-java-devs/&quot;&gt;guide for Java developers&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;have some basic understanding of databases. Extended knowledge of Cassandra is not required.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You also may find it useful to read &lt;a href=&quot;https://validator.w3.org/feed/docs/rss2.html&quot;&gt;the RSS 2.0&lt;/a&gt; specification, because the resulted app is, basically, a storage of RSS 2.0 feeds.&lt;/p&gt;
&lt;p&gt;To give you an idea of what the App is about, here is how it looks like from the fronted side:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/2V954zx.png&quot; alt=&quot;see how it looks&quot;&gt;&lt;/p&gt;
&lt;p&gt;On the image we see that browser space is split into 2 parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Saved feed names&lt;/li&gt;
&lt;li&gt;List of articles for the selected feed&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here you also can enter a link to a new feed, so the App will fetch and parse the feed.
After that, it will appear in the left column along with other saved feeds.&lt;/p&gt;
&lt;h1 id=&quot;requirements&quot;&gt;Requirements&lt;/h1&gt;
&lt;p&gt;For completing this tutorial you need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 8 or higher&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;1 hour of your time&lt;/li&gt;
&lt;li&gt;You favorite code editor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For running the example you should ensure that Cassandra service is running locally on port 9042.
As an option, you can run Cassandra with &lt;a href=&quot;https://github.com/riptano/ccm#installation&quot;&gt;ccm&lt;/a&gt;(Cassandra Cluster Manager).
Follow &lt;a href=&quot;https://github.com/riptano/ccm#installation&quot;&gt;this&lt;/a&gt; instructions for installing ccm.
After installing you will be able to run a single node cluster:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;ccm create rss_reader -v &lt;span class=&quot;hljs-number&quot;&gt;3.11&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; -n &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;-s&lt;/span&gt;
ccm start&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before completing this step make sure that you have successfully cloned the RSS reader repository and checked out the &lt;code&gt;step_1&lt;/code&gt; branch:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;git clone https://github.com/Sammers21/rss-reader
&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; rss-reader
git checkout step_1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can try to tun this example and see if it works:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;./gradlew vertxRun&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;schema&quot;&gt;Schema&lt;/h2&gt;
&lt;p&gt;If you are familiar with &lt;a href=&quot;http://cassandra.apache.org/&quot;&gt;Apache Cassandra&lt;/a&gt; you
should know that the way your data is stored in Cassandra is dependent on queries
you are running. It means that you need first to figure out what kind of queries
you will be running, and then you can produce a storage scheme.&lt;/p&gt;
&lt;p&gt;In our case we’d like our application to have 3 endpoints:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;POST /user/{user_id}/rss_link&lt;/code&gt; - for adding links to a user’s feed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET /user/{user_id}/rss_channels&lt;/code&gt; - for retrieving information about RSS channels a user subscribed on&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET /articles/by_rss_link?link={rss_link}&lt;/code&gt; - for retrieving information about articles on a specific RSS channel&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For implementing this endpoints the schema should look in this way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; rss_by_user (login &lt;span class=&quot;hljs-built_in&quot;&gt;text&lt;/span&gt; , rss_link &lt;span class=&quot;hljs-built_in&quot;&gt;text&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;KEY&lt;/span&gt; (login, rss_link));&lt;/span&gt;
&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; articles_by_rss_link(rss_link &lt;span class=&quot;hljs-built_in&quot;&gt;text&lt;/span&gt;, pubDate &lt;span class=&quot;hljs-keyword&quot;&gt;timestamp&lt;/span&gt;, title &lt;span class=&quot;hljs-built_in&quot;&gt;text&lt;/span&gt;, article_link &lt;span class=&quot;hljs-built_in&quot;&gt;text&lt;/span&gt;, description &lt;span class=&quot;hljs-built_in&quot;&gt;text&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;KEY&lt;/span&gt; ( rss_link , pubDate , article_link));&lt;/span&gt;
&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; channel_info_by_rss_link(rss_link &lt;span class=&quot;hljs-built_in&quot;&gt;text&lt;/span&gt;, last_fetch_time &lt;span class=&quot;hljs-keyword&quot;&gt;timestamp&lt;/span&gt;,title &lt;span class=&quot;hljs-built_in&quot;&gt;text&lt;/span&gt;, site_link &lt;span class=&quot;hljs-built_in&quot;&gt;text&lt;/span&gt;, description &lt;span class=&quot;hljs-built_in&quot;&gt;text&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;KEY&lt;/span&gt;(rss_link));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;what-to-do-in-this-step&quot;&gt;What to do in this step&lt;/h2&gt;
&lt;p&gt;In this step we will implement only the first endpoint&lt;/p&gt;
&lt;h2 id=&quot;project-overview&quot;&gt;Project overview&lt;/h2&gt;
&lt;p&gt;There are two notable classes in the project: &lt;code&gt;AppVerticle&lt;/code&gt; and &lt;code&gt;FetchVerticle&lt;/code&gt;. The first one is a &lt;a href=&quot;https://vertx.io/docs/vertx-core/java/#_verticles&quot;&gt;Verticle&lt;/a&gt; responsible for HTTP request handling and storage schema initialization. The second one is a &lt;a href=&quot;https://vertx.io/docs/vertx-core/java/#_verticles&quot;&gt;Verticle&lt;/a&gt; as well, but responsible for RSS feeds fetching.&lt;/p&gt;
&lt;p&gt;The idea is simple. When the application is starting the &lt;code&gt;AppVerticle&lt;/code&gt; is deployed, then it tries to initialize storage schema, described in &lt;code&gt;src/main/resources/schema.cql&lt;/code&gt; file by reading it and executing listed queries line by line. After the schema initialization the &lt;code&gt;AppVerticle&lt;/code&gt; deploys &lt;code&gt;FetchVerticle&lt;/code&gt; and starts a HTTP server.&lt;/p&gt;
&lt;h2 id=&quot;implementing-the-endpoint&quot;&gt;Implementing the endpoint&lt;/h2&gt;
&lt;p&gt;Now, it is time to implement the first endpoint. Pay attention to &lt;code&gt;TODO&lt;/code&gt;s, they are for pointing you out about where changes should be made.&lt;/p&gt;
&lt;p&gt;Now, let’s have a look at the &lt;code&gt;AppVerticle#postRssLink&lt;/code&gt; method. This method is called each time the first endpoint is called, so we can figure out what is the posted body and id of the user, who performed the request, directly there. There are 2 main things we want to do in this method:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Notifying via the &lt;a href=&quot;https://vertx.io/docs/vertx-core/java/#event_bus&quot;&gt;Event Bus&lt;/a&gt; the &lt;code&gt;FetchVerticle&lt;/code&gt; to fetch given by user link link to an RSS feed.&lt;/li&gt;
&lt;li&gt;Inserting an entry to the &lt;code&gt;rss_by_user&lt;/code&gt; table.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is how the &lt;code&gt;AppVerticle#postRssLink&lt;/code&gt; method should be implemented:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;postRssLink&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext ctx)&lt;/span&gt; &lt;/span&gt;{
    ctx.request().bodyHandler(body -&gt; {
        JsonObject bodyAsJson = body.toJsonObject();
        String link = bodyAsJson.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;link&quot;&lt;/span&gt;);
        String userId = ctx.request().getParam(&lt;span class=&quot;hljs-string&quot;&gt;&quot;user_id&quot;&lt;/span&gt;);
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (link == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; || userId == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {
            responseWithInvalidRequest(ctx);
        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
            vertx.eventBus().send(&lt;span class=&quot;hljs-string&quot;&gt;&quot;fetch.rss.link&quot;&lt;/span&gt;, link);
            Future&lt;ResultSet&gt; future = Future.future();
            BoundStatement query = insertNewLinkForUser.bind(userId, link);
            client.execute(query, future);
            future.setHandler(result -&gt; {
                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (result.succeeded()) {
                    ctx.response().end(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject().put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;The feed just added&quot;&lt;/span&gt;).toString());
                } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
                    ctx.response().setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt;).end(result.cause().getMessage());
                }
            });
        }
    });
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;responseWithInvalidRequest&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext ctx)&lt;/span&gt; &lt;/span&gt;{
    ctx.response()
            .setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt;)
            .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json; charset=utf-8&quot;&lt;/span&gt;)
            .end(invalidRequest().toString());
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; JsonObject &lt;span class=&quot;hljs-title&quot;&gt;invalidRequest&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;JsonObject&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid request&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may notice that &lt;code&gt;insertNewLinkForUser&lt;/code&gt; is a &lt;code&gt;PreparedStatement&lt;/code&gt;, and should be initialized before the &lt;code&gt;AppVerticle&lt;/code&gt; start. Let’s do it in the &lt;code&gt;AppVerticle#prepareNecessaryQueries&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Future&lt;Void&gt; &lt;span class=&quot;hljs-title&quot;&gt;prepareNecessaryQueries&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    Future&lt;PreparedStatement&gt; insertNewLinkForUserPrepFuture = Future.future();
    client.prepare(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO rss_by_user (login , rss_link ) VALUES ( ?, ?);&quot;&lt;/span&gt;, insertNewLinkForUserPrepFuture);

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; insertNewLinkForUserPrepFuture.compose(preparedStatement -&gt; {
        insertNewLinkForUser = preparedStatement;
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Future.succeededFuture();
    });
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, we should not forget to fetch a RSS by the link sent to &lt;code&gt;FetchVerticle&lt;/code&gt; via the Event Bus. We can do it in the &lt;code&gt;FetchVerticle#startFetchEventBusConsumer&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;vertx.eventBus().localConsumer(&lt;span class=&quot;hljs-string&quot;&gt;&quot;fetch.rss.link&quot;&lt;/span&gt;, message -&gt; {
    String rssLink = (String) message.body();
    log.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;fetching &quot;&lt;/span&gt; + rssLink);
    webClient.getAbs(rssLink).send(response -&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (response.succeeded()) {
            String bodyAsString = response.result().bodyAsString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);
            &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
                RssChannel rssChannel = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; RssChannel(bodyAsString);

                BatchStatement batchStatement = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BatchStatement();
                BoundStatement channelInfoInsertQuery = insertChannelInfo.bind(
                        rssLink, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Date(System.currentTimeMillis()), rssChannel.description, rssChannel.link, rssChannel.title
                );
                batchStatement.add(channelInfoInsertQuery);

                &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Article article : rssChannel.articles) {
                    batchStatement.add(insertArticleInfo.bind(rssLink, article.pubDate, article.link, article.description, article.title));
                }
                Future&lt;ResultSet&gt; insertArticlesFuture = Future.future();
                cassandraClient.execute(batchStatement, insertArticlesFuture);

                insertArticlesFuture.compose(insertDone -&gt; Future.succeededFuture());
            } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {
                log.error(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to fetch: &quot;&lt;/span&gt; + rssLink, e);
            }
        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
            log.error(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to fetch: &quot;&lt;/span&gt; + rssLink);
        }
    });
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, finally, this code would not work if &lt;code&gt;insertChannelInfo&lt;/code&gt; and &lt;code&gt;insertArticleInfo&lt;/code&gt; statements will not be initialized at verticle start. Let’s to this in the &lt;code&gt;FetchVerticle#prepareNecessaryQueries&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Future&lt;Void&gt; &lt;span class=&quot;hljs-title&quot;&gt;prepareNecessaryQueries&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
        Future&lt;PreparedStatement&gt; insertChannelInfoPrepFuture = Future.future();
        cassandraClient.prepare(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO channel_info_by_rss_link ( rss_link , last_fetch_time, description , site_link , title ) VALUES (?, ?, ?, ?, ?);&quot;&lt;/span&gt;, insertChannelInfoPrepFuture);

        Future&lt;PreparedStatement&gt; insertArticleInfoPrepFuture = Future.future();
        cassandraClient.prepare(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO articles_by_rss_link ( rss_link , pubdate , article_link , description , title ) VALUES ( ?, ?, ?, ?, ?);&quot;&lt;/span&gt;, insertArticleInfoPrepFuture);

        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; CompositeFuture.all(
                insertChannelInfoPrepFuture.compose(preparedStatement -&gt; {
                    insertChannelInfo = preparedStatement;
                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Future.succeededFuture();
                }), insertArticleInfoPrepFuture.compose(preparedStatement -&gt; {
                    insertArticleInfo = preparedStatement;
                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Future.succeededFuture();
                })
        ).mapEmpty();
    }&lt;/code&gt;&lt;/pre&gt;


&lt;h1 id=&quot;observing&quot;&gt;Observing&lt;/h1&gt;
&lt;p&gt;After all this changes you should ensure that the first endpoint is working correctly. So you need to run the application, go to localhost:8080 insert a link to a rss feed there(&lt;a href=&quot;http://feeds.bbci.co.uk/news/uk/rss.xml&quot;&gt;BBC UK feed news&lt;/a&gt; for example) and then click the &lt;em&gt;ENTER&lt;/em&gt; button. Now you can connect to your local Cassandra instance, for instance with &lt;a href=&quot;https://docs.datastax.com/en/cql/3.3/cql/cql_reference/cqlsh.html&quot;&gt;cqlsh&lt;/a&gt;, and find out how RSS feed data had been saved in the rss_reader keyspace:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs sh&quot;&gt;cqlsh&gt; SELECT * FROM rss_reader.rss_by_user limit &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  ;

 login | rss_link
-------+-----------------------------------------
 Pavel | http://feeds.bbci.co.uk/news/uk/rss.xml

(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; rows)
cqlsh&gt; SELECT description FROM rss_reader.articles_by_rss_link  limit &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;

 description
-------------------------------------
 BBC coverage of latest developments

(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; rows)&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In this article we figured out how to implement the first endpoint of RSS-reader app. If you have any problems with completing this step you can checkout to &lt;code&gt;step_2&lt;/code&gt;, where you can find all changes made for completing this step:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;git checkout step_2&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Thanks for reading this. I hope you enjoyed reading this article. See you soon on our &lt;a href=&quot;https://gitter.im/eclipse-vertx/vertx-users&quot;&gt;Gitter channel&lt;/a&gt;!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 20 Aug 2018 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/the-rss-reader-tutorial</link>
          <guid isPermaLink="true">https://vertx.io/blog/the-rss-reader-tutorial</guid>
          <author>
            <name>Sammers21</name>
            <uri>http://github.com/Sammers21</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 3.5.3</title>
          <description>
      &lt;article&gt;&lt;p&gt;We have just released Vert.x 3.5.3, a bug fix release of Vert.x 3.5.x.&lt;/p&gt;
&lt;p&gt;Since the release of Vert.x 3.5.2, quite a few bugs have been reported. We would like to thank you all for reporting these issues.&lt;/p&gt;
&lt;p&gt;Vert.x 3.5.3 release notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.5.3-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.5.3-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.5.2%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.5.2/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Fri, 13 Jul 2018 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-3-5-3</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-5-3</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Simplified database transaction management with the Vert.x RxJava API</title>
          <description>
      &lt;article&gt;&lt;p&gt;&lt;em&gt;TL;DR As of 3.5, managing database transactions with Vert.x requires a lot of boilerplate code.&lt;/em&gt;
&lt;em&gt;Vert.x 3.6 will provide helpers and &lt;code&gt;Observable&lt;/code&gt; transformers to easily make a reactive flow transactional.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;simple-queries-with-the-_-rxified-_-api&quot;&gt;Simple queries with the &lt;em&gt;“Rxified”&lt;/em&gt; API&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://vertx.io/docs/vertx-rx/java2/&quot;&gt;Vert.x API for RxJava&lt;/a&gt; is one of the most popular modules in the Vert.x stack.&lt;/p&gt;
&lt;p&gt;So we make sure the &lt;em&gt;“Rxified”&lt;/em&gt; API is easy to use for common programming tasks, such as reading rows from a relational database and sending the result to the client:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;dbClient.rxQuery(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT name, duration FROM tracks WHERE album = &#39;The Israelites&#39;&quot;&lt;/span&gt;)
  .map(ResultSet::getResults)
  .map(rows -&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Transform DB rows into a client-friendly JSON object&lt;/span&gt;
  })
  .subscribe(json -&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Send JSON to the client&lt;/span&gt;
  }, t -&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Send error to the client&lt;/span&gt;
  });&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;managing-transactions-with-vert-x-3-5&quot;&gt;Managing transactions with Vert.x 3.5&lt;/h2&gt;
&lt;p&gt;But very often, developers have to implement complex interactions with the database, running inside a single transaction.
To do so, the implementation must follow this process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get a connection from the pool,&lt;/li&gt;
&lt;li&gt;start a transaction,&lt;/li&gt;
&lt;li&gt;execute queries,&lt;/li&gt;
&lt;li&gt;if all queries succeed, commit the transaction,&lt;/li&gt;
&lt;li&gt;otherwise, rollback the changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How does that translate to code?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Get a connection from the pool&lt;/span&gt;
dbClient.rxGetConnection().flatMap(sqlConnection -&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Setting auto-commit mode to false implicitely starts a transaction&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sqlConnection.rxSetAutoCommit(&lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;)
    .andThen(
      &lt;span class=&quot;hljs-comment&quot;&gt;// Database queries&lt;/span&gt;
      sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO albums (name) VALUES (&#39;The Israelites&#39;)&quot;&lt;/span&gt;)
        .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES (&#39;The Israelites&#39;, &#39;Israelites&#39;)&quot;&lt;/span&gt;))
        .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES (&#39;The Israelites&#39;, &#39;Too Much Too Soon&#39;)&quot;&lt;/span&gt;))
        .andThen(sqlConnection.rxQuery(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT name FROM tracks WHERE album = &#39;The Israelites&#39;&quot;&lt;/span&gt;).map(ResultSet::getResults))
    )
    &lt;span class=&quot;hljs-comment&quot;&gt;// Commit if all queries succeed&lt;/span&gt;
    .flatMap(rows -&gt; sqlConnection.rxCommit().andThen(Single.just(rows)))
    .onErrorResumeNext(throwable -&gt; {
      &lt;span class=&quot;hljs-comment&quot;&gt;// On error, rollback the changes&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sqlConnection.rxRollback().onErrorComplete()
        .andThen(sqlConnection.rxSetAutoCommit(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;).onErrorComplete())
        .andThen(Single.error(throwable));
    }).flatMap(rows -&gt; sqlConnection.rxSetAutoCommit(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;).andThen(Single.just(rows)))
    .doFinally(sqlConnection::close);
}).map(rows -&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Transform DB rows into a client-friendly JSON object&lt;/span&gt;
}).subscribe(json -&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send JSON to the client&lt;/span&gt;
}, t -&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send error to the client&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is a lot of boilerplate around the specific database queries…
It would be better to relieve the developer from maintaining it.&lt;/p&gt;
&lt;h2 id=&quot;vert-x-3-6-tools-for-transaction-management&quot;&gt;Vert.x 3.6 tools for transaction management&lt;/h2&gt;
&lt;p&gt;That is why Vert.x 3.6 will provide &lt;em&gt;&lt;code&gt;Observable&lt;/code&gt; transformers&lt;/em&gt; that can be applied to reactive flows with &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/io/reactivex/Flowable.html#compose-io.reactivex.FlowableTransformer-&quot;&gt;&lt;code&gt;compose&lt;/code&gt;&lt;/a&gt; to make them transactional:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SQLClientHelper#txFlowableTransformer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQLClientHelper#txObservableTransformer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQLClientHelper#txSingleTransformer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQLClientHelper#txMaybeTransformer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQLClientHelper#txCompletableTransformer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These &lt;em&gt;transformers&lt;/em&gt; wrap the corresponding source of events with SQL transaction management.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;dbClient.rxGetConnection().flatMap(sqlConnection -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO albums (name) VALUES (&#39;The Israelites&#39;)&quot;&lt;/span&gt;)
    .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES (&#39;The Israelites&#39;, &#39;Israelites&#39;)&quot;&lt;/span&gt;))
    .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES (&#39;The Israelites&#39;, &#39;Too Much Too Soon&#39;)&quot;&lt;/span&gt;))
    .andThen(sqlConnection.rxQuery(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT name FROM tracks WHERE album = &#39;The Israelites&#39;&quot;&lt;/span&gt;).map(ResultSet::getResults))
    .compose(SQLClientHelper.txSingleTransformer(sqlConnection))
    .doFinally(sqlConnection::close);
}).map(rows -&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Transform DB rows into a client-friendly JSON object&lt;/span&gt;
}).subscribe(json -&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send JSON to the client&lt;/span&gt;
}, t -&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send error to the client&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Source &lt;em&gt;transformers&lt;/em&gt; provide maximum flexibility: you are still able to execute operations with the connection after the transaction completes.&lt;/p&gt;
&lt;p&gt;However, you usually do not need the connection after the changes are &lt;em&gt;commited&lt;/em&gt; or &lt;em&gt;rollbacked&lt;/em&gt;.
In this case, you may simply create you source observable with one of the transactional helper methods in &lt;code&gt;io.vertx.reactivex.ext.sql.SQLClientHelper&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s rewrite the previous example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;SQLClientHelper.inTransactionSingle(client, sqlConnection -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO albums (name) VALUES (&#39;The Israelites&#39;)&quot;&lt;/span&gt;)
    .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES (&#39;The Israelites&#39;, &#39;Israelites&#39;)&quot;&lt;/span&gt;))
    .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES (&#39;The Israelites&#39;, &#39;Too Much Too Soon&#39;)&quot;&lt;/span&gt;))
    .andThen(sqlConnection.rxQuery(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT name FROM tracks WHERE album = &#39;The Israelites&#39;&quot;&lt;/span&gt;).map(ResultSet::getResults))
}).map(rows -&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Transform DB rows into a client-friendly JSON object&lt;/span&gt;
}).subscribe(json -&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send JSON to the client&lt;/span&gt;
}, t -&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send error to the client&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;give-it-a-try&quot;&gt;Give it a try&lt;/h2&gt;
&lt;p&gt;Vert.x 3.6 is expected around fall, but the code is already in master and &lt;em&gt;snapshots&lt;/em&gt; are regularly published to Sonatype’s OSS repos.&lt;/p&gt;
&lt;p&gt;So give it a try and feel free to provide your feeback on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 02 Jul 2018 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/simplified-database-transaction-management-with-the-vert-x-rxjava-api</link>
          <guid isPermaLink="true">https://vertx.io/blog/simplified-database-transaction-management-with-the-vert-x-rxjava-api</guid>
          <author>
            <name>tsegismont</name>
            <uri>http://github.com/tsegismont</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 3.5.2</title>
          <description>
      &lt;article&gt;&lt;p&gt;We have just released Vert.x 3.5.2, a bug fix release of Vert.x 3.5.x.&lt;/p&gt;
&lt;p&gt;Since the release of Vert.x 3.5.1, quite a few bugs have been reported. We would like to thank you all for reporting these issues.&lt;/p&gt;
&lt;p&gt;Vert.x 3.5.2 release notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.5.2-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.5.2-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.5.2%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.5.2/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding !&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Fri, 08 Jun 2018 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-3-5-2</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-5-2</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x goes Native</title>
          <description>
      &lt;article&gt;&lt;p&gt;I this blog post I would like to give you a preview on native image generation of Vert.x applications using GraalVM.&lt;/p&gt;
&lt;p&gt;With &lt;a href=&quot;https://www.graalvm.org/&quot;&gt;GraalVM&lt;/a&gt; it is possible to generate native executables.
These executables can be directly run without the need of an installed JVM.&lt;/p&gt;
&lt;h2 id=&quot;benefits&quot;&gt;Benefits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The start up time is way faster. It is no longer required to wait for the start up of the JVM. The application is usually up and running in a matter of milliseconds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reduced memory footprint. I measured 40 MB memory usage (RSS) for the Vert.x Web application which I’m going to showcase.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Smaller Containers. No JVM means no overhead. All the needed parts are already contained within the executable. This can be very beneficial when building deployable container images.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;demo-project&quot;&gt;Demo Project&lt;/h2&gt;
&lt;p&gt;For the demo application I choose a very basic hello world &lt;a href=&quot;https://vertx.io/docs/vertx-web/java/&quot;&gt;Vert.x Web&lt;/a&gt; server.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; de.jotschi.examples;

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.File;

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.core.Vertx;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.core.logging.Logger;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.core.logging.LoggerFactory;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.core.logging.SLF4JLogDelegateFactory;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.ext.web.Router;

&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Runner&lt;/span&gt; &lt;/span&gt;{

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{
        &lt;span class=&quot;hljs-comment&quot;&gt;// Use logback for logging&lt;/span&gt;
        File logbackFile = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;hljs-string&quot;&gt;&quot;config&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;logback.xml&quot;&lt;/span&gt;);
        System.setProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;logback.configurationFile&quot;&lt;/span&gt;, logbackFile.getAbsolutePath());
        System.setProperty(LoggerFactory.LOGGER_DELEGATE_FACTORY_CLASS_NAME, SLF4JLogDelegateFactory.class.getName());
        Logger log = LoggerFactory.getLogger(Runner.class);

        &lt;span class=&quot;hljs-comment&quot;&gt;// Setup the http server&lt;/span&gt;
        log.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Starting server for: http://localhost:8080/hello&quot;&lt;/span&gt;);
        Vertx vertx = Vertx.vertx();
        Router router = Router.router(vertx);

        router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/hello&quot;&lt;/span&gt;).handler(rc -&gt; {
            log.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Got hello request&quot;&lt;/span&gt;);
            rc.response().end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;World&quot;&lt;/span&gt;);
        });

        vertx.createHttpServer()
            .requestHandler(router::accept)
            .listen(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;);

    }

}&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;graalvm&quot;&gt;GraalVM&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.graalvm.org/&quot;&gt;GraalVM&lt;/a&gt;runs a static analysis on the generated application in order to find the reachable code.
This process which is run within the &lt;a href=&quot;https://github.com/oracle/graal/tree/master/substratevm&quot;&gt;Substrate VM&lt;/a&gt; will lead to the generation of the native image.&lt;/p&gt;
&lt;h3 id=&quot;limitations&quot;&gt;Limitations&lt;/h3&gt;
&lt;p&gt;Due to the nature of the static analysis Substrate VM also has some &lt;a href=&quot;https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md&quot;&gt;limitations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Dynamic class loading and unloading for example is not supported because this would in essence alter the available code during runtime. &lt;/p&gt;
&lt;p&gt;Reflection is only partially supported and requires some manual steps which we will cover later on.&lt;/p&gt;
&lt;h3 id=&quot;patches-workarounds&quot;&gt;Patches / Workarounds&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;Work in progress &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; Next we need to apply some patches / workarounds. Keep in mind that native image generation is a fairly new topic and the these workarounds will hopefully no longer be required once the Substrate VM and Netty have better support for each other.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;I did not manage to get native epoll, kqueue and SSL integration to work with native images.
These parts are heavily optimized within Netty and use JNI to directly access the OS features.
Substrate VM supports JNI and could in theory integrate these native libraries. &lt;/p&gt;
&lt;p&gt;I created a &lt;a href=&quot;https://github.com/Jotschi/vertx-graalvm-native-image-test/tree/netty-native-epoll&quot;&gt;reproducer&lt;/a&gt;
 and an &lt;a href=&quot;https://github.com/oracle/graal/issues/442&quot;&gt;issue&lt;/a&gt; so hopefully these problems can be addressed soon.&lt;/p&gt;
&lt;h3 id=&quot;vert-x-transport&quot;&gt;Vert.x Transport&lt;/h3&gt;
&lt;p&gt;First I needed to patch the &lt;code&gt;io.vertx.core.net.impl.transport.Transport&lt;/code&gt; class in order to prevent the loading of EPoll and KQueue native support. Otherwise Substrate VM will try to load these classes and fail.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Transport&lt;/span&gt; &lt;/span&gt;{
…
  &lt;span class=&quot;hljs-javadoc&quot;&gt;/**
   * The native transport, it may be {@code null} or failed.
   */&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Transport &lt;span class=&quot;hljs-title&quot;&gt;nativeTransport&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-comment&quot;&gt;// Patched: I remove the native transport discovery. &lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;// The imports would be picked up by substrate &lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;// and cause further issues. &lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;
  }
…
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;netty-ssl&quot;&gt;Netty SSL&lt;/h3&gt;
&lt;p&gt;Native SSL support is another problematic area. I created a patched dummy &lt;code&gt;io.netty.handler.ssl.ReferenceCountedOpenSslEngine&lt;/code&gt; class in order to prevent Substrate VM from digging deeper into the SSL code of Netty.&lt;/p&gt;
&lt;p&gt;Next we need to set up the reflection configuration within &lt;code&gt;reflectconfigs/netty.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Netty uses reflection to instantiate the socket channels. This is done in the ReflectiveChannelFactory. We need to tell Substrate VM how classes of type NioServerSocketChannel  and NioSocketChannel can be instantiated. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;[
  {
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;io.netty.channel.socket.nio.NioSocketChannel&quot;&lt;/span&gt;&lt;/span&gt;,
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;methods&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;[
      { &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;init&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;parameterTypes&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;[] &lt;/span&gt;}
    ]
  &lt;/span&gt;},
  {
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;io.netty.channel.socket.nio.NioServerSocketChannel&quot;&lt;/span&gt;&lt;/span&gt;,
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;methods&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;[
      { &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;init&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;parameterTypes&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;[] &lt;/span&gt;}
    ]
  &lt;/span&gt;}
]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to learn more about the state of Netty and GraalVM I can recommend this &lt;a href=&quot;https://medium.com/graalvm/instant-netty-startup-using-graalvm-native-image-generation-ed6f14ff7692&quot;&gt;GraalVM Blogpost&lt;/a&gt; by Codrut Stancu.&lt;/p&gt;
&lt;h2 id=&quot;building&quot;&gt;Building&lt;/h2&gt;
&lt;p&gt;Finally we can build our maven project to generate a shaded jar.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mvn clean package&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we need the GraalVM package. You can download it from the &lt;a href=&quot;https://www.graalvm.org/&quot;&gt;GraalVM website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We use the shaded jar as the input source for the &lt;code&gt;native-image&lt;/code&gt; command which will generate the executable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$GRAALVMDIR&lt;/span&gt;/bin/native-image \
 --verbose \
 --no-server \
 -Dio.netty.noUnsafe=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;  \
 -H:ReflectionConfigurationFiles=./reflectconfigs/netty.json \
 -H:+ReportUnsupportedElementsAtRuntime \
 -Dfile.encoding=UTF-&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; \
 -jar target/vertx-graalvm-native-image-test-&lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-SNAPSHOT.jar&lt;/code&gt;&lt;/pre&gt; 

&lt;h2 id=&quot;result&quot;&gt;Result&lt;/h2&gt;
&lt;p&gt;Finally we end up with an 27 MB &lt;code&gt;vertx-graalvm-native-image-test-0.0.1-SNAPSHOT&lt;/code&gt; executable which we can run.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;$ ldd vertx-graalvm-native-image-test-&lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-SNAPSHOT 
  linux-vdso.so.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007ffc65be8000)
  libdl.so.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; =&gt; /lib/x86_64-linux-gnu/libdl.so.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007f8e892f0000)
  libpthread.so.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; =&gt; /lib/x86_64-linux-gnu/libpthread.so.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007f8e890d3000)
  libz.so.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; =&gt; /lib/x86_64-linux-gnu/libz.so.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007f8e88eb9000)
  librt.so.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; =&gt; /lib/x86_64-linux-gnu/librt.so.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007f8e88cb1000)
  libcrypt.so.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; =&gt; /lib/x86_64-linux-gnu/libcrypt.so.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007f8e88a79000)
  libc.so.&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; =&gt; /lib/x86_64-linux-gnu/libc.so.&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007f8e886da000)
  /lib64/ld-linux-x86-&lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;.so.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007f8e8afb7000)&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;memory&quot;&gt;Memory&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;/usr/bin/time &lt;span class=&quot;hljs-operator&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\nmaxRSS\t%MkB&quot;&lt;/span&gt; java -jar target/vertx-graalvm-native-image-test-&lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-SNAPSHOT.jar 
/usr/bin/time &lt;span class=&quot;hljs-operator&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\nmaxRSS\t%MkB&quot;&lt;/span&gt; ./vertx-graalvm-native-image-test-&lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-SNAPSHOT&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Native Image: 40 MB&lt;/li&gt;
&lt;li&gt;Java 10: 125 MB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The full project can be found on &lt;a href=&quot;https://github.com/Jotschi/vertx-graalvm-native-image-test&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to read more on the topic I can also recommend &lt;a href=&quot;https://sites.google.com/a/athaydes.com/renato-athaydes/posts/a7mbnative-imagejavaappthatrunsin30msandusesonly4mbofram&quot;&gt;this article&lt;/a&gt; by Renato Athaydes in which he demonstrates how to create a very small light weight low memory application using GraalVM.&lt;/p&gt;
&lt;p&gt;Thanks for reading. If you have any further questions or feedback don’t hesitate to send me a tweet to &lt;a href=&quot;https://twitter.com/Jotschi/&quot;&gt;@Jotschi&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 04 Jun 2018 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-goes-native</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-goes-native</guid>
          <author>
            <name>jotschi</name>
            <uri>http://github.com/jotschi</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x RabbitMQ client gets a new consumer API!</title>
          <description>
      &lt;article&gt;&lt;p&gt;In Eclipse Vert.x 3.6.0 the RabbitMQ client will get a new consumer API. In this post we are going to show
the improvements since the previous API and how easy it is to use now.&lt;/p&gt;
&lt;p&gt;Before digging into the new API let’s find out what were the limitations of the actual one:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The API uses the event bus in such limiting the control of the consumer over the RabbitMQ queue.&lt;/li&gt;
&lt;li&gt;The message API is based on &lt;code&gt;JsonObject&lt;/code&gt; which does not provide a typed API&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;the-new-api-at-a-glance&quot;&gt;The new API at a glance&lt;/h2&gt;
&lt;p&gt;Here is how simple queue consumption looks like with the new API:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;RabbitMQClient client = RabbitMQClient.create(vertx, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; RabbitMQOptions());

client.basicConsumer(&lt;span class=&quot;hljs-string&quot;&gt;&quot;my.queue&quot;&lt;/span&gt;, res -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (res.succeeded()) {
    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;RabbitMQ consumer created !&quot;&lt;/span&gt;);
    RabbitMQConsumer mqConsumer = res.result();
    mqConsumer.handler((RabbitMQMessage message) -&gt; {
        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Got message: &quot;&lt;/span&gt; + message.body().toString());
    });
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Oups something went wrong&lt;/span&gt;
    res.cause().printStackTrace();
  }
});&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Now to create a queue you simply call the &lt;code&gt;basicConsumer&lt;/code&gt; method and you obtain asynchronously
a &lt;code&gt;RabbitMQConsumer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then you need to provide a handler called for each message consumed via &lt;em&gt;RabbitMQConsumer#handler&lt;/em&gt; which
is the idiomatic way to consumer stream in Vert.x&lt;/p&gt;
&lt;p&gt;You may also note that when we a message arrives, it has the type of &lt;code&gt;RabbitMQMessage&lt;/code&gt;, this is a typed
message representation.&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;RabbitMQConsumer&lt;/code&gt; is a stream, you also allowed to &lt;code&gt;pause&lt;/code&gt; and &lt;code&gt;resume&lt;/code&gt; the stream, subscribe to the
end event, get notified when an exception occurs.&lt;/p&gt;
&lt;p&gt;In addition, you can cancel the subscription by calling &lt;code&gt;RabbitMQConsumer#cancel&lt;/code&gt; method.&lt;/p&gt;
&lt;h2 id=&quot;backpressure&quot;&gt;Backpressure&lt;/h2&gt;
&lt;p&gt;Sometimes you can have more incoming messages than you can handle.&lt;/p&gt;
&lt;p&gt;The new consumer API allows you to control this and lets you store arrived messages in the internal queue
before they are delivered to the application. Indeed, you can configure the queue size.&lt;/p&gt;
&lt;p&gt;Here is how you can limit the internal queue size:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Limit to max 300 messages&lt;/span&gt;
QueueOptions options = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; QueueOptions()
  .setMaxInternalQueueSize(&lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;);

RabbitMQClient client = RabbitMQClient.create(vertx, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; RabbitMQOptions());

client.basicConsumer(&lt;span class=&quot;hljs-string&quot;&gt;&quot;my.queue&quot;&lt;/span&gt;, options, res -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (res.succeeded()) {
    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;RabbitMQ consumer created !&quot;&lt;/span&gt;);
    RabbitMQConsumer mqConsumer = res.result();
    mqConsumer.handler((RabbitMQMessage message) -&gt; {
      System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Got message: &quot;&lt;/span&gt; + message.body().toString());
    });
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    res.cause().printStackTrace();
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the intenral queue queue capacity is exceeded, the new message will be simply dropped.&lt;/p&gt;
&lt;p&gt;An alternative option is to drop the oldest message in the queue.&lt;/p&gt;
&lt;p&gt;In order to achieve this, you should specify the behavior by calling &lt;code&gt;QueueOptions#setKeepMostRecent&lt;/code&gt; method.&lt;/p&gt;
&lt;h2 id=&quot;finally&quot;&gt;Finally&lt;/h2&gt;
&lt;p&gt;The new Vert.x RabbitMQ client consumer API is way more idiomatic and modern way to consume messages from a queue.&lt;/p&gt;
&lt;p&gt;This API is going to provided in the 3.6.0 release, while the old will be deprecated.&lt;/p&gt;
&lt;p&gt;I hope you enjoyed reading this article. See you soon on our &lt;a href=&quot;https://gitter.im/eclipse-vertx/vertx-users&quot;&gt;Gitter channel&lt;/a&gt;!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 23 Apr 2018 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-rabbitmq-client-gets-a-new-consumer-api</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-rabbitmq-client-gets-a-new-consumer-api</guid>
          <author>
            <name>Sammers21</name>
            <uri>http://github.com/Sammers21</uri>
          </author>
        </item>
      
        <item>
          <title>New community channels</title>
          <description>
      &lt;article&gt;&lt;p&gt;If you visited the Eclipse Vert.x website recently, you might have noticed a couple of novelties on the &lt;a href=&quot;https://vertx.io/community&quot;&gt;community&lt;/a&gt; page:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the Stack Overflow &lt;a href=&quot;https://stackoverflow.com/questions/tagged/vert.x?sort=newest&amp;pageSize=15&quot;&gt;vert.x&lt;/a&gt; tag for user questions&lt;/li&gt;
&lt;li&gt;the &lt;a href=&quot;https://gitter.im/eclipse-vertx/vertx-users&quot;&gt;vertx-users&lt;/a&gt; Gitter channel to chat with other users and module maintainers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wondering why?&lt;/p&gt;
&lt;h2 id=&quot;answering-questions-wherever-they-are-asked&quot;&gt;Answering questions wherever they are asked&lt;/h2&gt;
&lt;p&gt;In order to help us support the community, we (the core team and module maintainers) have tried so far to stick to a few rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!forum/vertx&quot;&gt;user group&lt;/a&gt; for questions&lt;/li&gt;
&lt;li&gt;IRC to chat&lt;/li&gt;
&lt;li&gt;bugs and issues reported on GitHub&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These rules were documented on the website, but admittedly they are hard (if possible at all) to enforce.
And let’s face it: many new users like to ask questions on Stackoverflow and GitHub.&lt;/p&gt;
&lt;p&gt;So we now answer questions wherever they are asked.
We keep the user group as the main channel though: some conversations just don’t fit the Stack Overflow model, and not everyone in the community watches the GitHub repositories.&lt;/p&gt;
&lt;h2 id=&quot;moving-from-irc-to-gitter&quot;&gt;Moving from IRC to Gitter&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;#vertx&lt;/code&gt; channel is recorded on &lt;code&gt;echelog&lt;/code&gt; but it’s not convenient to search or browse.
And sharing code, logs, issues is simply awful compared to modern alternatives like Gitter or Slack.&lt;/p&gt;
&lt;p&gt;Gitter got our preference because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it’s free, without limits&lt;/li&gt;
&lt;li&gt;it’s not resource hungry (on a browser at least)&lt;/li&gt;
&lt;li&gt;it’s well integrated with GitHub&lt;/li&gt;
&lt;li&gt;it supports advanced formatting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since the &lt;a href=&quot;https://gitter.im/eclipse-vertx/vertx-users&quot;&gt;channel&lt;/a&gt; was opened, new people are joining every day.
At the time of writing, there are 74 people registered already.
We hope you will be the next one!&lt;/p&gt;
&lt;p&gt;See you soon online.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Fri, 13 Apr 2018 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/new-community-channels</link>
          <guid isPermaLink="true">https://vertx.io/blog/new-community-channels</guid>
          <author>
            <name>tsegismont</name>
            <uri>http://github.com/tsegismont</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x metrics now with Micrometer.io</title>
          <description>
      &lt;article&gt;&lt;p&gt;Vert.x has already been providing metrics for some time, through the &lt;a href=&quot;https://vertx.io/docs/vertx-dropwizard-metrics/java/&quot;&gt;vertx-dropwizard-metrics&lt;/a&gt; and &lt;a href=&quot;https://vertx.io/docs/vertx-hawkular-metrics/java/&quot;&gt;vertx-hawkular-metrics&lt;/a&gt; modules. Both of them implement a service provider interface (SPI) to collect the Vert.x metrics and make them available to their respective backends.&lt;/p&gt;
&lt;p&gt;A new module, &lt;a href=&quot;https://vertx.io/docs/vertx-micrometer-metrics/java/&quot;&gt;vertx-micrometer-metrics&lt;/a&gt;, is now added to the family. It implements the same SPI, which means that it is able to provide the same metrics.
&lt;a href=&quot;http://micrometer.io/&quot;&gt;&lt;em&gt;Micrometer.io&lt;/em&gt;&lt;/a&gt; is a pretty new metrics library, quite comparable to &lt;em&gt;dropwizard metrics&lt;/em&gt; in that it collects metrics in a local, in-memory registry and is able to store them in various backends such as &lt;em&gt;Graphite&lt;/em&gt; or &lt;em&gt;InfluxDB&lt;/em&gt;. It has several advantages as we will see below.&lt;/p&gt;
&lt;h2 id=&quot;tell-me-more-about-micrometer&quot;&gt;Tell me more about Micrometer&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://micrometer.io/&quot;&gt;&lt;em&gt;Micrometer.io&lt;/em&gt;&lt;/a&gt; describes itself as a a vendor-neutral application metrics facade.
It provides a well designed API, in Java, to define &lt;em&gt;gauges&lt;/em&gt;, &lt;em&gt;counters&lt;/em&gt;, &lt;em&gt;timers&lt;/em&gt; and &lt;em&gt;distribution summaries&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Among the available backends, Micrometer natively supports &lt;em&gt;Graphite&lt;/em&gt;, &lt;em&gt;InfluxDB&lt;/em&gt;, &lt;em&gt;JMX&lt;/em&gt;, &lt;em&gt;Prometheus&lt;/em&gt; and &lt;a href=&quot;http://micrometer.io/docs&quot;&gt;several others&lt;/a&gt;. Prometheus is very popular in the Kubernetes and microservices ecosystems, so its support by Micrometer was a strong motivation for implementing it in Vert.x.&lt;/p&gt;
&lt;p&gt;For the the moment, our implementation in Vert.x supports &lt;em&gt;Prometheus&lt;/em&gt;, &lt;em&gt;InfluxDB&lt;/em&gt; and &lt;em&gt;JMX&lt;/em&gt;. More should quickly come in the near future.&lt;/p&gt;
&lt;h3 id=&quot;dimensionality&quot;&gt;Dimensionality&lt;/h3&gt;
&lt;p&gt;Another interesting aspect in Micrometer is that it handles metrics &lt;em&gt;dimensionality&lt;/em&gt;: metrics can be associated with a set of key/value pairs (sometimes refered as &lt;em&gt;tags&lt;/em&gt;, sometimes as &lt;em&gt;labels&lt;/em&gt;). Every value brings a new dimension to the metric, so that in Prometheus or any other backend that supports dimensionality, we can query for datapoints of one or several dimensions, or query for datapoints aggregated over several dimensions.&lt;/p&gt;
&lt;p&gt;  &lt;em&gt;Example: our metric &lt;code&gt;vertx_http_server_connections&lt;/code&gt; accepts labels &lt;code&gt;local&lt;/code&gt; and &lt;code&gt;remote&lt;/code&gt;, that are used to store addresses on HTTP connections&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;content&#39;&gt; Prometheus is used in the following examples, but equivalent queries can be performed with &lt;em&gt;InfluxDB&lt;/em&gt;.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;In Prometheus, the query &lt;code&gt;vertx_http_server_connections&lt;/code&gt; will return as many timeseries as there are combinations of &lt;code&gt;local&lt;/code&gt; and &lt;code&gt;remote&lt;/code&gt; values. Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;vertx_http_server_connections{&lt;span class=&quot;hljs-variable&quot;&gt;local=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;0.0.0.0:8080&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;remote=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.1.1.1&quot;&lt;/span&gt;}
vertx_http_server_connections{&lt;span class=&quot;hljs-variable&quot;&gt;local=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;0.0.0.0:8080&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;remote=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;2.2.2.2&quot;&lt;/span&gt;}
vertx_http_server_connections{&lt;span class=&quot;hljs-variable&quot;&gt;local=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;0.0.0.0:8080&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;remote=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;3.3.3.3&quot;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To query on a single dimension, we must provide the labels:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vertx_http_server_connections{local=&quot;0.0.0.0:8080&quot;,remote=&quot;1.1.1.1&quot;}&lt;/code&gt;. It will return a single timeseries.&lt;/p&gt;
&lt;p&gt;To get an aggregate, Prometheus (PromQL) provides several &lt;a href=&quot;https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators&quot;&gt;aggregation operators&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sum(vertx_http_server_connections)&lt;/code&gt; will return the sum across all dimensions.&lt;/p&gt;
&lt;h2 id=&quot;so-what-are-the-vert-x-metrics-&quot;&gt;So what are the Vert.x metrics?&lt;/h2&gt;
&lt;p&gt;People already familiar with the existing metrics modules (&lt;em&gt;dropwizard&lt;/em&gt; or &lt;em&gt;hawkular&lt;/em&gt;) will not be too disoriented. They are roughly the same. The main difference is where previously, some metric names could have a variable part within - such as &lt;code&gt;vertx.eventbus.handlers.myaddress&lt;/code&gt; - here we take advantage of dimensionality and we will have &lt;code&gt;vertx_eventbus_handlers{address=&quot;myaddress&quot;}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Some other metrics are no longer useful, for instance the dropwizard’s &lt;code&gt;vertx.eventbus.messages.pending&lt;/code&gt;, &lt;code&gt;vertx.eventbus.messages.pending-local&lt;/code&gt; and &lt;code&gt;vertx.eventbus.messages.pending-remote&lt;/code&gt; are now just &lt;code&gt;vertx_eventbus_pending{side=local}&lt;/code&gt; and &lt;code&gt;vertx_eventbus_pending{side=remote}&lt;/code&gt; in micrometer. The sum of them can easily be computed at query time.&lt;/p&gt;
&lt;p&gt;The metrics provided by Vert.x are dispatched into eight big families:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Net client&lt;/strong&gt;: distribution summaries of bytes sent and received, number of connections, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Net server&lt;/strong&gt;: distribution summaries of bytes sent and received, number of connections, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP client&lt;/strong&gt;: counter of requests, response times, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP server&lt;/strong&gt;: counter of requests, processing times, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Event bus&lt;/strong&gt;: counter of handlers, messages sent and received, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pool&lt;/strong&gt;: for worker pools and some datasource pools, queue size and waiting time, processing time, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Verticles&lt;/strong&gt;: number of verticles deployed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The full list of collected metrics is &lt;a href=&quot;https://vertx.io/docs/vertx-micrometer-metrics/java/#_vert_x_core_tools_metrics&quot;&gt;available here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;
&lt;p&gt;This section will guide you through a quick setup to run a Vert.x application with Micrometer. The code examples used here are taken from the &lt;code&gt;micrometer-metrics-example&lt;/code&gt; in &lt;code&gt;vertx-examples&lt;/code&gt; repository, in Java, using &lt;em&gt;maven&lt;/em&gt;. But the same could be done with other Vert.x supported languages, as well as &lt;em&gt;gradle&lt;/em&gt; instead of &lt;em&gt;maven&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&quot;maven-configuration&quot;&gt;Maven configuration&lt;/h3&gt;
&lt;p&gt;The configuration and the maven imports will vary according to the backend storage that will be used. For maven, the common part is always:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.vertx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;vertx-micrometer-metrics&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;3.5.1&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Then, to report to InfluxDB:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.micrometer&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;micrometer-registry-influx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;1.0.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Or Prometheus:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.micrometer&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;micrometer-registry-prometheus&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;1.0.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.vertx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;vertx-web&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;3.5.1&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remark that, since Prometheus pulls metrics from their source, they must be exposed on an HTTP endpoint. That’s why &lt;code&gt;vertx-web&lt;/code&gt; is imported here. It is not &lt;em&gt;absolutely&lt;/em&gt; necessary (it’s possible to get the metrics registry content and expose it in any other way) but it’s probably the easiest way to do.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Or JMX:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.micrometer&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;micrometer-registry-jmx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;1.0.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;Note &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; At the moment, it is not possible to report metrics to several backends at the same time. &lt;a href=&quot;https://github.com/vert-x3/vertx-micrometer-metrics/issues/16&quot;&gt;It might be soon implemented&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;.&lt;/p&gt;
&lt;h3 id=&quot;setting-up-vert-x-options&quot;&gt;Setting up Vert.x options&lt;/h3&gt;
&lt;p&gt;A &lt;code&gt;MicrometerMetricsOptions&lt;/code&gt; object must be created and passed to &lt;code&gt;VertxOptions&lt;/code&gt;, with one backend configured (though having no backend is possible: you would get metrics sent to a default Micrometer registry, but without any persistent storage).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;InfluxDB example:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Default InfluxDB options will push metrics to localhost:8086, db &quot;default&quot;&lt;/span&gt;
MicrometerMetricsOptions options = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MicrometerMetricsOptions()
  .setInfluxDbOptions(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; VertxInfluxDbOptions().setEnabled(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;))
  .setEnabled(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);
Vertx vertx = Vertx.vertx(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; VertxOptions().setMetricsOptions(options));
&lt;span class=&quot;hljs-comment&quot;&gt;// Then deploy verticles with this vertx instance&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Prometheus example:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Deploy with embedded server: prometheus metrics will be automatically exposed,&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// independently from any other HTTP server defined&lt;/span&gt;
MicrometerMetricsOptions options = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MicrometerMetricsOptions()
  .setPrometheusOptions(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; VertxPrometheusOptions()
    .setStartEmbeddedServer(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;)
    .setEmbeddedServerOptions(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HttpServerOptions().setPort(&lt;span class=&quot;hljs-number&quot;&gt;8081&lt;/span&gt;))
    .setEnabled(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;))
  .setEnabled(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);
Vertx vertx = Vertx.vertx(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; VertxOptions().setMetricsOptions(options));
&lt;span class=&quot;hljs-comment&quot;&gt;// Then deploy verticles with this vertx instance&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Or Prometheus with the &lt;code&gt;/metrics&lt;/code&gt; endpoint bound to an existing HTTP server:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Deploy without embedded server: we need to &quot;manually&quot; expose the prometheus metrics&lt;/span&gt;
MicrometerMetricsOptions options = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MicrometerMetricsOptions()
  .setPrometheusOptions(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; VertxPrometheusOptions().setEnabled(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;))
  .setEnabled(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);
Vertx vertx = Vertx.vertx(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; VertxOptions().setMetricsOptions(options));

Router router = Router.router(vertx);
PrometheusMeterRegistry registry = (PrometheusMeterRegistry) BackendRegistries.getDefaultNow();
&lt;span class=&quot;hljs-comment&quot;&gt;// Setup a route for metrics&lt;/span&gt;
router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/metrics&quot;&lt;/span&gt;).handler(ctx -&gt; {
  String response = registry.scrape();
  ctx.response().end(response);
});
vertx.createHttpServer().requestHandler(router::accept).listen(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;JMX example:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Default JMX options will publish MBeans under domain &quot;metrics&quot;&lt;/span&gt;
MicrometerMetricsOptions options = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MicrometerMetricsOptions()
  .setJmxMetricsOptions(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; VertxJmxMetricsOptions().setEnabled(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;))
  .setEnabled(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);
Vertx vertx = Vertx.vertx(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; VertxOptions().setMetricsOptions(options));
&lt;span class=&quot;hljs-comment&quot;&gt;// Then deploy verticles with this vertx instance&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;setup-the-backend-server&quot;&gt;Setup the backend server&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.influxdata.com/&quot;&gt;InfluxDB&lt;/a&gt;, by default, is expected to run on &lt;code&gt;localhost:8086&lt;/code&gt; without authentication, database “default”. It is configurable in &lt;code&gt;VertxInfluxDbOptions&lt;/code&gt;.
If you don’t have a running instance of InfluxDB, the shortest way to start is certainly with docker, just run:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;docker run -p &lt;span class=&quot;hljs-number&quot;&gt;8086&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;8086&lt;/span&gt; influxdb&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://prometheus.io/docs/prometheus/latest/getting_started/&quot;&gt;Prometheus&lt;/a&gt; needs some configuration since it pulls metrics from the sources. Once it is installed, configure the scrape endpoints in &lt;code&gt;prometheus.yml&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;-&lt;span class=&quot;ruby&quot;&gt; &lt;span class=&quot;hljs-symbol&quot;&gt;job_name:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;vertx-8081&#39;&lt;/span&gt;
&lt;/span&gt;  static_configs:
    -&lt;span class=&quot;ruby&quot;&gt; &lt;span class=&quot;hljs-symbol&quot;&gt;targets:&lt;/span&gt; [&lt;span class=&quot;hljs-string&quot;&gt;&#39;localhost:8081&#39;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or, when using &lt;code&gt;/metrics&lt;/code&gt; endpoint bound to an existing HTTP server:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-&lt;span class=&quot;ruby&quot;&gt; &lt;span class=&quot;hljs-symbol&quot;&gt;job_name:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;vertx-8080&#39;&lt;/span&gt;
&lt;/span&gt;  static_configs:
    -&lt;span class=&quot;ruby&quot;&gt; &lt;span class=&quot;hljs-symbol&quot;&gt;targets:&lt;/span&gt; [&lt;span class=&quot;hljs-string&quot;&gt;&#39;localhost:8080&#39;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;For JMX there is nothing special to configure.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;collecting-vert-x-metrics&quot;&gt;Collecting Vert.x metrics&lt;/h3&gt;
&lt;p&gt;From now on, all Vert.x metrics will be collected and sent to the configured backend. In our Vert.x example, we setup an HTTP server metrics:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;Router router = Router.router(vertx);
router.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;).handler(ctx -&gt; {
  ctx.response().end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello Micrometer from HTTP!&quot;&lt;/span&gt;);
});
vertx.createHttpServer().requestHandler(router::accept).listen(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; And some event bus ping-pong:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Producer side&lt;/span&gt;
vertx.setPeriodic(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, x -&gt; {
  vertx.eventBus().send(&lt;span class=&quot;hljs-string&quot;&gt;&quot;greeting&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello Micrometer from event bus!&quot;&lt;/span&gt;);
});&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Consumer side&lt;/span&gt;
vertx.eventBus().&lt;String&gt;consumer(&lt;span class=&quot;hljs-string&quot;&gt;&quot;greeting&quot;&lt;/span&gt;, message -&gt; {
  String greeting = message.body();
  System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Received: &quot;&lt;/span&gt; + greeting);
  message.reply(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello back!&quot;&lt;/span&gt;);
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To trigger some activity on the HTTP server, we can write a small bash script:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; curl http://localhost:&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;/
    sleep .&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;viewing-the-results&quot;&gt;Viewing the results&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://grafana.com/&quot;&gt;Grafana&lt;/a&gt; can be used to display the InfluxDB and Prometheus metrics. The &lt;code&gt;vertx-examples&lt;/code&gt; repository contains two dashboards for that: &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/blob/master/micrometer-metrics-examples/grafana/Vertx-InfluxDB.json&quot;&gt;for InfluxDB&lt;/a&gt; and &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/blob/master/micrometer-metrics-examples/grafana/Vertx-Prometheus.json&quot;&gt;for Prometheus&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id=&quot;http-server-metrics&quot;&gt;HTTP server metrics&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jotak/vertx-examples/micrometer-example/micrometer-metrics-examples/grafana/http-server-metrics.png&quot; alt=&quot;HTTP server metrics&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;event-bus-metrics&quot;&gt;Event bus metrics&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jotak/vertx-examples/micrometer-example/micrometer-metrics-examples/grafana/eventbus-metrics.png&quot; alt=&quot;Event bus metrics&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;going-further&quot;&gt;Going further&lt;/h2&gt;
&lt;p&gt;We’ve seen the basic setup. There is a good bunch of options available, detailed &lt;a href=&quot;https://vertx.io/docs/vertx-micrometer-metrics/java/&quot;&gt;in the documentation&lt;/a&gt;: how to disable some metrics domains, how to filter or rearrange labels, how to export metrics snapshots to Json objects, how to add JVM or processor instrumentation, etc.&lt;/p&gt;
&lt;p&gt;Before we finish, there is one important point that we can cover here: defining custom metrics.
Because the module gives you access to its Micrometer registry, you can add your custom metrics there.&lt;/p&gt;
&lt;p&gt;Getting the default registry is straightforward:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;MeterRegistry registry = BackendRegistries.getDefaultNow();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you have plain access to the &lt;a href=&quot;https://micrometer.io/docs/concepts&quot;&gt;Micrometer API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For instance, here is how you can track the execution time of a piece of code that is regularly called:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;MeterRegistry registry = BackendRegistries.getDefaultNow();
Timer timer = Timer
  .builder(&lt;span class=&quot;hljs-string&quot;&gt;&quot;my.timer&quot;&lt;/span&gt;)
  .description(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Time tracker for my extremely sophisticated algorithm&quot;&lt;/span&gt;)
  .register(registry);

vertx.setPeriodic(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, l -&gt; {
  timer.record(() -&gt; myExtremelySophisticatedAlgorithm());
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since it is using the same registry, there is no extra backend configuration to do.&lt;/p&gt;
&lt;h2 id=&quot;what-s-next-&quot;&gt;What’s next?&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;vertx-micrometer-metrics&lt;/code&gt; module will continue to be improved, with already two planned enhancements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-micrometer-metrics/issues/15&quot;&gt;Adding more backends&lt;/a&gt;, like Graphite.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-micrometer-metrics/issues/16&quot;&gt;Allow to configure several backends&lt;/a&gt;, and not only one at the same time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Would you miss any feature, please &lt;a href=&quot;https://github.com/vert-x3/vertx-micrometer-metrics/issues&quot;&gt;ask on GitHub&lt;/a&gt;. Contributions and bug fixes are also welcome!&lt;/p&gt;
&lt;p&gt;Now is time to enter the Metrics.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 09 Apr 2018 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-metrics-now-with-micrometer-io</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-metrics-now-with-micrometer-io</guid>
          <author>
            <name>jotak</name>
            <uri>http://github.com/jotak</uri>
          </author>
        </item>
      
        <item>
          <title>Google Summer of Code 2018</title>
          <description>
      &lt;article&gt;&lt;p&gt;It’s this time of year again!
&lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code&lt;/a&gt; 2018 submission period has just started!&lt;/p&gt;
&lt;h2 id=&quot;submit-through-the-eclipse-organization&quot;&gt;Submit through the Eclipse organization&lt;/h2&gt;
&lt;p&gt;This year, the Eclipse Vert.x project participates through the &lt;a href=&quot;https://summerofcode.withgoogle.com/organizations/6364590460370944/&quot;&gt;Eclipse organization&lt;/a&gt;.
Make sure to review our &lt;a href=&quot;https://wiki.eclipse.org/Google_Summer_of_Code_2018_Ideas#Eclipse_Vert.x&quot;&gt;GSoC 2018 ideas&lt;/a&gt; and to submit before March, 27!&lt;/p&gt;
&lt;h2 id=&quot;assessment-application&quot;&gt;Assessment application&lt;/h2&gt;
&lt;p&gt;As we did before, we ask candidates to &lt;a href=&quot;https://github.com/tsegismont/vertx-gsoc-2018-qotd&quot;&gt;implement a simple Vert.x application&lt;/a&gt;.
This helps us make sure candidates have a basic understanding of asynchronous programming and the Vert.x toolkit.
&lt;strong&gt;But submit your proposal even if not done with the assessment application!&lt;/strong&gt;
Google will not extend the submission period but we can continue reviewing assessments while evaluating the submitted proposals.&lt;/p&gt;
&lt;h2 id=&quot;questions-&quot;&gt;Questions?&lt;/h2&gt;
&lt;p&gt;If you have questions, feel free to ask possible mentors via email or on our &lt;a href=&quot;/community&quot;&gt;community channels&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All the details for this year (and ideas from past years) can be found on the &lt;a href=&quot;/gsoc&quot;&gt;Vert.x GSoC page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Looking forward to your proposals!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Tue, 13 Mar 2018 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/google-summer-of-code-2018</link>
          <guid isPermaLink="true">https://vertx.io/blog/google-summer-of-code-2018</guid>
          <author>
            <name>tsegismont</name>
            <uri>http://github.com/tsegismont</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 3.5.1 released!</title>
          <description>
      &lt;article&gt;&lt;p&gt;We have just released Vert.x 3.5.1!&lt;/p&gt;
&lt;h4 id=&quot;fixes-first-&quot;&gt;Fixes first!&lt;/h4&gt;
&lt;p&gt;As usual this release fixes bugs reported in 3.5.0, see the release notes.&lt;/p&gt;
&lt;h4 id=&quot;junit-5-support&quot;&gt;JUnit 5 support&lt;/h4&gt;
&lt;p&gt;This release introduces the new &lt;a href=&quot;https://github.com/vert-x3/vertx-junit5&quot;&gt;vertx-junit5 module&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://junit.org/junit5/&quot;&gt;JUnit 5&lt;/a&gt; is a rewrite of the famous Java testing framework that brings new interesting features, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nested tests,&lt;/li&gt;
&lt;li&gt;the ability to give a human-readable description of tests and test cases (and yes, even use emojis),&lt;/li&gt;
&lt;li&gt;a modular extension mechanism that is more powerful than the JUnit 4 runner mechanism (@RunWith annotation),&lt;/li&gt;
&lt;li&gt;conditional test execution,&lt;/li&gt;
&lt;li&gt;parameterized tests, including from sources such as CSV data,&lt;/li&gt;
&lt;li&gt;the support of Java 8 lambda expressions in the reworked built-in assertions API,&lt;/li&gt;
&lt;li&gt;support for running tests previously written for JUnit 4.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Suppose that we have a &lt;code&gt;SampleVerticle&lt;/code&gt; verticle that exposes a HTTP server on port 11981.
Here is how we can test its deployment as well as the result of 10 concurrent HTTP requests:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-property&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;hljs-property&quot;&gt;@DisplayName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;🚀 Deploy a HTTP service verticle and make 10 requests&quot;&lt;/span&gt;)
&lt;span class=&quot;hljs-literal&quot;&gt;void&lt;/span&gt; useSampleVerticle(Vertx vertx, VertxTestContext testContext) {
  WebClient webClient = WebClient.create(vertx);
  Checkpoint deploymentCheckpoint = testContext.checkpoint();

  Checkpoint requestCheckpoint = testContext.checkpoint(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);
  vertx.deployVerticle(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SampleVerticle(), testContext.succeeding(id&lt;span class=&quot;hljs-function&quot;&gt; -&gt;&lt;/span&gt; {
    deploymentCheckpoint.flag();

    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (int i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; i++) {
      webClient.get(&lt;span class=&quot;hljs-number&quot;&gt;11981&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;)
        .as(BodyCodec.string())
        .send(testContext.succeeding(resp&lt;span class=&quot;hljs-function&quot;&gt; -&gt;&lt;/span&gt; {
          testContext.verify&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;(() -&gt; {
            assertThat(resp.statusCode()).isEqualTo(&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;);
            assertThat(resp.body()).contains(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Yo!&quot;&lt;/span&gt;);
            requestCheckpoint.flag();
          })&lt;/span&gt;;
        }));
    }
  }));
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The test method above benefits from the injection of a working &lt;code&gt;Vertx&lt;/code&gt; context, a &lt;code&gt;VertxTestContext&lt;/code&gt; for dealing with
asynchronous operations, and the guarantee that the execution time is bound by a timeout which can optionally be configured
using a &lt;code&gt;@Timeout&lt;/code&gt; annotation.&lt;/p&gt;
&lt;p&gt;The test succeeds when all checkpoints have been flagged.
Note that &lt;code&gt;vertx-junit5&lt;/code&gt; is agnostic of the assertions library being used: you may opt for the built-in JUnit 5 assertions
or use a 3rd-party library such as &lt;a href=&quot;http://joel-costigliola.github.io/assertj/&quot;&gt;AssertJ&lt;/a&gt; as we did in the example above.&lt;/p&gt;
&lt;p&gt;You can checkout the &lt;a href=&quot;https://github.com/vert-x3/vertx-junit5&quot;&gt;source on GitHub&lt;/a&gt;, read
&lt;a href=&quot;https://vertx.io/docs/vertx-junit5/java/&quot;&gt;the manual&lt;/a&gt; and learn from
&lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/master/junit5-examples&quot;&gt;the examples&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;web-api-contract-enhancements&quot;&gt;Web API Contract enhancements&lt;/h4&gt;
&lt;p&gt;The package &lt;code&gt;vertx-web-api-contract&lt;/code&gt; includes a variety of fixes, from schema &lt;code&gt;$ref&lt;/code&gt; to
&lt;a href=&quot;http://vertx.io/docs/vertx-web-api-contract/java/&quot;&gt;revamped documentation&lt;/a&gt;. You can give a look at list of all
&lt;a href=&quot;https://github.com/vert-x3/vertx-web/pull/802&quot;&gt;fixes/improvements here&lt;/a&gt; and all
&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.5.1-Breaking-Changes#vertx-web-api-contracts&quot;&gt;breaking changes here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From 3.5.1 to load the openapi spec and instantiate the Router you should use new method &lt;code&gt;OpenAPI3RouterFactory.create()&lt;/code&gt;
that replaces old methods &lt;code&gt;createRouterFactoryFromFile()&lt;/code&gt; and &lt;code&gt;createRouterFactoryFromURL()&lt;/code&gt;. This new method accepts
relative paths, absolute paths, local URL with &lt;code&gt;file://&lt;/code&gt; and remote URL with &lt;code&gt;http://&lt;/code&gt;. Note that if you want refeer to
a file relative to your jar’s root, you can simply use a relative path and the parser will look out the jar and into the
jar for the spec.&lt;/p&gt;
&lt;p&gt;From 3.5.1 all settings about &lt;code&gt;OpenAPI3RouterFactory&lt;/code&gt; behaviours during router generation are inglobed in a new object called
&lt;a href=&quot;http://vertx.io/docs/apidocs/io/vertx/ext/web/api/contract/RouterFactoryOptions.html&quot;&gt;&lt;code&gt;RouterFactoryOptions&lt;/code&gt;&lt;/a&gt;. From
this object you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Configure if you want to mount a default validation failure handler and which one
(methods &lt;code&gt;setMountValidationFailureHandler(boolean)&lt;/code&gt; and &lt;code&gt;setValidationFailureHandler(Handler)&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Configure if you want to mount a default 501 not implemented handler and which one
(methods &lt;code&gt;setMountNotImplementedFailureHandler(boolean)&lt;/code&gt; and &lt;code&gt;setNotImplementedFailureHandler(Handler)&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Configure if you want to mount &lt;code&gt;ResponseContentTypeHandler&lt;/code&gt; automatically
(method &lt;code&gt;setMountResponseContentTypeHandler(boolean)&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Configure if you want to fail during router generation when security handlers are not configured
(method &lt;code&gt;setRequireSecurityHandlers(boolean)&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After initialization of route, you can mount the &lt;code&gt;RouterFactoryOptions&lt;/code&gt; object with method &lt;code&gt;routerFactory.setOptions()&lt;/code&gt;
when you want before calling &lt;code&gt;getRouter()&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;rxjava-deprecation-removal&quot;&gt;RxJava deprecation removal&lt;/h4&gt;
&lt;p&gt;It is important to know that 3.5.x will be the last release with the legacy &lt;code&gt;xyzObservable()&lt;/code&gt; methods:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@Deprecated&lt;/span&gt;()
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Observable&lt;HttpServer&gt; &lt;span class=&quot;hljs-title&quot;&gt;listenObservable&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; port, String host)&lt;/span&gt;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;has been replaced since Vert.x 3.4 by:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Single&lt;HttpServer&gt; &lt;span class=&quot;hljs-title&quot;&gt;rxListen&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; port, String host)&lt;/span&gt;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;xyzObservable()&lt;/code&gt; deprecated methods will be &lt;a href=&quot;https://github.com/vert-x3/vertx-rx/issues/113&quot;&gt;removed&lt;/a&gt; in Vert.x 3.6.&lt;/p&gt;
&lt;h4 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h4&gt;
&lt;p&gt;Vert.x 3.5.1 release notes and breaking changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.5.1-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.5.1-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.5.1-Breaking-Changes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.5.1-Breaking-Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.5.1%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.3.3/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding !&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Tue, 13 Feb 2018 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-3-5-1-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-5-1-released</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x based Framework URL Shortener Backend</title>
          <description>
      &lt;article&gt;&lt;h2 id=&quot;aws-lambda-vertx-framework-url-shortener-backend&quot;&gt;AWS Lambda &amp; Vertx Framework URL Shortener Backend&lt;/h2&gt;
&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;
&lt;p&gt;Recently I stumbled upon &lt;a href=&quot;http://vertx.io/&quot;&gt;&lt;strong&gt;Vertx&lt;/strong&gt;&lt;/a&gt;. &lt;strong&gt;Event-driven, asynchronized, lightweight, reactive, highly performant, polyglot&lt;/strong&gt; application framework. Ideal for writing &lt;strong&gt;micro-services&lt;/strong&gt;. I played around with it for a while and really enjoyed the concept of &lt;strong&gt;serverless&lt;/strong&gt; applications.&lt;/p&gt;
&lt;p&gt;I developed a few apps and cases and started to wonder how to run and deploy them so that I get a 100% reliable service. I suddenly remembered the tech seminar that I attended recently, specifically session about serverless apps with &lt;a href=&quot;https://aws.amazon.com/&quot;&gt;&lt;strong&gt;AWS&lt;/strong&gt;&lt;/a&gt; (Amazon Web Services) &lt;strong&gt;Lambda&lt;/strong&gt;. Lambda is a serverless compute service that runs your code in response to events and automatically manages the underlying compute resources for you. Fairly similar concepts &lt;strong&gt;Vertx&lt;/strong&gt; and &lt;strong&gt;AWS Lambda&lt;/strong&gt;, so maybe they complement each other? As it turns out they do, &lt;strong&gt;Vertx&lt;/strong&gt; can get most of your &lt;strong&gt;Lambdas&lt;/strong&gt;…&lt;/p&gt;
&lt;p&gt;Using the &lt;a href=&quot;https://serverless.com/&quot;&gt;&lt;strong&gt;Serverless Framework&lt;/strong&gt;&lt;/a&gt; to create, manage and deploy your new &lt;strong&gt;Lambdas&lt;/strong&gt; I was able to get this &lt;strong&gt;micro-service&lt;/strong&gt; up and running in no time.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Enough with the talk, lets see the implementation.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Handler Class, entry point of AWS Request.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The first issue that I had was the &lt;strong&gt;sync&lt;/strong&gt; Event Handler that is provided by AWS. So I had to by pass it with Future. In the Handler class I first initiate Vertx instance in a static block and deploy few Verticles that will do the work. This class only receives the event, extracts needed data from the request and passes the data to Vertx EventBus. After the Consumers handle the request, Handler class will generate a proper response and finish the AWS request.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/pendula95/583eb45bd0a7990136fba029bdcd555b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;em&gt;Line 4-18:&lt;/em&gt; This is where Vertx instance is created, Verticles are deployed and &lt;strong&gt;Async JDBC&lt;/strong&gt; client is created. I figured out that it is better to created JDBC client here as in some cases I was timeout when that logic was in the Verticle start method.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Line 27-36:&lt;/em&gt; These are helper lines, parsing and formatting the data so I can pass it to the Verticles.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Line 38-45:&lt;/em&gt; I have decided to map the consumers to the address that is made of request method and url path, example POST/api. This means each API request is mapped to its own consumer in Verticle class.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Line 47-77:&lt;/em&gt; This is nothing but a block of code that handles the response that was passed from Verticles to the Future and generates the final response that will be return to API Gateway.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;UrlService, Vertx Verticle.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Verticle class is pretty forward. Consumers that will process the message, methods for working with JDBC and helper methods for hashing/dehashing id. The logic behind url shortening is fairly simple here. Each long url is stored in database with a unique id and few additional columns. Row id is hashed and returned as short url. When retrieving long url hash is decoded to row id and long url is retrieved. Later user is redirected to long url. With this implementation, on 6 char short url (characters after the domain) you get 62^6 combinations which is 56 800 235 584 rows for storing your urls. TinyURL is currently at 6 long char urls (characters after domain). You can of course implement methods for reusing and recycling ids.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/pendula95/aeb4479162e6e33504add2af9fa68bc5.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As said, this is all fairly straight forward, if you are already familiar with &lt;strong&gt;Vertx&lt;/strong&gt;. If you are thinking why have I repeated the code for establish a &lt;strong&gt;JDBC&lt;/strong&gt; connection, here is the explanation &lt;em&gt;(line: 10-16)&lt;/em&gt;. I was getting Timeouts when creating JDBC connection in Verticles. To avoid this I also added this code to my Handler class. This way connection is created there and because of the &lt;strong&gt;Vertx&lt;/strong&gt; implementation any later attempt to create it again will result in just getting the instances from the first invocation. This escaped the need to pass the instances directly from the Handler class when creating Verticle instances.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Serverless configuration.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Lastly I would like to share the serverless.yml, confirmation file that allows seamlessly deploy and management of AWS Lambda. With just a few commands and lines of configuration you are able to configure all necessary steps for deploying your AWS Lambda. Framework takes care of making configuration of Api-Gateway and other AWS hassle that would otherwise needed to be done by hand. In this case Lambda is invoked by HTTP events.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/pendula95/33adc47265072ed930c7df98c9ace7be.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;performance-and-tests&quot;&gt;Performance and Tests&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Vertx&lt;/strong&gt; async capabilities eased the stress and memory needs of traditional &lt;strong&gt;AWS Lambdas&lt;/strong&gt; with sync methods. After performing load tests Lambdas that were written using Vertx framework preformed &lt;strong&gt;10% faster and consumed 40% less memory&lt;/strong&gt;. As I have read somewhere in Vertx documentation, Sync methods will definitely finish the first request faster but in total Async will be faster in the end. This savings in memory and time will definitely reduce the cost of running your Lambdas and the little overhead with additional code is for sure worth it.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;To follow the pace of demanding needs for fast and resilient services we need to move from traditional Monoliths. Embracing the &lt;strong&gt;micro service&lt;/strong&gt; architecture alone will not cut it, not anymore. With the rise and rapid advancement of &lt;strong&gt;Cloud&lt;/strong&gt; solutions it has never been so easy to make a truly &lt;strong&gt;Serverless&lt;/strong&gt; systems build upon network of &lt;strong&gt;micro services&lt;/strong&gt;.
As you have seen &lt;strong&gt;Vertx&lt;/strong&gt; with its async API makes the full advantage of &lt;strong&gt;AWS Lambdas&lt;/strong&gt;, embracing them while also improving the performance and lowering the costs. With the help from &lt;strong&gt;Serverless Framework&lt;/strong&gt; writing, deploying and managing your &lt;strong&gt;Lambdas&lt;/strong&gt; has never been so easy.&lt;/p&gt;
&lt;p&gt;If you are interested in the whole project, you can find it on &lt;a href=&quot;https://github.com/pendula95/vertx-aws-url-shortener-service/tree/master&quot;&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block info&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-info-circle&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;Info &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; this is a re-publication of the following &lt;a href=&quot;http://lazarbulic.com/blog/2017/11/10/aws-lambda-vertx-framework-url-shortener-backend/&quot;&gt;blog post&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Thu, 21 Dec 2017 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-based-framework-url-shortener-backend</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-based-framework-url-shortener-backend</guid>
          <author>
            <name>pendula95</name>
            <uri>http://github.com/pendula95</uri>
          </author>
        </item>
      
        <item>
          <title>TCP Client using Eclipse Vert.x, Kotlin and Gradle build</title>
          <description>
      &lt;article&gt;&lt;p&gt;As part of my hobby project to control RaspberryPi using Google Home Mini and/or Alexa, I wanted to write a very simple TCP client that keeps a connection open to one of my custom written server in cloud (I will write another blog post to cover the server side on a later date). The requirement of the client is to send a shared secret upon connecting and then keep waiting for message from server. Vert.x, Kotlin and Gradle allow rapid development of such project. The generated jar can be executed on Raspberry Pi. These steps outline the project setup and related source code to showcase a Vert.x and Kotlin project with Gradle.&lt;/p&gt;
&lt;h2 id=&quot;project-directory-structure&quot;&gt;Project Directory Structure&lt;/h2&gt;
&lt;p&gt;From command line (or via Windows Explorer, whatever you prefer to use) create a directory for project,for instance &lt;code&gt;vertx-net-client&lt;/code&gt;. Since we are using Kotlin, we will place all Kotlin files in &lt;code&gt;src/main/kotlin&lt;/code&gt; folder. The &lt;code&gt;src/main/resources&lt;/code&gt; folder will contain our logging configuration related files.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; vertx-&lt;span class=&quot;hljs-winutils&quot;&gt;net&lt;/span&gt;-client
&lt;span class=&quot;hljs-built_in&quot;&gt;mkdir&lt;/span&gt; -p src/main/kotlin
&lt;span class=&quot;hljs-built_in&quot;&gt;mkdir&lt;/span&gt; -p src/main/resources&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;project-files&quot;&gt;Project Files&lt;/h3&gt;
&lt;p&gt;We need to add following files in the project&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.gitignore&lt;/code&gt;
If you want to check your project into git, you may consider adding following &lt;code&gt;.gitignore&lt;/code&gt; file at root of your project&lt;/li&gt;
&lt;/ul&gt;
&lt;script src=&quot;https://gist.github.com/usmansaleem/b5838484a20cb8b08f236f2265ad7a8e.js&quot;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;logback.xml&lt;/code&gt;
This example is using slf4j and logback for logging. If you decide to use it in your project, you may also add following logback.xml file in &lt;code&gt;src/main/resources&lt;/code&gt;. Modify it as per your requirements. This example will
log on console.&lt;/li&gt;
&lt;/ul&gt;
&lt;script src=&quot;https://gist.github.com/usmansaleem/750c6d1cad0721b52be2ff00f758fb9f.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;gradle-setup&quot;&gt;Gradle Setup&lt;/h2&gt;
&lt;p&gt;We will use Gradle build system for this project. If you don’t already have Gradle available on your system, download and unzip gradle in a directory of your choice (&lt;code&gt;$GRADLE_HOME&lt;/code&gt; is used here to represent this directory). This gradle distribution will be used as a starting point to create Gradle wrapper scripts for our project. These scripts will allow our project to download and use correct version of gradle distribution automatically without messing up system. Really useful when building your project on CI tool or on any other developer’s machine.&lt;/p&gt;
&lt;p&gt;Run following command in project’s directory&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$GRADLE_HOME&lt;/span&gt;/bin/gradle wrapper&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above commands will generate following files and directories.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;gradle/  gradlew  gradlew.bat&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;gradle-build-file-build-gradle-&quot;&gt;Gradle build file &lt;code&gt;build.gradle&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Create (and/or copy and modify) following &lt;code&gt;build.gradle&lt;/code&gt; in your project’s root directory. Our example gradle build file is using &lt;a href=&quot;https://github.com/jponge/vertx-gradle-plugin/&quot;&gt;vertx-gradle-plugin&lt;/a&gt;.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/usmansaleem/e723f25b827e0a925eaef2957a80132d.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In the project directory, run following command to download local gradle distribution:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;./gradlew&lt;/code&gt;&lt;/pre&gt;
(or `.\gradlew.bat` if in Windows)

At this stage we should have following file structure. This is also a good time to commit changes if you are working with git.

* `.gitignore`                              
* `build.gradle`                            
* `gradle/wrapper/gradle-wrapper.jar`       
* `gradle/wrapper/gradle-wrapper.properties`
* `gradlew`                                 
* `gradlew.bat`
* `src/main/resources/logback.xml`

Now that our project structure is ready, time to add the meat of the project. You may use any IDE of your choice. My preference is IntelliJ IDEA.

Create a new package under `src/main/kotlin`. The package name should be adapted from the following section of `build.gradle`

&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;vertx&lt;/span&gt; {
    &lt;span class=&quot;hljs-title&quot;&gt;mainVerticle&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;info.usmans.blog.vertx.NetClientVerticle&quot;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the above example, the package name is &lt;code&gt;info.usmans.blog.vertx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Add a new Kotlin Class/file in &lt;code&gt;src/main/kotlin/info/usmans/blog/vertx&lt;/code&gt; as &lt;code&gt;NetClientVerticle.kt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The contents of this class is as follows&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/usmansaleem/2a176a7b752fcb72f7f31964809696fe.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;explaining-the-code&quot;&gt;Explaining the Code&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;fun main(args: Array&lt;String&gt;)&lt;/code&gt; is not strictly required, it quickly allows running the Vert.x verticle from within IDE. You will also notice a small hack in the method for setting system property &lt;code&gt;vertx.disableDnsResolver&lt;/code&gt; which is to avoid a Netty bug that I observed when running on Windows machine and remote server is down. Of course, since we are using vertx-gradle-plugin, we can also use &lt;code&gt;gradle vertxRun&lt;/code&gt; to run our verticle. In this case the &lt;code&gt;main&lt;/code&gt; method will not get called.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;override fun start()&lt;/code&gt; method calls &lt;code&gt;fireReconnectTimer&lt;/code&gt; which in turn calls &lt;code&gt;reconnect&lt;/code&gt; method. &lt;code&gt;reconnect&lt;/code&gt; method contains the connection logic to server as well as it calls &lt;code&gt;fireReconnectTimer&lt;/code&gt; if it is unable to connect to server or disconnects from server. In &lt;code&gt;reconnect&lt;/code&gt; method the &lt;code&gt;socket.handler&lt;/code&gt; gets called when server send message to client.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;socket.handler({ data -&gt;
                        logger.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Data received: ${data}&quot;&lt;/span&gt;)
                        //TODO: Do the work here &lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;
               })&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;distributing-the-project&quot;&gt;Distributing the project&lt;/h2&gt;
&lt;p&gt;To create redistributable jar, use &lt;code&gt;./gradlew shadowJar&lt;/code&gt; command. Or if using IntelliJ: from Gradle projects, Tasks, shadow, shadowJar (right click run). This command will generate &lt;code&gt;./build/libs/vertx-net-client-fat.jar&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;executing-the-client&quot;&gt;Executing the client&lt;/h3&gt;
&lt;p&gt;The client jar can be executed using following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;java &lt;span class=&quot;hljs-variable&quot;&gt;-DserverHost=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;-DserverPort=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;8888&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;-DconnectMessage=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt; -jar vertx-net-client-full.jar&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you wish to use SLF4J for Vert.x internal logging, you need to pass system property &lt;code&gt;vertx.logger-delegate-factory-class-name&lt;/code&gt; with value of &lt;code&gt;io.vertx.core.logging.SLF4JLogDelegateFactory&lt;/code&gt;. The final command would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;java &lt;span class=&quot;hljs-variable&quot;&gt;-DserverHost=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;-DserverPort=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;8888&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;-DconnectMessage=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt; -Dvertx.&lt;span class=&quot;hljs-variable&quot;&gt;logger-delegate-factory-class-name=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;io.vertx.core.logging.SLF4JLogDelegateFactory&quot;&lt;/span&gt; -jar vertx-net-client-full.jar&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can configure Vert.x logging levels in logback.xml file if required.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This post describes how easy it is to create a simple TCP client using Vert.x, Kotlin and Gradle build system. Hopefully the techniques shown here will serve as a starting point for your next DIY project.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block info&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-info-circle&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;Info &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; This post is adapted and reproduced from &lt;a href=&quot;https://usmans.info/usmansaleem/blog/tcp_client_using_vertx_kotlin_gradle&quot;&gt;author’s blog post&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Wed, 20 Dec 2017 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/tcp-client-using-eclipse-vert-x-kotlin-and-gradle-build</link>
          <guid isPermaLink="true">https://vertx.io/blog/tcp-client-using-eclipse-vert-x-kotlin-and-gradle-build</guid>
          <author>
            <name>usmansaleem</name>
            <uri>http://github.com/usmansaleem</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x meets GraphQL</title>
          <description>
      &lt;article&gt;&lt;p&gt;I recently added GraphQL support to &lt;a href=&quot;https://github.com/gentics/mesh&quot;&gt;Gentics Mesh&lt;/a&gt; and I thought it would be a good idea to boil down the essence of my implementation in example so that I could share it in a simpler form.
The example I’m about to show will not cover all aspects that I have added to the &lt;a href=&quot;https://getmesh.io/docs/beta/graphql.html&quot;&gt;Gentics Mesh API&lt;/a&gt; (e.g. paging, search and error handling) but it will give you a basic overview of the parts that I put together.
GraphQL does not require a GraphDB even if the name might suggest it.&lt;/p&gt;
&lt;p&gt;Using a graphdb in combination with GraphQL does nevertheless provide you with some advantages which I will highlight later on.&lt;/p&gt;
&lt;h2 id=&quot;what-is-graphql-what-is-it-good-for-&quot;&gt;What is GraphQL? What is it good for?&lt;/h2&gt;
&lt;p&gt;GraphQL as the name suggests is a new query language which can be used to load exactly the amount of data which you ask for. &lt;/p&gt;
&lt;p&gt;The query is defined in way that the query fields correlate to the JSON data that is being retrieved. 
In our StarWars Demo domain model this query will load the name of human 1001 which is Darth Vader.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-rules&quot;&gt;{
  &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;vader&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt; &lt;span class=&quot;hljs-function&quot;&gt;human&lt;/span&gt;(id: &lt;span class=&quot;hljs-number&quot;&gt;1001&lt;/span&gt;) {
      name
  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;}
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Would result in:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;data&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;{
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;vader&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;{
      &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Darth Vader&quot;&lt;/span&gt;
    &lt;/span&gt;}
  &lt;/span&gt;}
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the-demo-app&quot;&gt;The Demo App&lt;/h2&gt;
&lt;p&gt;The demo application I build makes use of the &lt;a href=&quot;https://github.com/graphql-java/graphql-java&quot;&gt;graphql-java&lt;/a&gt; library. The data is being stored in a graph database.
I use &lt;a href=&quot;http://orientdb.com/orientdb/&quot;&gt;OrientDB&lt;/a&gt; in combination with the &lt;a href=&quot;https://github.com/Syncleus/Ferma&quot;&gt;OGM Ferma&lt;/a&gt; to provide a data access layer.
GraphQL does not necessarily require a graph database but in this example I will make use of one and highlight the benefits of using a GraphDB for my usecase.&lt;/p&gt;
&lt;p&gt;You can find the sources here: &lt;a href=&quot;https://github.com/Jotschi/vertx-graphql-example&quot;&gt;https://github.com/Jotschi/vertx-graphql-example&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;data&quot;&gt;Data&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/Jotschi/vertx-graphql-example/blob/master/src/main/java/de/jotschi/vertx/data/StarWarsData.java&quot;&gt;StarWarsData&lt;/a&gt; class creates a Graph which contains the Star Wars Movies and Characters, Planets and their relations.
The model is fairly simple. There is a single StarWarsRoot vertex which acts as a start element for various aggregation vertices: Movies are stored in MovieRoot, Planets in PlanetsRoot, Characters are stored in HumansRoot and DroidsRoot.&lt;/p&gt;
&lt;p&gt;The model classes are used for wrappers of the specific graph vertices. The &lt;a href=&quot;http://syncleus.com/Ferma/&quot;&gt;Ferma OGM&lt;/a&gt; is used to provide these wrappers. Each class contains methods which can be used to traverse the graph to locate the needed vertices.
The found vertices are in turn again wrapped and can be used to locate other graph elements.&lt;/p&gt;
&lt;h3 id=&quot;schema&quot;&gt;Schema&lt;/h3&gt;
&lt;p&gt;The next thing we need is the GraphQL schema. The schema describes each element which can be retrieved. It also describes the properties and relationships for these elements.&lt;/p&gt;
&lt;p&gt;The graphql-java library provides an API to create the object types and schema information.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; GraphQLObjectType &lt;span class=&quot;hljs-title&quot;&gt;createMovieType&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;newObject&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Movie&quot;&lt;/span&gt;)&lt;/span&gt;
    .&lt;span class=&quot;hljs-title&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;One of the films in the Star Wars universe.&quot;&lt;/span&gt;)&lt;/span&gt;

    &lt;span class=&quot;hljs-comment&quot;&gt;// .title&lt;/span&gt;
    .&lt;span class=&quot;hljs-title&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(newFieldDefinition()&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;title&quot;&lt;/span&gt;)&lt;/span&gt;
        .&lt;span class=&quot;hljs-title&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Title of the episode.&quot;&lt;/span&gt;)&lt;/span&gt;
        .&lt;span class=&quot;hljs-title&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(GraphQLString)&lt;/span&gt;
        .&lt;span class=&quot;hljs-title&quot;&gt;dataFetcher&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;((env)&lt;/span&gt; -&gt; &lt;/span&gt;{
          Movie movie = env.getSource();
          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; movie.getName();
        }))

    &lt;span class=&quot;hljs-comment&quot;&gt;// .description&lt;/span&gt;
    .field(newFieldDefinition().name(&lt;span class=&quot;hljs-string&quot;&gt;&quot;description&quot;&lt;/span&gt;)
        .description(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Description of the episode.&quot;&lt;/span&gt;)
        .type(GraphQLString))

    .build();
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A type can be referenced via a &lt;code&gt;GraphQLTypeReference&lt;/code&gt; once it has been created and added to the schema. This is especially important if you need to add fields which reference other types.
Data fetchers are used to access the context, traverse the graph and retrieve properties from graph elements.&lt;/p&gt;
&lt;p&gt;Another great source to learn more about the schema options is the &lt;a href=&quot;https://github.com/graphql-java/graphql-java/blob/master/src/test/groovy/graphql/GarfieldSchema.java&quot;&gt;GarfieldSchema&lt;/a&gt; example.&lt;/p&gt;
&lt;p&gt;Finally all the created types must be referenced by a central object type &lt;a href=&quot;https://github.com/Jotschi/vertx-graphql-example/blob/master/src/main/java/de/jotschi/vertx/data/StarWarsSchema.java#L204&quot;&gt;QueryType&lt;/a&gt;.
The query type object is basically the root object for the query.
It defines what query options are initially possible. In our case it is possible to load the hero of the sage, specific movies, humans or droids.&lt;/p&gt;
&lt;h3 id=&quot;verticle&quot;&gt;Verticle&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/Jotschi/vertx-graphql-example/blob/master/src/main/java/de/jotschi/vertx/GraphQLVerticle.java&quot;&gt;GraphQLVerticle&lt;/a&gt; is used to accept the GraphQL request and process it.&lt;/p&gt;
&lt;p&gt;The verticle also contains a StaticHandler to provide the Graphiql Browser web interface. This interface will allow you to quickly discover and experiment with GraphQL.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/Jotschi/vertx-graphql-example/blob/master/src/main/java/de/jotschi/vertx/GraphQLVerticle.java#L77&quot;&gt;query handler&lt;/a&gt; accepts the query JSON data. &lt;/p&gt;
&lt;p&gt;An OrientDB transaction is being opened and the query is executed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;demoData.getGraph().asyncTx((tx) -&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Invoke the query and handle the resulting JSON&lt;/span&gt;
    GraphQL graphQL = newGraphQL(schema).build();
    ExecutionInput input = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ExecutionInput(query, &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;, queryJson, demoData.getRoot(), extractVariables(queryJson));
    tx.complete(graphQL.execute(input));
}, (AsyncResult&lt;ExecutionResult&gt; rh) -&gt; {
    ...
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The execute method initially needs a context variable. This context passed along with the query.
In our case the context is the root element of the graph &lt;code&gt;demoData.getRoot()&lt;/code&gt;.
This context element also serves as the initial source for our data fetchers.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;.dataFetcher((env) -&gt; {
    StarWarsRoot root = env.getSource();
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; root.getHero();
}))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The data fetchers for the hero type on the other hand will be able to access the hero element since the fetcher above returned the element.
Using this mechanism it is possible to traverse the graph. It is important to note that each invocation on the domain model methods will directly access the graph database.
This way it is possible to influence the graph database query down to the lowest level. When omitting a property from the graphql query it will not be loaded from the graph.
Thus there is no need to write an additional data access layer. All operations are directly mapped to graph database.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;StarWarsRoot&lt;/code&gt; Ferma class &lt;code&gt;getHero()&lt;/code&gt; method in turn defines a &lt;a href=&quot;http://tinkerpop.apache.org/docs/3.3.0/tutorials/getting-started/#_graph_traversal_staying_simple&quot;&gt;TinkerPop Gremlin traversal&lt;/a&gt; which is used to load the Vertex which represents the hero of the Star Wars saga.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block info&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-info-circle&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;Apache TinkerPop &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; &lt;a href=&quot;http://tinkerpop.apache.org/&quot;&gt;Apache TinkerPop&lt;/a&gt; is an open source, vendor-agnostic, graph framework / API which is supported by many graph database vendors. 
One part of TinkerPop is the Gremlin traversal language which is great to query graph databases.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;...
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Droid &lt;span class=&quot;hljs-title&quot;&gt;getHero&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-comment&quot;&gt;// Follow the HAS_ROOT edge and return the first found Vertex which could be found. &lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;// Wrap the Vertex explicitly in the Droid Ferma class.  &lt;/span&gt;
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;traverse&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;((g)&lt;/span&gt; -&gt; g.&lt;span class=&quot;hljs-title&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HAS_HERO)&lt;/span&gt;).&lt;span class=&quot;hljs-title&quot;&gt;nextOrDefaultExplicit&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Droid.class, &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;
}
...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the query has been executed the result handler is being invoked. It contains some code to process the result data and potential errors.
It is important to note that a GraphQL query will always be answered with a 2xx HTTP status code.
If an element which is being referenced in the query can’t be loaded an error will be added to the response JSON object.&lt;/p&gt;
&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;/h3&gt;
&lt;p&gt;Testing is fairly straight forward. Although there are multiple approaches. One approach is to use unit testing directly on the GraphQL types. 
Another option is to run queries against the endpoint.  &lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/Jotschi/vertx-graphql-example/blob/master/src/test/java/de/jotschi/vertx/GraphQLTest.java&quot;&gt;GraphQLTest class&lt;/a&gt; I wrote will run multiple queries against the endpoint.
A Parameterized JUnit test is used iterate over the queries.&lt;/p&gt;
&lt;p&gt;A &lt;a href=&quot;https://github.com/Jotschi/vertx-graphql-example/blob/master/src/test/resources/graphql/full-query&quot;&gt;typical query&lt;/a&gt; does not only contain the query data.
The assertions on the response JSON are directly included in query using plain comments.&lt;/p&gt;
&lt;p&gt;I build an &lt;a href=&quot;http://joel-costigliola.github.io/assertj/&quot;&gt;AssertJ&lt;/a&gt; assertion to check the comments of a query and verify that the assertion matches the response.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;assertThat(response).compliesToAssertions(queryName);&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;run-the-example&quot;&gt;Run the example&lt;/h2&gt;
&lt;p&gt;You can run the example by executing the &lt;code&gt;GraphQLServer&lt;/code&gt; class and access the &lt;a href=&quot;http://localhost:3000/browser/?query=%7B%0A%20%20movies%20%7B%0A%20%20%20%20title%0A%20%20%7D%0A%20%20hero%20%7B%0A%20%20%20%20name%0A%20%20%7D%0A%7D%0A&quot;&gt;Graphiql browser on http://localhost:3000/browser/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;where-to-go-from-here-&quot;&gt;Where to go from here?&lt;/h2&gt;
&lt;p&gt;The example is read-only. GraphQL also supports data mutation which can be used to actually modify and store data.
I have not yet explored that part of GraphQL but I assume it might not be that hard to add mutation support to the example.&lt;/p&gt;
&lt;p&gt;Additionally it does not cover how to actually make use of such API. I recently &lt;a href=&quot;https://github.com/gentics/mesh-vertx-example/&quot;&gt;updated my Vert.x example&lt;/a&gt; which shows how to use Vert.x template handlers to build a small server which renders some pages using data which was loaded via GraphQL.&lt;/p&gt;
&lt;p&gt;Thanks for reading. If you have any further questions or feedback don’t hesitate to send me a tweet to &lt;a href=&quot;https://twitter.com/Jotschi/&quot;&gt;@Jotschi&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/genticsmesh/&quot;&gt;@genticsmesh&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Tue, 14 Nov 2017 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-meets-graphql</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-meets-graphql</guid>
          <author>
            <name>jotschi</name>
            <uri>http://github.com/jotschi</uri>
          </author>
        </item>
      
        <item>
          <title>Eclipse Vert.x 3.5.0 released !</title>
          <description>
      &lt;article&gt;&lt;p&gt;The Vert.x team is pleased to announce the release of Eclipse Vert.x 3.5.0.&lt;/p&gt;
&lt;p&gt;As usual it delivers an impressive number of high quality features.&lt;/p&gt;
&lt;h4 id=&quot;let-s-go-rxjava2&quot;&gt;Let’s go RxJava2&lt;/h4&gt;
&lt;p&gt;First and foremost this release delivers the RxJava2 API with support of its full range of types.&lt;/p&gt;
&lt;p&gt;In addition of &lt;code&gt;Single&lt;/code&gt;, Rxified APIs also expose the&lt;code&gt;Completable&lt;/code&gt; and &lt;code&gt;Maybe&lt;/code&gt; types:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;// expose &lt;span class=&quot;hljs-type&quot;&gt;Handler&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;AsyncResult&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;&gt;&gt;
&lt;span class=&quot;hljs-type&quot;&gt;Completable&lt;/span&gt; completable = server.rxClose();

completable.subscribe(() -&gt; &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;closed&quot;&lt;/span&gt;));

// expose &lt;span class=&quot;hljs-type&quot;&gt;Handler&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;AsyncResult&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;&gt;&gt; where the &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; can be null
&lt;span class=&quot;hljs-type&quot;&gt;Maybe&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;&gt; ipAddress = dnsClient.rxLookup(&lt;span class=&quot;hljs-string&quot;&gt;&quot;www.google.com&quot;&lt;/span&gt;);
ipAddress.subscribe(
  value -&gt; &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;resolved to &quot;&lt;/span&gt; + value),
  err -&gt; err.printStackTrace(),
  () -&gt; &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;does not resolve&quot;&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RxJava augments Vert.x streams with a &lt;code&gt;toObservable()&lt;/code&gt; method, likewise RxJava2 adds the &lt;code&gt;toFlowable()&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-prompt&quot;&gt;// Flowable&lt;Buffer&gt;&lt;/span&gt; maps to a &lt;span class=&quot;hljs-constant&quot;&gt;ReadStream&lt;/span&gt;&lt;&lt;span class=&quot;hljs-constant&quot;&gt;Buffer&lt;/span&gt;&gt;
&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; back-pressured stream
&lt;span class=&quot;hljs-prompt&quot;&gt;Flowable&lt;Buffer&gt;&lt;/span&gt; flowable = asyncFile.toFlowable();

&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; but we still can get an &lt;span class=&quot;hljs-constant&quot;&gt;Observable&lt;/span&gt;&lt;&lt;span class=&quot;hljs-constant&quot;&gt;Buffer&lt;/span&gt;&gt;
&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; non back-pressured stream
&lt;span class=&quot;hljs-prompt&quot;&gt;Observable&lt;Buffer&gt;&lt;/span&gt; flowable = asyncFile.toObservable();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What’s so different between &lt;code&gt;Flowable&lt;/code&gt; and &lt;code&gt;Observable&lt;/code&gt;? the former handles back-pressure, i.e the
subscriber can control the flow of items and the later can not!!!&lt;/p&gt;
&lt;p&gt;You can read the documentation in the section of the &lt;a href=&quot;https://vertx.io/docs/master/vertx-rx/java2/&quot;&gt;docs&lt;/a&gt;
or go straight to the &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/master/rxjava2-examples&quot;&gt;examples&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;kotlin-coroutines&quot;&gt;Kotlin coroutines&lt;/h4&gt;
&lt;p&gt;Support for &lt;a href=&quot;https://vertx.io/docs/vertx-lang-kotlin-coroutines/kotlin/&quot;&gt;Kotlin Coroutines&lt;/a&gt; is one of my favourite 3.5 features (by the way I’ll present a talk about Vert.x
and coroutines at &lt;a href=&quot;https://www.kotlinconf.com/sessions/&quot;&gt;KotlinConf&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Coroutines allows you to reason about asynchronous flow the same way you do with traditional sequential flow with
the extra bonus to use &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt;/&lt;code&gt;finally&lt;/code&gt; super combo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;val movie = ctx.pathParam(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;)
val rating = &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt;.parseInt(ctx.queryParam(&lt;span class=&quot;hljs-string&quot;&gt;&quot;getRating&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])
val connection = awaitResult&lt;&lt;span class=&quot;hljs-type&quot;&gt;SQLConnection&lt;/span&gt;&gt; { client.getConnection(it) }
&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
  val &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; = awaitResult&lt;&lt;span class=&quot;hljs-type&quot;&gt;ResultSet&lt;/span&gt;&gt; { connection.queryWithParams(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT TITLE FROM MOVIE WHERE ID=?&quot;&lt;/span&gt;, json { &lt;span class=&quot;hljs-type&quot;&gt;array&lt;/span&gt;(movie) }, it) }
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;.rows.size == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {
    awaitResult&lt;&lt;span class=&quot;hljs-type&quot;&gt;UpdateResult&lt;/span&gt;&gt; { connection.updateWithParams(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO RATING (VALUE, MOVIE_ID) VALUES ?, ?&quot;&lt;/span&gt;, json { &lt;span class=&quot;hljs-type&quot;&gt;array&lt;/span&gt;(rating, movie) }, it) }
    ctx.response().setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;()
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    ctx.response().setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;404&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;()
  }
} &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt; {
  connection.close()
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example is borrowed from our &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/master/kotlin-examples/coroutines&quot;&gt;examples&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;NOTE: I’ve used &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;finally&lt;/code&gt; purposely instead of Kotlin’s &lt;code&gt;use&lt;/code&gt; extension method&lt;/p&gt;
&lt;h4 id=&quot;mqtt-client&quot;&gt;MQTT Client&lt;/h4&gt;
&lt;p&gt;In Vert.x 3.4 we added the &lt;a href=&quot;https://vertx.io/docs/vertx-mqtt/java/#_vert_x_mqtt_server&quot;&gt;MQTT server&lt;/a&gt;, 3.5 completes the
MQTT story with the &lt;a href=&quot;https://vertx.io/docs/vertx-mqtt/java/#_vert_x_mqtt_client&quot;&gt;MQTT client&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;MqttClient mqttClient = MqttClient.create(vertx,
   &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MqttClientOptions()
     .setPort(BROKER_PORT)
     .setHost(BROKER_HOST)).connect(ar -&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Connected to a server&quot;&lt;/span&gt;);

    mqttClient.publish(
      MQTT_TOPIC,
      Buffer.buffer(MQTT_MESSAGE),
      MqttQoS.AT_MOST_ONCE,
      &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;,
      &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;,
      s -&gt; mqttClient.disconnect(d -&gt; System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Disconnected from server&quot;&lt;/span&gt;)));
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Failed to connect to a server&quot;&lt;/span&gt;);
    ar.cause().printStackTrace();
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find MQTT client and server examples &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/master/mqtt-examples&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;web-api-contracts&quot;&gt;Web API contracts&lt;/h4&gt;
&lt;p&gt;With the new &lt;a href=&quot;https://vertx.io/docs/vertx-web-api-contract/java/&quot;&gt;OpenAPI&lt;/a&gt; router factory we can focus on the API implementation and not on the validation
of the input. The usage is quite simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;OpenAPI3RouterFactory&lt;/span&gt;.createRouterFactoryFromFile(vertx, &lt;span class=&quot;hljs-string&quot;&gt;&quot;petstore.yaml&quot;&lt;/span&gt;, ar -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    // &lt;span class=&quot;hljs-type&quot;&gt;Spec&lt;/span&gt; loaded &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; success
    &lt;span class=&quot;hljs-type&quot;&gt;OpenAPI3RouterFactory&lt;/span&gt; routerFactory = ar.&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;();

    // add your &lt;span class=&quot;hljs-type&quot;&gt;API&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; security handlers to the factory

    // add it to a server
    vertx.createHttpServer()
      .requestHandler(routerFactory.getRouter()::accept)
      .listen();
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    // &lt;span class=&quot;hljs-type&quot;&gt;Something&lt;/span&gt; went wrong during router factory initialization
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now as a developer you only need to care about the API and not on the validation. The OpenAPI router will ensure that a
request to an API will first to the contract before your handler is invoked.&lt;/p&gt;
&lt;h4 id=&quot;java-9-support&quot;&gt;Java 9 support&lt;/h4&gt;
&lt;p&gt;Java 9 was released a few days ago and the Vert.x stack has been carefully tested on Java 9 and most of our components
run on Java 9 (Groovy does not run well on Java 9, please see the support &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/Java-9-Support&quot;&gt;matrix&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;As a bonus you can now use HTTP/2 out of the box with JDK SSL!&lt;/p&gt;
&lt;p&gt;You can also use Vert.x jars as anonymous modules.&lt;/p&gt;
&lt;h4 id=&quot;event-driven-json-parsing&quot;&gt;Event driven JSON Parsing&lt;/h4&gt;
&lt;p&gt;We provide now an event driven &lt;a href=&quot;https://vertx.io/docs/apidocs/io/vertx/core/parsetools/JsonParser.html&quot;&gt;JSON Parser&lt;/a&gt; emitting parse events that is very handy when you need to handle very large
JSON structures and you don’t want to buffer it which introduce extra latency and increase the memory consumption.&lt;/p&gt;
&lt;p&gt;The parser allows you to switch between fine grained JSON parse events or full structures, for instance
you can parse an array of object very efficiently:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;JsonParser parser = JsonParser.newParser();

&lt;span class=&quot;hljs-comment&quot;&gt;// The parser will handle JSON objects as values&lt;/span&gt;
parser.objectValueMode();

parser.handler(event -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (event.type()) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;START_ARRAY:&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// Start the array&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;END_ARRAY:&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// End the array&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;VALUE:&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// Handle each object&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;single-sql-operations&quot;&gt;Single SQL operations&lt;/h4&gt;
&lt;p&gt;Single SQL operations (aka &lt;em&gt;one-shot&lt;/em&gt;) have been drastically simplified: most of the &lt;code&gt;SQLOperations&lt;/code&gt; operations can now be 
performed directly on the &lt;code&gt;SQLClient&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;client.queryWithParams(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT AVG(VALUE) AS VALUE FROM RATING WHERE MOVIE_ID=?&quot;&lt;/span&gt;, new &lt;span class=&quot;hljs-type&quot;&gt;JsonArray&lt;/span&gt;().add(id), ar2 -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; value = ar.&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;().get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).getInteger(&lt;span class=&quot;hljs-string&quot;&gt;&quot;VALUE&quot;&lt;/span&gt;);
    // &lt;span class=&quot;hljs-type&quot;&gt;Continue&lt;/span&gt;
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Under the hood, the client takes care of the pool acquire/release interaction for you.&lt;/p&gt;
&lt;h4 id=&quot;native-transport-and-domain-sockets&quot;&gt;Native transport and domain sockets&lt;/h4&gt;
&lt;p&gt;We now support &lt;a href=&quot;https://vertx.io/docs/vertx-core/java/#_native_transports&quot;&gt;native transports&lt;/a&gt; on Linux (Epoll) and MacOS (KQueue), as well as &lt;a href=&quot;https://vertx.io/docs/vertx-core/java/#_domain_sockets&quot;&gt;UNIX domain sockets&lt;/a&gt; for
&lt;code&gt;NetServer/NetClient&lt;/code&gt; (&lt;code&gt;HttpServer&lt;/code&gt;/&lt;code&gt;HttpClient&lt;/code&gt; should support UNIX domain sockets soon).&lt;/p&gt;
&lt;h4 id=&quot;auth-handler-chaining&quot;&gt;Auth handler chaining&lt;/h4&gt;
&lt;p&gt;There are times when you want to support multiple authN/authZ mechanisms in a single application.&lt;/p&gt;
&lt;p&gt;Vert.x Web supports auth handlers &lt;a href=&quot;https://vertx.io/docs/vertx-web/java/#_chaining_multiple_auth_handlers&quot;&gt;chaining&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;vert-x-config-improvements&quot;&gt;Vert.x config improvements&lt;/h4&gt;
&lt;p&gt;Vert.x Config allows configuring your application by assembling config chunks from different locations such as file,
http, zookeeper…&lt;/p&gt;
&lt;p&gt;In this version, we have added the support for Consul and Vault.&lt;/p&gt;
&lt;p&gt;With the &lt;a href=&quot;https://vertx.io/docs/vertx-config/java/#_consul_configuration_store&quot;&gt;Consul config store&lt;/a&gt;, you can retrieve your configuration from a Consul server - so in other words, distribute
the configuration from your orchestration infrastructure.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://vertx.io/docs/vertx-config/java/#_vault_config_store&quot;&gt;Vault config store&lt;/a&gt; lets you retrieve secrets avoiding hard coding secrets or distributing credentials using an
insecure way. Vault enforces the security of your secrets and only allowed applications can retrieve them. In other
words, now you can keep your secrets secret.&lt;/p&gt;
&lt;h4 id=&quot;acks&quot;&gt;ACKs&lt;/h4&gt;
&lt;p&gt;I want on behalf of the team to thank all the contributors for this release including the Google Summer of Code students
(&lt;a href=&quot;https://twitter.com/titantins&quot;&gt;Pavel Drankov&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/slinkyguardiani&quot;&gt;Francesco Guardiani&lt;/a&gt; and &lt;a href=&quot;https://yunyul.in&quot;&gt;Yunyu Lin&lt;/a&gt;)
that delivered an impressive work.&lt;/p&gt;
&lt;h4 id=&quot;finally&quot;&gt;Finally&lt;/h4&gt;
&lt;p&gt;The release notes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.5.0-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.5.0-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available
from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.5.0%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.5.0/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Fri, 20 Oct 2017 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/eclipse-vert-x-3-5-0-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-5-0-released</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>An Eclipse Vert.x Gradle Plugin</title>
          <description>
      &lt;article&gt;&lt;p&gt;Eclipse Vert.x is a versatile toolkit, and as such it does not have any strong opinion on the tools that you should be using.&lt;/p&gt;
&lt;p&gt;Gradle is a popular build tool in the JVM ecosystem, and it is quite easy to use for building Vert.x project as &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/blob/master/gradle-verticles/gradle-verticle/build.gradle&quot;&gt;show in one of the &lt;code&gt;vertx-examples&lt;/code&gt; samples&lt;/a&gt; where a so-called &lt;em&gt;fat Jar&lt;/em&gt; is being produced.&lt;/p&gt;
&lt;p&gt;The new &lt;a href=&quot;https://plugins.gradle.org/plugin/io.vertx.vertx-plugin&quot;&gt;Vert.x Gradle plugin&lt;/a&gt; offers an &lt;em&gt;opinionated&lt;/em&gt; plugin for building Vert.x applications with Gradle.&lt;/p&gt;
&lt;p&gt;It automatically applies the following plugins:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;java&lt;/code&gt; (and sets the source compatibility to Java 8),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application&lt;/code&gt; + &lt;code&gt;shadow&lt;/code&gt; to generate fat Jars with all dependencies bundled,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nebula-dependency-recommender-plugin&lt;/code&gt; so that you can omit versions from modules from the the Vert.x stack.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The plugin automatically adds &lt;code&gt;io.vertx:vertx-core&lt;/code&gt; as a &lt;code&gt;compile&lt;/code&gt; dependency, so you don’t need to do it.&lt;/p&gt;
&lt;p&gt;The plugin provides a &lt;code&gt;vertxRun&lt;/code&gt; task that can take advantage of the Vert.x auto-reloading capabilities, so you can just run it then have your code being automatically compiled and reloaded as you make changes.&lt;/p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;
&lt;p&gt;A minimal &lt;code&gt;build.gradle&lt;/code&gt; looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs groovy&quot;&gt;plugins {
  id &lt;span class=&quot;hljs-string&quot;&gt;&#39;io.vertx.vertx-plugin&#39;&lt;/span&gt; version &lt;span class=&quot;hljs-string&quot;&gt;&#39;0.0.4&#39;&lt;/span&gt;
}

repositories {
  jcenter()
}

vertx {
  mainVerticle = &lt;span class=&quot;hljs-string&quot;&gt;&#39;sample.App&#39;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Provided &lt;code&gt;sample.App&lt;/code&gt; is a Vert.x verticle, then:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;gradle shadowJar&lt;/code&gt; builds an executable Jar with all dependencies: &lt;code&gt;java -jar build/libs/simple-project-fat.jar&lt;/code&gt;, and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gradle vertxRun&lt;/code&gt; starts the application and automatically recompiles (&lt;code&gt;gradle classes&lt;/code&gt;) and reloads the code when any file under &lt;code&gt;src/&lt;/code&gt; is being added, modified or deleted.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;using-with-kotlin-or-groovy-or-&quot;&gt;Using with Kotlin (or Groovy, or…)&lt;/h2&gt;
&lt;p&gt;The plugin integrates well with plugins that add configurations and tasks triggered by the &lt;code&gt;classes&lt;/code&gt; task.&lt;/p&gt;
&lt;p&gt;Here is how to use the plugin with Kotlin (replace the version numbers with the latest ones…):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs groovy&quot;&gt;plugins {
  id &lt;span class=&quot;hljs-string&quot;&gt;&#39;io.vertx.vertx-plugin&#39;&lt;/span&gt; version &lt;span class=&quot;hljs-string&quot;&gt;&#39;x.y.z&#39;&lt;/span&gt;
  id &lt;span class=&quot;hljs-string&quot;&gt;&#39;org.jetbrains.kotlin.jvm&#39;&lt;/span&gt; version &lt;span class=&quot;hljs-string&quot;&gt;&#39;a.b.c&#39;&lt;/span&gt;
}

repositories {
  jcenter()
}

dependencies {
  compile &lt;span class=&quot;hljs-string&quot;&gt;&#39;io.vertx:vertx-lang-kotlin&#39;&lt;/span&gt;
  compile &lt;span class=&quot;hljs-string&quot;&gt;&#39;org.jetbrains.kotlin:kotlin-stdlib-jre8&#39;&lt;/span&gt;
}

vertx {
  mainVerticle = &lt;span class=&quot;hljs-string&quot;&gt;&quot;sample.MainVerticle&quot;&lt;/span&gt;
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
  kotlinOptions {
    jvmTarget = &lt;span class=&quot;hljs-string&quot;&gt;&quot;1.8&quot;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;using-with-webpack-or-any-other-custom-task-&quot;&gt;Using with WebPack (or any other custom task)&lt;/h2&gt;
&lt;p&gt;WebPack is popular to bundle web assets, and there is even &lt;a href=&quot;https://guides.gradle.org/running-webpack-with-gradle/&quot;&gt;a guide for its integration with Gradle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Mixing the Vert.x Gradle plugin with WebPack is very simple, especially in combination with the &lt;code&gt;com.moowork.node&lt;/code&gt; plugin that integrates Node into Gradle.&lt;/p&gt;
&lt;p&gt;Suppose we want to mix Vert.x code and JavaScript with Gradle and WebPack.
We assume a &lt;code&gt;package.json&lt;/code&gt; as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;webpack-sample&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;A sample with Vert.x, Gradle and Webpack&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;src/main/webapp/index.js&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;&lt;/span&gt;
  },
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;author&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;license&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;ISC&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;webpack&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;^2.7.0&quot;&lt;/span&gt;
  },
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;axios&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;^0.16.2&quot;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and &lt;code&gt;webpack.config.js&lt;/code&gt; as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;module&lt;/span&gt;.exports = {
  entry: &lt;span class=&quot;hljs-string&quot;&gt;&#39;./src/main/webapp/index.js&#39;&lt;/span&gt;,
  output: {
    filename: &lt;span class=&quot;hljs-string&quot;&gt;&#39;./build/resources/main/webroot/bundle.js&#39;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;build.gradle&lt;/code&gt; file is the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs groovy&quot;&gt;plugins {
  id &lt;span class=&quot;hljs-string&quot;&gt;&#39;io.vertx.vertx-plugin&#39;&lt;/span&gt; version &lt;span class=&quot;hljs-string&quot;&gt;&#39;0.0.4&#39;&lt;/span&gt;
  id &lt;span class=&quot;hljs-string&quot;&gt;&#39;com.moowork.node&#39;&lt;/span&gt; version &lt;span class=&quot;hljs-string&quot;&gt;&#39;1.2.0&#39;&lt;/span&gt;
}

repositories {
  jcenter()
}

dependencies {
  compile &lt;span class=&quot;hljs-string&quot;&gt;&quot;io.vertx:vertx-web&quot;&lt;/span&gt;
}

vertx {
  mainVerticle = &lt;span class=&quot;hljs-string&quot;&gt;&quot;sample.MainVerticle&quot;&lt;/span&gt;
  watch = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;src/**/*&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;build.gradle&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;yarn.lock&quot;&lt;/span&gt;]
  onRedeploy = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;classes&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;webpack&quot;&lt;/span&gt;]
}

task webpack(&lt;span class=&quot;hljs-string&quot;&gt;type:&lt;/span&gt; Exec) {
  inputs.file(&lt;span class=&quot;hljs-string&quot;&gt;&quot;$projectDir/yarn.lock&quot;&lt;/span&gt;)
  inputs.file(&lt;span class=&quot;hljs-string&quot;&gt;&quot;$projectDir/webpack.config.js&quot;&lt;/span&gt;)
  inputs.dir(&lt;span class=&quot;hljs-string&quot;&gt;&quot;$projectDir/src/main/webapp&quot;&lt;/span&gt;)
  outputs.dir(&lt;span class=&quot;hljs-string&quot;&gt;&quot;$buildDir/resources/main/webroot&quot;&lt;/span&gt;)
  commandLine &lt;span class=&quot;hljs-string&quot;&gt;&quot;$projectDir/node_modules/.bin/webpack&quot;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This custom build exposes a &lt;code&gt;webpack&lt;/code&gt; task that invokes WebPack, with proper file tracking so that Gradle knows when the task is up-to-date or not.&lt;/p&gt;
&lt;p&gt;The Node plugin adds many tasks, and integrates fine with &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;, so fetching all NPM dependencies is done by calling &lt;code&gt;./gradlew yarn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;vertxRun&lt;/code&gt; task now redeploys on modifications to files in &lt;code&gt;src/&lt;/code&gt; (and sub-folders), &lt;code&gt;build.gradle&lt;/code&gt; and &lt;code&gt;yarn.lock&lt;/code&gt;, calling both the &lt;code&gt;classes&lt;/code&gt; and &lt;code&gt;webpack&lt;/code&gt; tasks:&lt;/p&gt;
&lt;iframe width=&quot;872&quot; height=&quot;602&quot; src=&quot;https://www.youtube.com/embed/OGy-1w8Z6Dc?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;The Vert.x Gradle plugin provides lots of defaults to configure a Gradle project for Vert.x applications, producing &lt;em&gt;fat Jars&lt;/em&gt; and offering a running task with automatic redeployment.
The plugin also integrates well with other plugins and external tools for which a Gradle task is available.&lt;/p&gt;
&lt;p&gt;The project is still in its early stages and we are looking forward to hearing from you!&lt;/p&gt;
&lt;h3 id=&quot;links&quot;&gt;Links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jponge/vertx-gradle-plugin&quot;&gt;The project on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://plugins.gradle.org/plugin/io.vertx.vertx-plugin&quot;&gt;The plugin on the Gradle plugins portal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;
      </description>
          <pubDate>Thu, 28 Sep 2017 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/an-eclipse-vert-x-gradle-plugin</link>
          <guid isPermaLink="true">https://vertx.io/blog/an-eclipse-vert-x-gradle-plugin</guid>
          <author>
            <name>jponge</name>
            <uri>http://github.com/jponge</uri>
          </author>
        </item>
      
        <item>
          <title>Introducing Vert.x MQTT client</title>
          <description>
      &lt;article&gt;&lt;p&gt;In this article we will see how to sett up the new Vert.x MQTT client. Actually, I have a &lt;a href=&quot;https://github.com/Sammers21/vertx-mqtt-client-example&quot;&gt;real example&lt;/a&gt; so you can try it quickly.&lt;/p&gt;
&lt;p&gt;If you are using Maven or Gradle, add the following dependency to the dependencies section of your project descriptor to access the Vert.x MQTT client:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Maven (in your pom.xml):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.vertx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;vertx-mqtt&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;3.5.0.Beta1&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Gradle (in your build.gradle file):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs groovy&quot;&gt;dependencies {
  compile &lt;span class=&quot;hljs-string&quot;&gt;&#39;io.vertx:vertx-mqtt:3.5.0.Beta1&#39;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that you’ve set up your project, you can create a simple application which will receive all messages from all broker channels:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.core.AbstractVerticle;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.mqtt.MqttClient;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.mqtt.MqttClientOptions;

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.UnsupportedEncodingException;

&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MainVerticle&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AbstractVerticle&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
     MqttClientOptions options = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MqttClientOptions();
      &lt;span class=&quot;hljs-comment&quot;&gt;// specify broker host&lt;/span&gt;
      options.setHost(&lt;span class=&quot;hljs-string&quot;&gt;&quot;iot.eclipse.org&quot;&lt;/span&gt;);
      &lt;span class=&quot;hljs-comment&quot;&gt;// specify max size of message in bytes&lt;/span&gt;
      options.setMaxMessageSize(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;_000_000);

    MqttClient client = MqttClient.create(vertx, options);

    client.publishHandler(s -&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
        String message = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; String(s.payload().getBytes(), &lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);
        System.out.println(String.format(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Receive message with content: \&quot;%s\&quot; from topic \&quot;%s\&quot;&quot;&lt;/span&gt;, message, s.topicName()));
      } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (UnsupportedEncodingException e) {
        e.printStackTrace();
      }
    });

    client.connect(s -&gt; {
      &lt;span class=&quot;hljs-comment&quot;&gt;// subscribe to all subtopics&lt;/span&gt;
      client.subscribe(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);
    });
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;publishHandler&lt;/strong&gt; is the handler called each time the broker, located at &lt;code&gt;iot.eclipse.org:1883&lt;/code&gt;, sends a message to you, from the topics you are subscribing for.&lt;/p&gt;
&lt;p&gt;But only providing a handler is not enough, you should also connect to the broker and subscribe to some topics. For this reason, you should use the &lt;strong&gt;connect&lt;/strong&gt; method and then call &lt;strong&gt;subscribe&lt;/strong&gt; when the connection established. &lt;/p&gt;
&lt;p&gt;To deploy this verticle from an application you should have in your &lt;strong&gt;main&lt;/strong&gt; method something like that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;Vertx vertx = Vertx.vertx();
vertx.deployVerticle(MainVerticle.class.getCanonicalName());&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you have completed all steps correctly the result should look like that:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/b4yYQJE.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;As the alternative and recommended way to bootstrap Vert.x applications you can use &lt;a href=&quot;https://github.com/vert-x3/vertx-maven-starter&quot;&gt;vertx-maven-starter&lt;/a&gt; or &lt;a href=&quot;https://github.com/vert-x3/vertx-gradle-starter&quot;&gt;vertx-gradle-starter&lt;/a&gt;. For completing this guide I have used the first one. The final source code available &lt;a href=&quot;https://github.com/Sammers21/vertx-mqtt-client-example&quot;&gt;here&lt;/a&gt;. If you would like to learn more about Vert.x MQTT client API then check out the &lt;a href=&quot;https://github.com/vert-x3/vertx-mqtt-client/blob/initial-work/src/main/asciidoc/java/index.adoc&quot;&gt;full documentation&lt;/a&gt; and &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/3.5.0.beta1/mqtt-examples&quot;&gt;more examples&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Thank you for reading!&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 21 Aug 2017 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/introducing-vert-x-mqtt-client</link>
          <guid isPermaLink="true">https://vertx.io/blog/introducing-vert-x-mqtt-client</guid>
          <author>
            <name>sammers21</name>
            <uri>http://github.com/sammers21</uri>
          </author>
        </item>
      
        <item>
          <title>Vert.x 3.5.0.Beta1</title>
          <description>
      &lt;article&gt;&lt;p&gt;it’s summer time and we have just released Vert.x 3.5.0.Beta1!&lt;/p&gt;
&lt;h3 id=&quot;let-s-go-rxjava2&quot;&gt;Let’s go RxJava2&lt;/h3&gt;
&lt;p&gt;First and foremost this release delivers the RxJava2 API with support of its full range of types.&lt;/p&gt;
&lt;p&gt;In addition of &lt;code&gt;Single&lt;/code&gt;, Rxified APIs expose also the&lt;code&gt;Completable&lt;/code&gt; and &lt;code&gt;Maybe&lt;/code&gt; types&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;// expose &lt;span class=&quot;hljs-type&quot;&gt;Handler&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;AsyncResult&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;&gt;&gt;
&lt;span class=&quot;hljs-type&quot;&gt;Completable&lt;/span&gt; completable = server.rxClose();

completable.subscribe(() -&gt; &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;closed&quot;&lt;/span&gt;));

// expose &lt;span class=&quot;hljs-type&quot;&gt;Handler&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;AsyncResult&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;&gt;&gt; where the &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; can be null
&lt;span class=&quot;hljs-type&quot;&gt;Maybe&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;&gt; ipAddress = dnsClient.rxLookup(&lt;span class=&quot;hljs-string&quot;&gt;&quot;www.google.com&quot;&lt;/span&gt;);
ipAddress.subscribe(
  value -&gt; &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;resolved to &quot;&lt;/span&gt; + value),
  err -&gt; err.printStackTrace(),
  () -&gt; &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;does not resolve&quot;&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RxJava augments Vert.x streams with a &lt;code&gt;toObservable()&lt;/code&gt; method, RxJava2 adds the &lt;code&gt;toFlowable()&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-prompt&quot;&gt;// Flowable&lt;Buffer&gt;&lt;/span&gt; maps to a &lt;span class=&quot;hljs-constant&quot;&gt;ReadStream&lt;/span&gt;&lt;&lt;span class=&quot;hljs-constant&quot;&gt;Buffer&lt;/span&gt;&gt;
&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; back-pressured stream
&lt;span class=&quot;hljs-prompt&quot;&gt;Flowable&lt;Buffer&gt;&lt;/span&gt; flowable = asyncFile.toFlowable();

&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; but we still can get an &lt;span class=&quot;hljs-constant&quot;&gt;Observable&lt;/span&gt;&lt;&lt;span class=&quot;hljs-constant&quot;&gt;Buffer&lt;/span&gt;&gt;
&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; non back-pressured stream
&lt;span class=&quot;hljs-prompt&quot;&gt;Observable&lt;Buffer&gt;&lt;/span&gt; flowable = asyncFile.toObservable();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What’s so different between &lt;code&gt;Flowable&lt;/code&gt; and &lt;code&gt;Observable&lt;/code&gt; ? the former handles back-pressure, i.e the
subscriber can control the flow of items and the later can not!!!&lt;/p&gt;
&lt;p&gt;You can read the documentation in the beta section of the &lt;a href=&quot;http://vertx.io/docs/3.5.0.Beta1/vertx-rx/java2/&quot;&gt;docs&lt;/a&gt;
or go straight to the &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/3.5.0.beta1/rxjava2-examples&quot;&gt;examples&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;mqtt-client&quot;&gt;MQTT Client&lt;/h3&gt;
&lt;p&gt;In Vert.x 3.4 we added the MQTT server, 3.5 completes the MQTT story with the MQTT client:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;MqttClient mqttClient = MqttClient.create(vertx,
   &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MqttClientOptions()
     .setPort(BROKER_PORT)
     .setHost(BROKER_HOST)).connect(ar -&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Connected to a server&quot;&lt;/span&gt;);

    mqttClient.publish(
      MQTT_TOPIC,
      Buffer.buffer(MQTT_MESSAGE),
      MqttQoS.AT_MOST_ONCE,
      &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;,
      &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;,
      s -&gt; mqttClient.disconnect(d -&gt; System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Disconnected from server&quot;&lt;/span&gt;)));
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Failed to connect to a server&quot;&lt;/span&gt;);
    ar.cause().printStackTrace();
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find MQTT client and server examples &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/3.5.0.beta1/mqtt-examples&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;auth-handler-chaining&quot;&gt;Auth handler chaining&lt;/h3&gt;
&lt;p&gt;There are times when you want to support multiple authN/authZ mechanisms in a single application.&lt;/p&gt;
&lt;p&gt;Vert.x Web supports auth handlers &lt;a href=&quot;http://vertx.io/docs/3.5.0.Beta1/vertx-web/java/#_chaining_multiple_auth_handlers&quot;&gt;chaining&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;ChainAuthHandler chain = ChainAuthHandler.create();

&lt;span class=&quot;hljs-comment&quot;&gt;// add http basic auth handler to the chain&lt;/span&gt;
chain.&lt;span class=&quot;hljs-built_in&quot;&gt;append&lt;/span&gt;(BasicAuthHandler.create(provider));

&lt;span class=&quot;hljs-comment&quot;&gt;// add form redirect auth handler to the chain&lt;/span&gt;
chain.&lt;span class=&quot;hljs-built_in&quot;&gt;append&lt;/span&gt;(RedirectAuthHandler.create(provider));

&lt;span class=&quot;hljs-comment&quot;&gt;// secure your route&lt;/span&gt;
router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/secure/resource&quot;&lt;/span&gt;).handler(chain);

&lt;span class=&quot;hljs-comment&quot;&gt;// your app&lt;/span&gt;
router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/secure/resource&quot;&lt;/span&gt;).handler(ctx -&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// do something...&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;finally&quot;&gt;Finally&lt;/h3&gt;
&lt;p&gt;this beta also provides&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vert.x Config stores for Vault and Consul&lt;/li&gt;
&lt;li&gt;Upgrade to Hazelcast 3.8.2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;use-it-&quot;&gt;Use it!&lt;/h3&gt;
&lt;p&gt;You can use and consume it in your projects from Maven or Gradle as usual with the version &lt;code&gt;3.5.0.Beta1&lt;/code&gt; or read&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;a href=&quot;http://vertx.io/docs/index-beta.html&quot;&gt;documentation preview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;see the &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/3.5.0.beta1&quot;&gt;examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also download various binaries from Maven Central:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://search.maven.org/remotecontent?filepath=io/vertx/vertx-stack-manager/3.5.0.Beta1/vertx-stack-manager-3.5.0.Beta1.tar.gz&quot;&gt;base distrib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://search.maven.org/remotecontent?filepath=io/vertx/vertx-stack-manager/3.5.0.Beta1/vertx-stack-manager-3.5.0.Beta1-full.tar.gz&quot;&gt;full distrib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://search.maven.org/remotecontent?filepath=io/vertx/vertx-stack-manager/3.5.0.Beta1/vertx-stack-manager-3.5.0.Beta1-docs.zip&quot;&gt;docs zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://search.maven.org/remotecontent?filepath=io/vertx/vertx-stack-manager/3.5.0.Beta1/vertx-stack-manager-3.5.0.Beta1-stack-scala.tar.gz&quot;&gt;scala distrib&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;as usual feedback is very important to us and one goal of this beta release is to let the community
provide early feedback!&lt;/p&gt;
&lt;p&gt;The final is expected at the beginning of October.&lt;/p&gt;
&lt;p&gt;Enjoy&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Thu, 10 Aug 2017 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/vert-x-3-5-0-beta1</link>
          <guid isPermaLink="true">https://vertx.io/blog/vert-x-3-5-0-beta1</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>OpenAPI (fka Swagger) 3 support in Eclipse Vert.x now in test stage!</title>
          <description>
      &lt;article&gt;&lt;p&gt;&lt;div class=&#39;admonition-block important&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-exclamation-circle&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;Now on upstream! &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; We have published this package with name &lt;code&gt;vertx-web-api-contract&lt;/code&gt; &lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;As GSoC 2017’s student, I’m actually working on an embedded support to OpenAPI 3 standard inside Eclipse Vert.x framework. Now, after a lot of work, you can try it!&lt;/p&gt;
&lt;h2 id=&quot;why-openapi-3-&quot;&gt;Why OpenAPI 3?&lt;/h2&gt;
&lt;p&gt;OpenAPI 2 is the most important industry-grade standard for API Specifications. As you can see on &lt;a href=&quot;https://www.openapis.org/blog/2017/05/25/the-open-api-initiative-is-sending-you-a-save-the-date-card?utm_source=Blog&amp;utm_medium=Twitter&amp;utm_campaign=SaveTheDate&quot;&gt;official blog of OpenAPI Initiative&lt;/a&gt;, the release of version 3 is behind the corner, so we want to give to our community the latest tools for the latest standards!&lt;/p&gt;
&lt;p&gt;Vert.x project objective is to give you more integrated tools. With this new support, it gives you the ability to use the &lt;a href=&quot;https://swaggerhub.com/blog/api-design/design-first-or-code-first-api-development/&quot;&gt;Design Driven&lt;/a&gt; (or Design First) approach &lt;strong&gt;without loading any thirds parties libraries&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;
&lt;p&gt;The actually supported features are the following (we reefer to OpenAPI version 3.0.0):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenAPI 3 compliant API specification validation with &lt;strong&gt;loading of external Json schemas&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Automatic request validation&lt;/li&gt;
&lt;li&gt;Automatic mount of security validation handlers&lt;/li&gt;
&lt;li&gt;Automatic 501 response for not implemented operations&lt;/li&gt;
&lt;li&gt;Router factory to provide all this features to users&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Automatic request validation is provided by a new handler: &lt;code&gt;ValidationHandler&lt;/code&gt;. You can also define your own &lt;code&gt;ValidationHandler&lt;/code&gt; without API specifications, but I will discuss it later.&lt;/p&gt;
&lt;p&gt;The request validation (provided by subclass &lt;code&gt;OpenAPI3RequestValidationHandler&lt;/code&gt;) actually supports:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Parameters defined in &lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md#parameter-object&quot;&gt;Parameter object&lt;/a&gt;. We support every type of parameter, including &lt;code&gt;object&lt;/code&gt; and &lt;code&gt;array&lt;/code&gt;. We also support every type description field (for example &lt;code&gt;format&lt;/code&gt;, &lt;code&gt;minimum&lt;/code&gt;, &lt;code&gt;maximum&lt;/code&gt;, etc). Also, at the moment, we support every combination of &lt;code&gt;style&lt;/code&gt; and &lt;code&gt;explode&lt;/code&gt; field (excluded styles &lt;code&gt;matrix&lt;/code&gt; and &lt;code&gt;label&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Body defined in new &lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md#request-body-object&quot;&gt;RequestBody object&lt;/a&gt;. In particular:&lt;ul&gt;
&lt;li&gt;For &lt;code&gt;application/json&lt;/code&gt; the validation handler will take schema that you have defined in &lt;code&gt;schema&lt;/code&gt; object and will validate json bodies with it&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; and &lt;code&gt;multipart/form-data&lt;/code&gt; the validation handler will take care of validate every parameters in form attributes. It actually supports only comma separated values for &lt;code&gt;object&lt;/code&gt; and &lt;code&gt;arrays&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For other parameter types it will check &lt;code&gt;Content-Type&lt;/code&gt; header&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Request validation errors will be carried with &lt;code&gt;RoutingContext&lt;/code&gt; encapsulated in an object called &lt;code&gt;ValidationHandler&lt;/code&gt;, so you have to attach failure handler to check if something went wrong during validation. Also the &lt;code&gt;RoutingContext&lt;/code&gt; carry a new object called &lt;code&gt;RequestParameters&lt;/code&gt; that encapsulate all request parameters deserialized and parsed.&lt;/p&gt;
&lt;p&gt;Router factory is intended to give you a really simple user interface to use OpenAPI 3 support. Most important features are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Async loading of specification and its schema dependencies&lt;/li&gt;
&lt;li&gt;Automatic convert OpenAPI style paths to Vert.x style paths&lt;/li&gt;
&lt;li&gt;Lazy methods: operations (combination of paths and HTTP methods) are mounted in definition order inside specification&lt;/li&gt;
&lt;li&gt;Automatic mount of security validation handlers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, it’s planned to release a &lt;strong&gt;project skeleton generator&lt;/strong&gt; based on API spec.&lt;/p&gt;
&lt;h2 id=&quot;startup-your-project&quot;&gt;Startup your project&lt;/h2&gt;
&lt;p&gt;We are in a testing stage, so the vertx-web official repo doesn’t contain it. To include the modified version of vertx-web replace your vertx-web maven dependency with this one:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.vertx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;vertx-web-api-contract&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;3.6.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can start using OpenAPI 3 inside your Vert.x powered app!&lt;/p&gt;
&lt;p&gt;First of all you need to load the specification and construct the router factory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Load the api spec. This operation is asynchronous&lt;/span&gt;
OpenAPI3RouterFactory.create(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.vertx, &lt;span class=&quot;hljs-string&quot;&gt;&quot;src/main/resources/petstore.yaml&quot;&lt;/span&gt;, ar -&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
        &lt;span class=&quot;hljs-comment&quot;&gt;// Spec loaded with success&lt;/span&gt;
        OpenAPI3RouterFactory routerFactory = ar.result();
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;hljs-comment&quot;&gt;// Something went wrong during router factory initialization&lt;/span&gt;
        Throwable exception = ar.cause();
        logger.error(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Ops!&quot;&lt;/span&gt;, exception);
    }
});&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;handlers-mounting&quot;&gt;Handlers mounting&lt;/h2&gt;
&lt;p&gt;Now load handlers to your operations. Use &lt;code&gt;addHandlerByOperationId(String operationId, Handler&lt;RoutingContext&gt; handler)&lt;/code&gt; to add an handler to a route that matches the &lt;code&gt;operationId&lt;/code&gt;. To add a failure handler use &lt;code&gt;addFailureHandlerByOperationId(String operationId, Handler&lt;RoutingContext&gt; failureHandler)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can, of course, &lt;strong&gt;add multiple handlers to same operation&lt;/strong&gt;, without overwriting the existing ones.&lt;/p&gt;
&lt;p&gt;This is an example of &lt;code&gt;addHandlerByOperationId()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Add an handler with operationId&lt;/span&gt;
routerFactory.addHandlerByOperationId(&lt;span class=&quot;hljs-string&quot;&gt;&quot;listPets&quot;&lt;/span&gt;, routingContext -&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle listPets operation (GET /pets)&lt;/span&gt;
}, routingContext -&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle failure&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;request-parameters&quot;&gt;Request parameters&lt;/h2&gt;
&lt;p&gt;Now you can freely use request parameters. To get the &lt;code&gt;RequestParameters&lt;/code&gt; object:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;RequestParameters params = routingContext.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;parsedParameters&quot;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;RequestParameters&lt;/code&gt; object provides all methods to access to query, cookie, header, path, form and entire body parameters. Here are some examples of how to use this object.&lt;/p&gt;
&lt;p&gt;Parameter with name &lt;code&gt;awesomeParameter&lt;/code&gt; with type &lt;code&gt;integer&lt;/code&gt; in &lt;code&gt;query&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;RequestParameter awesomeParameter = params.queryParameter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;awesomeParameter&quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (awesomeParameter != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// awesomeParameter parameter exists, but we are not sure that is empty or not (query parameters can be empty with allowEmptyValue: true)&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!awesomeParameter.isEmpty()) {
      &lt;span class=&quot;hljs-comment&quot;&gt;// Now we are sure that it exists and it&#39;s not empty, so we can extract it&lt;/span&gt;
      Integer awesome = awesomeParameter.getInteger();
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;hljs-comment&quot;&gt;// Parameter exists, but it&#39;s empty value&lt;/span&gt;
    }
} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Parameter doesn&#39;t exist (it&#39;s not required)&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, every parameter is mapped in respective objects (&lt;code&gt;integer&lt;/code&gt; in &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;integer&lt;/code&gt; with &lt;code&gt;format: int64&lt;/code&gt; in &lt;code&gt;Long&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt; in &lt;code&gt;Float&lt;/code&gt; and so on)&lt;/p&gt;
&lt;p&gt;Comma separated array with name &lt;code&gt;awesomeParameters&lt;/code&gt; with type &lt;code&gt;integer&lt;/code&gt; in &lt;code&gt;query&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;RequestParameter awesomeParameters = params.queryParameter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;awesomeParameters&quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (awesomeParameters != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &amp;&amp; !awesomeParameters.isEmpty()) {
    List&lt;RequestParameter&gt; awesomeList = awesomeParameters.getArray();
    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (RequestParameter awesome : awesomeList) {
      Integer a = awesome.getInteger();
    }
} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// awesomeParameters not found or empty string&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JSON Body:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;RequestParameter body = params.body();
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (body != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;)
  JsonObject jsonBody = body.getJsonObject();&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;security-handling&quot;&gt;Security handling&lt;/h2&gt;
&lt;p&gt;You can mount only one security handler for a combination of schema and scope.&lt;/p&gt;
&lt;p&gt;To add a security handler only with a schema name:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;routerFactory.addSecurityHandler(&lt;span class=&quot;hljs-string&quot;&gt;&quot;security_scheme_name&quot;&lt;/span&gt;, routingContext -&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle security here and then call next()&lt;/span&gt;
    routingContext.next();
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add a security handler with a combination of schema name and scope:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;routerFactory.addSecuritySchemaScopeValidator(&lt;span class=&quot;hljs-string&quot;&gt;&quot;security_scheme_name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;scope_name&quot;&lt;/span&gt;, routingContext -&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle security here and then call next()&lt;/span&gt;
    routingContext.next();
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;You can define security handlers where you want but define it! &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; During Router instantiation, if factory finds a path that require a security schema without an assigned handler, It will throw a &lt;code&gt;RouterFactoryException&lt;/code&gt; &lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&quot;error-handling&quot;&gt;Error handling&lt;/h2&gt;
&lt;p&gt;Every time you add an handler for an operation you can add a failure handler. To handle a &lt;code&gt;ValidationException&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;Throwable failure = routingContext.failure();
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (failure &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; ValidationException)
    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle Validation Exception&lt;/span&gt;
    routingContext.response().setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt;).setStatusMessage(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ValidationError&quot;&lt;/span&gt;).end(failure.getMessage());&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also the router factory provides two other tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It automatically mounts a 501 &lt;code&gt;Not Implemented&lt;/code&gt; handler for operations where you haven’t mounted any handler&lt;/li&gt;
&lt;li&gt;It can load a default &lt;code&gt;ValidationException&lt;/code&gt; failure handler&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both these options are configurable with &lt;a href=&quot;https://vertx.io/docs/apidocs/io/vertx/ext/web/api/contract/RouterFactoryOptions.html&quot;&gt;&lt;code&gt;RouterFactoryOptions&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;and-now-use-it-&quot;&gt;And now use it!&lt;/h2&gt;
&lt;p&gt;Now you are ready to generate the &lt;code&gt;Router&lt;/code&gt;!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;Router router = routerFactory.getRouter();

&lt;span class=&quot;hljs-comment&quot;&gt;// Now you can use your Router instance&lt;/span&gt;
HttpServer server = vertx.createHttpServer(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HttpServerOptions().setPort(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;).setHost(&lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;));
server.requestHandler(router::accept).listen();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;Lazy methods! &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; &lt;code&gt;getRouter()&lt;/code&gt; generate the &lt;code&gt;Router&lt;/code&gt; object, so you don’t have to care about code definition order&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&quot;and-now-&quot;&gt;And now?&lt;/h2&gt;
&lt;p&gt;You can find a complete example on &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/master/web-examples#http-request-validation-and-openapi-3-router-factory&quot;&gt;&lt;code&gt;vertx-examples&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can access to &lt;a href=&quot;https://vertx.io/docs/#web&quot;&gt;documentation here&lt;/a&gt; and &lt;a href=&quot;https://vertx.io/docs/apidocs/io/vertx/ext/web/api/contract/package-summary.html&quot;&gt;Javadoc here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block important&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-exclamation-circle&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;We want you! &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; Please give us your feedback opening an issue &lt;a href=&quot;https://github.com/slinkydeveloper/vertx-web/issues&quot;&gt;here&lt;/a&gt; &lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Tue, 04 Jul 2017 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/openapi-fka-swagger-3-support-in-eclipse-vert-x-now-in-test-stage</link>
          <guid isPermaLink="true">https://vertx.io/blog/openapi-fka-swagger-3-support-in-eclipse-vert-x-now-in-test-stage</guid>
          <author>
            <name>slinkydeveloper</name>
            <uri>http://github.com/slinkydeveloper</uri>
          </author>
        </item>
      
        <item>
          <title>Preview of a guide for Java developers</title>
          <description>
      &lt;article&gt;&lt;p&gt;I could not attend the last Eclipse Vert.x community face-to-face meeting last fall, but one item that was discussed is the need for guides aimed at certain types of developers.
One of my missions as part of joining the team was to work on this and I’m very happy to share it with you today!&lt;/p&gt;
&lt;h2 id=&quot;a-gentle-guide-to-asynchronous-programming-with-eclipse-vert-x-for-enterprise-application-developers&quot;&gt;A gentle guide to asynchronous programming with Eclipse Vert.x for enterprise application developers&lt;/h2&gt;
&lt;p&gt;The guide is called &lt;strong&gt;“A gentle guide to asynchronous programming with Eclipse Vert.x for enterprise application developers”&lt;/strong&gt; and it is an introduction to asynchronous programming with Vert.x, primarily aimed at developers familiar with mainstream non-asynchronous web development frameworks and libraries (e.g., Java EE, Spring).&lt;/p&gt;
&lt;p&gt;Quoting the introduction:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We will start from a wiki web application backed by a relational database and server-side rendering of pages; then we will evolve the application through several steps until it becomes a modern single-page application with “real-time” web features. Along the way you will learn to:&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Design a web application with server-side rendering of pages through templates, and using a relational database for persisting data.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cleanly isolate each technical component as a reusable event processing unit called a verticle.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Extract Vert.x services for facilitating the design of verticles that communicate with each other seamlessly both within the same JVM process or among distributed nodes in a cluster.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Testing code with asynchronous operations.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Integrating with third-party services exposing a HTTP/JSON web API.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Exposing a HTTP/JSON web API.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Securing and controlling access using HTTPS, user authentication for web browser sessions and JWT tokens for third-party client applications.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Refactoring some code to use reactive programming with the popular RxJava library and its Vert.x integration.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Client-side programming of a single-page application with AngularJS.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Real-time web programming using the unified Vert.x event bus integration over SockJS.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The guide takes a gradual approach by starting with a “quick and dirty” solution, then refactoring it properly, exposing the core Vert.x concepts, adding features, and moving from callbacks to RxJava.&lt;/p&gt;
&lt;h2 id=&quot;we-need-your-feedback-&quot;&gt;We need your feedback!&lt;/h2&gt;
&lt;p&gt;The code is available at &lt;a href=&quot;https://github.com/vert-x3/vertx-guide-for-java-devs&quot;&gt;https://github.com/vert-x3/vertx-guide-for-java-devs&lt;/a&gt;.
You can report feedback as Github issues to that repository and even offer pull-requests.&lt;/p&gt;
&lt;p&gt;You can check it out from GitHub (the AsciiDoc is being rendered fine from the repository interface) or you can check out pre-rendered HTML and PDF versions that I am temporarily sharing and keeping up-to-date from my Dropbox: &lt;a href=&quot;https://www.dropbox.com/sh/ni9znfkzlkl3q12/AABn-OCi1CZfgbTzOU0jYQpJa?dl=0&quot;&gt;https://www.dropbox.com/sh/ni9znfkzlkl3q12/AABn-OCi1CZfgbTzOU0jYQpJa?dl=0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many thanks to Thomas Segismont and Julien Viet who contributed some parts, and also to the people who reviewed it privately.&lt;/p&gt;
&lt;p&gt;As usual, we welcome your feedback!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Fri, 09 Jun 2017 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/preview-of-a-guide-for-java-developers</link>
          <guid isPermaLink="true">https://vertx.io/blog/preview-of-a-guide-for-java-developers</guid>
          <author>
            <name>jponge</name>
            <uri>http://github.com/jponge</uri>
          </author>
        </item>
      
        <item>
          <title>Presentation of the Vert.x-Swagger project</title>
          <description>
      &lt;article&gt;&lt;p&gt;This post is an introduction to the &lt;a href=&quot;https://github.com/phiz71/vertx-swagger&quot;&gt;Vert.x-Swagger&lt;/a&gt; project, and describe how to use the &lt;code&gt;Swagger-Codegen&lt;/code&gt; plugin and the &lt;code&gt;SwaggerRouter&lt;/code&gt; class.&lt;/p&gt;
&lt;h2 id=&quot;eclipse-vert-x-swagger&quot;&gt;Eclipse Vert.x &amp; Swagger&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://vertx.io/docs/vertx-core/java/&quot;&gt;Vert.x&lt;/a&gt; and &lt;a href=&quot;http://vertx.io/docs/vertx-web/java/&quot;&gt;Vert.x Web&lt;/a&gt; are very convenient to write REST API and especially the &lt;a href=&quot;http://vertx.io/docs/apidocs/io/vertx/ext/web/Router.html&quot;&gt;Router&lt;/a&gt; which is very useful to manage all resources of an API.&lt;/p&gt;
&lt;p&gt;But when I start a new API, I usually use the “design-first” approach and &lt;a href=&quot;http://swagger.io/specification/&quot;&gt;Swagger&lt;/a&gt; is my best friend to define what my API is supposed to do. And then, comes the “boring” part of the job : convert the swagger file content into java code. That’s always the same : resources, operations, models…&lt;/p&gt;
&lt;p&gt;Fortunately, Swagger provides a codegen tool : &lt;a href=&quot;https://github.com/swagger-api/swagger-codegen&quot;&gt;Swagger-Codegen&lt;/a&gt;. With this tool, you can generate a server stub based on your swagger definition file. 
However, even if this generator provides many different languages and framework, Vert.X is missing.&lt;/p&gt;
&lt;p&gt;This is where the &lt;a href=&quot;https://github.com/phiz71/vertx-swagger&quot;&gt;Vert.x-Swagger&lt;/a&gt; project comes in.&lt;/p&gt;
&lt;h2 id=&quot;the-project&quot;&gt;The project&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Vert.x-Swagger&lt;/strong&gt; is a maven project providing 2 modules.&lt;/p&gt;
&lt;h3 id=&quot;vertx-swagger-codegen&quot;&gt;vertx-swagger-codegen&lt;/h3&gt;
&lt;p&gt;It’s a &lt;a href=&quot;https://github.com/swagger-api/swagger-codegen&quot;&gt;Swagger-Codegen&lt;/a&gt; plugin, which add the capability of generating a Java Vert.x WebServer to the generator.&lt;/p&gt;
&lt;p&gt;The generated server mainly contains :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POJOs for &lt;code&gt;definitions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;one Verticle per &lt;code&gt;tag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;one MainVerticle, which manage others APIVerticle and start an HttpServer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;content&#39;&gt;the MainVerticle use &lt;em&gt;vertx-swagger-router&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3 id=&quot;vertx-swagger-router&quot;&gt;vertx-swagger-router&lt;/h3&gt;
&lt;p&gt;The main class of this module is &lt;code&gt;SwaggerRouter&lt;/code&gt;. It’s more or less a &lt;em&gt;Factory&lt;/em&gt; (and maybe I should rename the class) that can create a &lt;a href=&quot;http://vertx.io/docs/apidocs/io/vertx/ext/web/Router.html&quot;&gt;Router&lt;/a&gt;, using the swagger definition file to configure all the routes. For each route, it extracts parameters from the request (&lt;code&gt;Query&lt;/code&gt;, &lt;code&gt;Path&lt;/code&gt;, &lt;code&gt;Header&lt;/code&gt;, &lt;code&gt;Body&lt;/code&gt;, &lt;code&gt;Form&lt;/code&gt;) and send them on the eventBus, using either the &lt;code&gt;operationId&lt;/code&gt; as the address or a computed id (just a parameter in the constructor).&lt;/p&gt;
&lt;h2 id=&quot;let-see-how-it-works&quot;&gt;Let see how it works&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block info&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-info-circle&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;content&#39;&gt;For this post, I will use a simplified swagger file but you can find a more complex example &lt;a href=&quot;https://github.com/phiz71/vertx-swagger/tree/master/sample/petstore-vertx-server&quot;&gt;here&lt;/a&gt; based on the &lt;a href=&quot;http://petstore.swagger.io/&quot;&gt;petstore&lt;/a&gt; swagger file&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3 id=&quot;generating-the-server&quot;&gt;Generating the server&lt;/h3&gt;
&lt;p&gt;First, choose your swagger definition. Here’s a YAML File, but it could be a JSON file :&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/phiz71/6c654f3da2d4124d3fe65e5aaaaedf55.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Then, download these libraries :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://central.maven.org/maven2/io/swagger/swagger-codegen-cli/2.2.2/swagger-codegen-cli-2.2.2.jar&quot;&gt;swagger-codegen-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://central.maven.org/maven2/com/github/phiz71/vertx-swagger-codegen/1.0.0/vertx-swagger-codegen-1.0.0.jar&quot;&gt;vertx-swagger-codegen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, run this command&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;java -cp /path/to/swagger-codegen-cli-&lt;span class=&quot;hljs-number&quot;&gt;2.2&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;.jar:/path/to/vertx-swagger-codegen-&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;.jar io.swagger.codegen.SwaggerCodegen generate \
  &lt;span class=&quot;hljs-operator&quot;&gt;-l&lt;/span&gt; java-vertx \
  -o path/to/destination/folder \
  -i path/to/swagger/definition \
  --group-id your.group.id \
  --artifact-id your.artifact.id&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#39;admonition-block info&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-info-circle&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;For more Information about how SwaggerCodegen works &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; you can read this &lt;a href=&quot;https://github.com/swagger-api/swagger-codegen#getting-started&quot;&gt;https://github.com/swagger-api/swagger-codegen#getting-started&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;You should have something like that in your console:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.parser&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.Swagger20Parser&lt;/span&gt; - reading from ./wineCellarSwagger&lt;span class=&quot;hljs-class&quot;&gt;.yaml&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/src/main/java/io/swagger/server/api/model/Bottle&lt;span class=&quot;hljs-class&quot;&gt;.java&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/src/main/java/io/swagger/server/api/model/CellarInformation&lt;span class=&quot;hljs-class&quot;&gt;.java&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/src/main/java/io/swagger/server/api/verticle/BottlesApi&lt;span class=&quot;hljs-class&quot;&gt;.java&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/src/main/java/io/swagger/server/api/verticle/BottlesApiVerticle&lt;span class=&quot;hljs-class&quot;&gt;.java&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/src/main/java/io/swagger/server/api/verticle/InformationApi&lt;span class=&quot;hljs-class&quot;&gt;.java&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/src/main/java/io/swagger/server/api/verticle/InformationApiVerticle&lt;span class=&quot;hljs-class&quot;&gt;.java&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/src/main/resources/swagger&lt;span class=&quot;hljs-class&quot;&gt;.json&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/src/main/java/io/swagger/server/api/MainApiVerticle&lt;span class=&quot;hljs-class&quot;&gt;.java&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/src/main/resources/vertx-default-jul-logging&lt;span class=&quot;hljs-class&quot;&gt;.properties&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/pom&lt;span class=&quot;hljs-class&quot;&gt;.xml&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/README&lt;span class=&quot;hljs-class&quot;&gt;.md&lt;/span&gt;
[main] INFO io&lt;span class=&quot;hljs-class&quot;&gt;.swagger&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.codegen&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.AbstractGenerator&lt;/span&gt; - writing file [path/to/destination/folder]/.swagger-codegen-ignore&lt;/code&gt;&lt;/pre&gt;
And this in your destination folder:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blog/vertx-swagger-presentation/GeneratedProject.png&quot; alt=&quot;Generated sources&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;what-have-been-created-&quot;&gt;What have been created ?&lt;/h3&gt;
&lt;p&gt;As you can see in &lt;strong&gt;1&lt;/strong&gt;,  the &lt;em&gt;vertx-swagger-codegen&lt;/em&gt; plugin has created one POJO by &lt;code&gt;definition&lt;/code&gt; in the swagger file.&lt;/p&gt;
&lt;h4 id=&quot;example-the-bottle-definition&quot;&gt;Example : the bottle definition&lt;/h4&gt;
&lt;script src=&quot;https://gist.github.com/phiz71/eabafda440b24881126089128d677121.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In &lt;strong&gt;2a&lt;/strong&gt; and &lt;strong&gt;2b&lt;/strong&gt; you can find :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an interface which contains a function per &lt;code&gt;operation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;a verticle which defines all &lt;code&gt;operationId&lt;/code&gt; and create &lt;a href=&quot;http://vertx.io/docs/vertx-core/java/#_the_event_bus_api&quot;&gt;EventBus&lt;/a&gt; consumers &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;example-the-bottles-interface&quot;&gt;Example : the Bottles interface&lt;/h4&gt;
&lt;script src=&quot;https://gist.github.com/phiz71/be1ca2f550f44aea7fb2710b383e26ed.js&quot;&gt;&lt;/script&gt;

&lt;h4 id=&quot;example-the-bottles-verticle&quot;&gt;Example : the Bottles verticle&lt;/h4&gt;
&lt;script src=&quot;https://gist.github.com/phiz71/c0aadbb4f26ebed8e2e145d0b4a8d210.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;-and-now-&quot;&gt;… and now ?&lt;/h3&gt;
&lt;p&gt;Line &lt;code&gt;23&lt;/code&gt; of &lt;code&gt;BottlesApiVerticle.java&lt;/code&gt;, you can see this&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;BottlesApi service = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BottlesApiImpl();&lt;/code&gt;&lt;/pre&gt;
This line will not compile until the &lt;code&gt;BottlesApiImpl&lt;/code&gt; class is created.&lt;/p&gt;
&lt;p&gt;In all &lt;strong&gt;XXXAPI&lt;/strong&gt;Verticles, you will find a variable called &lt;em&gt;service&lt;/em&gt;. It is a &lt;strong&gt;XXXAPI&lt;/strong&gt; type and it is instanciated with a &lt;strong&gt;XXXAPI&lt;/strong&gt;Impl contructor. This class does not exist yet since it is the business of your API.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And so you will have to create these implementations.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;fine-but-what-if-i-don-t-want-to-build-my-api-like-this-&quot;&gt;Fine, but what if I don’t want to build my API like this ?&lt;/h2&gt;
&lt;p&gt;Well, Vert.x is &lt;strong&gt;unopinionated&lt;/strong&gt; but the way the &lt;em&gt;vertx-swagger-codegen&lt;/em&gt; creates the server stub &lt;strong&gt;is not&lt;/strong&gt;. 
So if you want to implement your API the way you want, while enjoying dynamic routing based on a swagger file, the &lt;em&gt;vertx-swagger-router&lt;/em&gt; library can be used standalone. &lt;/p&gt;
&lt;p&gt;Just import this jar into your project :&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/phiz71/56e723362a1d1370c7262bff246fb087.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;You will be able to create your &lt;a href=&quot;http://vertx.io/docs/apidocs/io/vertx/ext/web/Router.html&quot;&gt;Router&lt;/a&gt; like this :&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;FileSystem vertxFileSystem = vertx.fileSystem();
vertxFileSystem.readFile(&lt;span class=&quot;hljs-string&quot;&gt;“&lt;strong&gt;&lt;em&gt;YOUR_SWAGGER_FILE&lt;/em&gt;&lt;/strong&gt;“&lt;/span&gt;, readFile -&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (readFile.succeeded()) {
        Swagger swagger = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SwaggerParser().parse(readFile.result().toString(Charset.forName(&lt;span class=&quot;hljs-string&quot;&gt;“utf-8”&lt;/span&gt;))); 
        Router swaggerRouter = SwaggerRouter.swaggerRouter(Router.router(vertx), swagger, vertx.eventBus(), &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; OperationIdServiceIdResolver());
        […]
   } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        […]
   }
});&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;content&#39;&gt;You can ignore the last parameter in &lt;code&gt;SwaggerRouter.swaggerRouter(...)&lt;/code&gt;. As a result, addresses will be computed instead of using &lt;code&gt;operationId&lt;/code&gt; from the swagger file. 
For instance, &lt;code&gt;GET /bottles/{bottle_id}&lt;/code&gt; will become &lt;em&gt;GET_bottles_bottle-id&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Vert.x and Swagger are great tools to build and document an API but using both in the same project can be painful. The &lt;a href=&quot;https://github.com/phiz71/vertx-swagger&quot;&gt;Vert.x-Swagger&lt;/a&gt; project was made to save time, letting the developers focusing on business code.
It can be seen as an API framework over Vert.X.&lt;/p&gt;
&lt;p&gt;You can also use the &lt;code&gt;SwaggerRouter&lt;/code&gt; in your own project without using Swagger-Codegen.&lt;/p&gt;
&lt;p&gt;In future releases, more information from the swagger file will be used to configure the router and certainly others languages will be supported.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;content&#39;&gt;Though Vert.x is polyglot, Vert.x-Swagger project only supports Java. If you want to contribute to support more languages, you’re welcome :) &lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; &lt;/p&gt;
&lt;p&gt;Thanks for reading.&lt;/p&gt;
&lt;style type=&quot;text/css&quot;&gt;
  .gist-file
  .gist-data {max-height: 500px}
&lt;/style&gt;

&lt;/article&gt;
      </description>
          <pubDate>Mon, 22 May 2017 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/presentation-of-the-vert-x-swagger-project</link>
          <guid isPermaLink="true">https://vertx.io/blog/presentation-of-the-vert-x-swagger-project</guid>
          <author>
            <name>phiz71</name>
            <uri>http://github.com/phiz71</uri>
          </author>
        </item>
      
        <item>
          <title>Time scheduling with Chime</title>
          <description>
      &lt;article&gt;&lt;h2 id=&quot;time-scheduling-&quot;&gt;Time scheduling.&lt;/h2&gt;
&lt;p&gt;Eclipse Vert.x executes periodic and delayed actions with
&lt;a href=&quot;http://vertx.io/docs/vertx-core/java/#_executing_periodic_and_delayed_actions&quot;&gt;periodic and one-shot timers&lt;/a&gt;.
This is the base for time scheduling and reach feature extension must be rather interesting.
Be notified at certain date / time, take into account holidays,
repeat notifications until a given date, apply time zone,
take into account daylight saving time etc.
There are a lot of useful features time scheduler may introduce to the Vert.x stack.  &lt;/p&gt;
&lt;h2 id=&quot;chime-&quot;&gt;Chime.&lt;/h2&gt;
&lt;p&gt; &lt;a href=&quot;https://github.com/LisiLisenok/Chime&quot;&gt;Chime&lt;/a&gt; is time scheduler verticle which works on &lt;em&gt;Vert.x&lt;/em&gt; event bus and provides:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scheduling with &lt;em&gt;cron-style&lt;/em&gt;, &lt;em&gt;interval&lt;/em&gt; or &lt;em&gt;union&lt;/em&gt; timers:&lt;ul&gt;
&lt;li&gt;at a certain time of day (to the second);  &lt;/li&gt;
&lt;li&gt;on certain days of the week, month or year;  &lt;/li&gt;
&lt;li&gt;with a given time interval;  &lt;/li&gt;
&lt;li&gt;with nearly any combination of all of above;  &lt;/li&gt;
&lt;li&gt;repeating a given number of times;  &lt;/li&gt;
&lt;li&gt;repeating until a given time / date;  &lt;/li&gt;
&lt;li&gt;repeating infinitely  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;proxying event bus with conventional interfaces  &lt;/li&gt;
&lt;li&gt;applying time zones available on &lt;em&gt;JVM&lt;/em&gt; with daylight saving time taken into account  &lt;/li&gt;
&lt;li&gt;flexible timers management system:  &lt;ul&gt;
&lt;li&gt;grouping timers;  &lt;/li&gt;
&lt;li&gt;defining a timer start or end times  &lt;/li&gt;
&lt;li&gt;pausing / resuming;  &lt;/li&gt;
&lt;li&gt;fire counting;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;listening and sending messages via event bus with &lt;em&gt;JSON&lt;/em&gt;;  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;publishing&lt;/em&gt; or &lt;em&gt;sending&lt;/em&gt; timer fire event to the address of your choice.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block info&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-info-circle&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;content&#39;&gt;&lt;em&gt;Chime&lt;/em&gt; is written in &lt;a href=&quot;https://ceylon-lang.org&quot;&gt;Ceylon&lt;/a&gt; and is available at
&lt;a href=&quot;https://herd.ceylon-lang.org/modules/herd.schedule.chime&quot;&gt;Ceylon Herd&lt;/a&gt;.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;  &lt;/p&gt;
&lt;h2 id=&quot;running-&quot;&gt;Running.&lt;/h2&gt;
&lt;h3 id=&quot;ceylon-users-&quot;&gt;Ceylon users.&lt;/h3&gt;
&lt;p&gt;Deploy &lt;em&gt;Chime&lt;/em&gt; using &lt;code&gt;Verticle.deployVerticle&lt;/code&gt; method.  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;hljs-tag&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.vertx&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.ceylon&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.core&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;vertx&lt;/span&gt;}
&lt;span class=&quot;hljs-tag&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;herd&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.schedule&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.chime&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;Chime&lt;/span&gt;}
&lt;span class=&quot;hljs-attribute&quot;&gt;Chime&lt;/span&gt;().&lt;span class=&quot;hljs-function&quot;&gt;deploy&lt;/span&gt;(vertx.&lt;span class=&quot;hljs-function&quot;&gt;vertx&lt;/span&gt;());&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or with &lt;code&gt;vertx.deployVerticle(\&quot;ceylon:herd.schedule.chime/0.2.1\&quot;);&lt;/code&gt;
but ensure that Ceylon verticle factory is available at class path.   &lt;/p&gt;
&lt;h3 id=&quot;java-users-&quot;&gt;Java users.&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Ensure that Ceylon verticle factory is available at class path.  &lt;/li&gt;
&lt;li&gt;Put Ceylon versions to consistency. For instance, Vert.x 3.4.1 depends on Ceylon 1.3.0
while Chime 0.2.1 depends on Ceylon 1.3.2. &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vertx.io/docs/vertx-core/java/#_deploying_verticles_programmatically&quot;&gt;Deploy verticle&lt;/a&gt;, like:  &lt;pre&gt;&lt;code&gt;vertx.&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;deployVerticle&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ceylon:herd.schedule.chime/0.2.1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block info&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-info-circle&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;content&#39;&gt;example with Maven is available at &lt;a href=&quot;https://github.com/LisiLisenok/ChimeJavaExample&quot;&gt;Github&lt;/a&gt;.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;  &lt;/p&gt;
&lt;h2 id=&quot;schedulers-&quot;&gt;Schedulers.&lt;/h2&gt;
&lt;p&gt;Well, &lt;em&gt;Chime&lt;/em&gt; verticle is deployed. Let’s see its structure.&lt;br&gt;In order to provide flexible and broad ways to manage timing two level architecture is adopted.
It consists of schedulers and timers. Timer is a unit which fires at a given time.
While scheduler is a set or group of timers and provides following:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;creating and deleting timers;  &lt;/li&gt;
&lt;li&gt;pausing / resuming all timers working within the scheduler;  &lt;/li&gt;
&lt;li&gt;info on the running timers;  &lt;/li&gt;
&lt;li&gt;default time zone;  &lt;/li&gt;
&lt;li&gt;listening event bus at the given scheduler address for the requests to.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any timer operates within some scheduler. And one or several schedulers have to be created before starting scheduling.&lt;br&gt;When &lt;em&gt;Chime&lt;/em&gt; verticle is deployed it starts listen event bus at &lt;strong&gt;chime&lt;/strong&gt; address (can be configured).
In order to create scheduler send to this address a JSON message.  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;operation&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;create&quot;&lt;/span&gt;&lt;/span&gt;,
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;scheduler name&quot;&lt;/span&gt;
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Once scheduler is created it starts listen event bus at &lt;strong&gt;scheduler name&lt;/strong&gt; address.
Sending messages to &lt;strong&gt;chime&lt;/strong&gt; address or to &lt;strong&gt;scheduler name&lt;/strong&gt; address are rather equivalent,
excepting that chime address provides services for every scheduler, while scheduler address
provides services for this particular scheduler only.&lt;br&gt;The request sent to the &lt;em&gt;Chime&lt;/em&gt; has to contain &lt;strong&gt;operation&lt;/strong&gt; and &lt;strong&gt;name&lt;/strong&gt; keys.
Name key provides scheduler or timer name. While operation key shows an action &lt;em&gt;Chime&lt;/em&gt; has to perform.
There are only four possible operations:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create - create new scheduler or timer;  &lt;/li&gt;
&lt;li&gt;delete - delete scheduler or timer;  &lt;/li&gt;
&lt;li&gt;info - request info on &lt;em&gt;Chime&lt;/em&gt; or on a particular scheduler or timer;  &lt;/li&gt;
&lt;li&gt;state - set or get scheduler or timer state (running, paused or completed).  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;timers-&quot;&gt;Timers.&lt;/h2&gt;
&lt;p&gt;Now we have scheduler created and timers can be run within. There are two ways to access a given timer:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sending message to &lt;strong&gt;chime&lt;/strong&gt; address with ‘name’ field set to &lt;strong&gt;scheduler name:timer name&lt;/strong&gt;.  &lt;/li&gt;
&lt;li&gt;Sending message to &lt;strong&gt;scheduler name&lt;/strong&gt; address with ‘name’ field set to either &lt;strong&gt;timer name&lt;/strong&gt; or &lt;strong&gt;scheduler name:timer name&lt;/strong&gt;.  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://modules.ceylon-lang.org/repo/1/herd/schedule/chime/0.2.1/module-doc/api/index.html#timer-request&quot;&gt;Timer request&lt;/a&gt; is rather complicated and contains a lot of details. In this blog post only basic features are considered:  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{
    &quot;operation&quot;: &quot;create&quot;,
    &quot;name&quot;: &quot;scheduler name:timer name&quot;,
    &quot;description&quot;: {}
};&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is rather similar to request sent to create a scheduler.
The difference is only &lt;strong&gt;description&lt;/strong&gt; field is added.
This description is an JSON object which identifies particular timer type and its details.&lt;br&gt;The other fields not shown here are optional and includes:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;initial timer state (paused or running);  &lt;/li&gt;
&lt;li&gt;start or end date-time;  &lt;/li&gt;
&lt;li&gt;number of repeating times;  &lt;/li&gt;
&lt;li&gt;is timer message to be published or sent;  &lt;/li&gt;
&lt;li&gt;timer fire message and delivery options;  &lt;/li&gt;
&lt;li&gt;time zone.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;timer-descriptions-&quot;&gt;Timer descriptions.&lt;/h2&gt;
&lt;p&gt;Currently, three types of timers are supported:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Interval timer&lt;/strong&gt; which fires after each given time period (minimum 1 second):  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{
  &quot;type&quot;: &quot;interval&quot;,
  &quot;delay&quot;: &quot;timer delay in seconds, Integer&quot;
};&lt;/code&gt;&lt;/pre&gt;  
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cron style timer&lt;/strong&gt; which is defined with cron-style:&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{&lt;br&gt;  “type”: “cron”,&lt;br&gt;  “seconds”: “seconds in cron style, String”,&lt;br&gt;  “minutes”: “minutes in cron style, String”,&lt;br&gt;  “hours”: “hours in cron style, String”,&lt;br&gt;  “days of month”: “days of month in cron style, String”,&lt;br&gt;  “months”: “months in cron style, String”,&lt;br&gt;  “days of week”: “days of week in cron style, String, optional”,&lt;br&gt;  “years”: “years in cron style, String, optional”&lt;br&gt;};&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;Cron timer is rather powerful and flexible. Investigate &lt;a href=&quot;https://modules.ceylon-lang.org/repo/1/herd/schedule/chime/0.2.1/module-doc/api/index.html#cron-expression&quot;&gt;specification&lt;/a&gt; for the complete list of features.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Union timer&lt;/strong&gt; which combines a number of timers into a one:&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{&lt;br&gt;  “type”: “union”,&lt;br&gt;  “timers”: [“list of the timer descriptions”]&lt;br&gt;};&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;Union timer may be useful to fire at a list of specific dates / times.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;timer-events-&quot;&gt;Timer events.&lt;/h2&gt;
&lt;p&gt;Once timer is started it sends or publishes messages to &lt;strong&gt;scheduler name:timer name&lt;/strong&gt; address in JSON format.
Two types of events are sent:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fire event which occurs when time reaches next timer value:  &lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{  
  &quot;name&quot;: &quot;scheduler name:timer name, String&quot;,  
  &quot;event&quot;: &quot;fire&quot;,  
  &quot;count&quot;: &quot;total number of fire times, Integer&quot;,  
  &quot;time&quot;: &quot;ISO formated time / date, String&quot;,  
  &quot;seconds&quot;: &quot;number of seconds since last minute, Integer&quot;,  
  &quot;minutes&quot;: &quot;number of minutes since last hour, Integer&quot;,  
  &quot;hours&quot;: &quot;hour of day, Integer&quot;,  
  &quot;day of month&quot;: &quot;day of month, Integer&quot;,  
  &quot;month&quot;: &quot;month, Integer&quot;,  
  &quot;year&quot;: &quot;year, Integer&quot;,  
  &quot;time zone&quot;: &quot;time zone the timer works in, String&quot;
};&lt;/code&gt;&lt;/pre&gt;  &lt;/li&gt;
&lt;li&gt;complete event which occurs when timer is exhausted by some criteria given at timer create request:  &lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{  
  &quot;name&quot;: &quot;scheduler name:timer name, String&quot;,  
  &quot;event&quot;: &quot;complete&quot;,  
  &quot;count&quot;: &quot;total number of fire times, Integer&quot;  
};&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically, now we know everything to be happy with &lt;em&gt;Chime&lt;/em&gt;: schedulers and requests to them, timers and timer events.
Will see some examples in the next section.  &lt;/p&gt;
&lt;h2 id=&quot;examples-&quot;&gt;Examples.&lt;/h2&gt;
&lt;h3 id=&quot;ceylon-example-&quot;&gt;Ceylon example.&lt;/h3&gt;
&lt;p&gt;Let’s consider a timer which has to fire every month at 16-30 last Sunday.  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// listen the timer events&lt;/span&gt;
eventBus.consumer (
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;my scheduler:my timer&quot;&lt;/span&gt;,
    (Throwable|Message&lt;JsonObject?&gt; msg) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (is Message&lt;JsonObject?&gt; msg) { print(msg.body()); }
        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { print(msg); }    
    }
);
&lt;span class=&quot;hljs-comment&quot;&gt;// create scheduler and timer&lt;/span&gt;
eventBus.send&lt;JsonObject&gt; (
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;chime&quot;&lt;/span&gt;,
    JsonObject {
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;operation&quot;&lt;/span&gt; -&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;create&quot;&lt;/span&gt;,
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt; -&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;my scheduler:my timer&quot;&lt;/span&gt;,
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;description&quot;&lt;/span&gt; -&gt; JsonObject {
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt; -&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;cron&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;seconds&quot;&lt;/span&gt; -&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;minutes&quot;&lt;/span&gt; -&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;30&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;hours&quot;&lt;/span&gt; -&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;16&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;days of month&quot;&lt;/span&gt; -&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;months&quot;&lt;/span&gt; -&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;days of week&quot;&lt;/span&gt; -&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;SundayL&quot;&lt;/span&gt;
        }
    }
);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#39;admonition-block info&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-info-circle&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;content&#39;&gt;‘*’ means any, ‘SundayL’ means last Sunday.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;  &lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;content&#39;&gt;If ‘create’ request is sent to Chime address with name set to ‘scheduler name:timer name’ and corresponding scheduler hasn’t been created before then Chime creates both new scheduler and new timer.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;  &lt;/p&gt;
&lt;h3 id=&quot;java-example-&quot;&gt;Java example.&lt;/h3&gt;
&lt;p&gt;Let’s consider a timer which has to fire every Monday at 8-30 and every Friday at 17-30.  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// listen the timer events&lt;/span&gt;
MessageConsumer&lt;JsonObject&gt; consumer = eventBus.consumer(&lt;span class=&quot;hljs-string&quot;&gt;&quot;my scheduler:my timer&quot;&lt;/span&gt;);
consumer.handler (
    message -&gt; {
        System.out.&lt;span class=&quot;hljs-built_in&quot;&gt;println&lt;/span&gt;(message.body());
      }
);
&lt;span class=&quot;hljs-comment&quot;&gt;// description of timers&lt;/span&gt;
JsonObject mondayTimer = (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject()).put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;cron&quot;&lt;/span&gt;)
    .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;seconds&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;).put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;minutes&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;30&quot;&lt;/span&gt;).put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hours&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;8&quot;&lt;/span&gt;)
    .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;days of month&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;).put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;months&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;)
    .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;days of week&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Monday&quot;&lt;/span&gt;);
JsonObject fridayTimer = (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject()).put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;cron&quot;&lt;/span&gt;)
    .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;seconds&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;).put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;minutes&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;30&quot;&lt;/span&gt;).put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hours&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;17&quot;&lt;/span&gt;)
    .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;days of month&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;).put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;months&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;)
    .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;days of week&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Friday&quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-comment&quot;&gt;// union timer - combines mondayTimer and fridayTimer&lt;/span&gt;
JsonArray combination = (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonArray()).&lt;span class=&quot;hljs-built_in&quot;&gt;add&lt;/span&gt;(mondayTimer)
    .&lt;span class=&quot;hljs-built_in&quot;&gt;add&lt;/span&gt;(fridayTimer);
JsonObject timer = (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject()).put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;union&quot;&lt;/span&gt;)
    .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;timers&quot;&lt;/span&gt;, combination);
&lt;span class=&quot;hljs-comment&quot;&gt;// create scheduler and timer&lt;/span&gt;
eventBus.send (
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;chime&quot;&lt;/span&gt;,
    (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject()).put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;operation&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;create&quot;&lt;/span&gt;)
        .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;my scheduler:my timer&quot;&lt;/span&gt;)
        .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;description&quot;&lt;/span&gt;, timer)
);&lt;/code&gt;&lt;/pre&gt;  

&lt;p&gt;&lt;div class=&#39;admonition-block important&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-exclamation-circle&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;content&#39;&gt;Ensure that Ceylon verticle factory with right version is available at class path.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;  &lt;/p&gt;
&lt;h2 id=&quot;at-the-end-&quot;&gt;At the end.&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;herd.schedule.chime&lt;/code&gt; module provides some features not mentioned here:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;convenient builders useful to fill in JSON description of various timers;  &lt;/li&gt;
&lt;li&gt;proxying event bus with conventional interfaces;  &lt;/li&gt;
&lt;li&gt;reading JSON timer event into an object;  &lt;/li&gt;
&lt;li&gt;attaching JSON message to the timer fire event;  &lt;/li&gt;
&lt;li&gt;managing time zones.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are also some ideas for the future:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;custom or user-defined timers;  &lt;/li&gt;
&lt;li&gt;limiting the timer fire time / date with calendar;  &lt;/li&gt;
&lt;li&gt;extracting timer fire message from external source.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;This is very quick introduction to the &lt;em&gt;Chime&lt;/em&gt; and if you are interested in you may read
more in &lt;a href=&quot;https://modules.ceylon-lang.org/repo/1/herd/schedule/chime/0.2.1/module-doc/api/index.html&quot;&gt;Chime documentation&lt;/a&gt; or even &lt;a href=&quot;https://github.com/LisiLisenok/Chime&quot;&gt;contribute&lt;/a&gt; to.  &lt;/p&gt;
&lt;p&gt;Thank’s for the reading and enjoy with coding!  &lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Tue, 09 May 2017 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/time-scheduling-with-chime</link>
          <guid isPermaLink="true">https://vertx.io/blog/time-scheduling-with-chime</guid>
          <author>
            <name>LisiLisenok</name>
            <uri>http://github.com/LisiLisenok</uri>
          </author>
        </item>
      
        <item>
          <title>Building a real-time web app with Angular/Ngrx and Vert.x</title>
          <description>
      &lt;article&gt;&lt;p&gt;Nowadays, there are multiple tech stacks to build a real-time web app. What are the best choices to build real-time Angular client apps, connected to a JVM-based backend? This article describes an Angular+Vertx real-time architecture with a Proof of Concept demo app.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;content&#39;&gt;this is a re-publication of the following &lt;a href=&quot;https://medium.com/@benorama/building-a-realtime-web-app-with-angular-ngrx-and-vert-x-a5381c0397a1&quot;&gt;Medium post&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Welcome to the real-time web!&lt;/strong&gt; It’s time to move on from traditional synchronous HTTP request/response architectures to reactive apps with connected clients (ouch… that’s a lot of buzzwords in just one sentence)!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blog/vertx-realtime-angular-ngrx/data-in-motion.jpg&quot; alt=&quot;Real-time app&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image source: &lt;a href=&quot;https://www.voxxed.com&quot;&gt;https://www.voxxed.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To build this kind of app, &lt;a href=&quot;https://www.meteor.com&quot;&gt;MeteorJS&lt;/a&gt; is the new cool kid on the block (v1.0 released in october 2014): &lt;strong&gt;a full stack Javascript platform to build connected-client reactive applications&lt;/strong&gt;. It allows JS developers to build and deploy amazing modern web and mobile apps (iOS/Android) in no time, using a unified backend+frontend code within a single app repo. That’s a pretty ambitious approach but it requires a very opinionated and highly coupled JS tech stack and it’s still a pretty niche framework.&lt;/p&gt;
&lt;p&gt;Moreover, we are a Java shop on the backend. At AgoraPulse, we rely heavily on :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://angular.io&quot;&gt;Angular&lt;/a&gt; and &lt;a href=&quot;http://ionicframework.com&quot;&gt;Ionic&lt;/a&gt; for the JS frontend (with a shared business/data architecture based on &lt;a href=&quot;https://github.com/ngrx/store&quot;&gt;Ngrx&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.groovy-lang.org&quot;&gt;Groovy&lt;/a&gt; and &lt;a href=&quot;https://grails.org&quot;&gt;Grails&lt;/a&gt; ecosystem for the JVM backend.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So my question is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What are the best choices to build real-time Angular client apps, connected to a JVM-based backend these days?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our requirements are pretty basic. We don’t need full Meteor’s end-to-end application model.
We just want to be able to :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;build a reactive app with an event bus on the JVM, and&lt;/li&gt;
&lt;li&gt;extend the event bus down to the browser to be able to publish/subscribe to real-time events from an Angular app.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;server-side-jvm-&quot;&gt;Server side (JVM)&lt;/h3&gt;
&lt;p&gt;Reactive apps is a hot topic nowadays and there are many great libs/platforms to build this type of event-driven architecture on the JVM:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://vertx.io&quot;&gt;Vert.x&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.lightbend.com&quot;&gt;Lightbend&lt;/a&gt; platform (Play, Akka, Scala),&lt;/li&gt;
&lt;li&gt;Spring &lt;a href=&quot;http://projectreactor.io&quot;&gt;Project Reactor&lt;/a&gt; (integrated into Grails 3.0).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;client-side&quot;&gt;Client side&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;ReactJS&lt;/a&gt; and &lt;a href=&quot;https://angular.io&quot;&gt;Angular&lt;/a&gt; are the two most popular framework right now to build modern JS apps. Most platforms use &lt;a href=&quot;https://github.com/sockjs/sockjs-client&quot;&gt;SockJS&lt;/a&gt; to handle real-time connections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://vertx.io/docs/vertx-web/groovy/&quot;&gt;Vertx-web&lt;/a&gt; provides a SockJS server implementation with an event bus bridge and a &lt;a href=&quot;http://vertx.io/docs/vertx-web/groovy/#_sockjs_event_bus_bridge&quot;&gt;vertx-evenbus.js&lt;/a&gt; client library (very easy to use),&lt;/li&gt;
&lt;li&gt;Spring provides websocket SockJS support though Spring Messaging and Websocket libs (see an example &lt;a href=&quot;https://spring.io/guides/gs/messaging-stomp-websocket/&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;final-choice-vert-x-angular&quot;&gt;Final choice: Vert.x + Angular&lt;/h3&gt;
&lt;p&gt;In the end, I’ve chosen to experiment with Vert.x for its excellent Groovy support, distributed event bus, scalability and ease of use.&lt;/p&gt;
&lt;p&gt;I enjoyed it very much. Let me show you the result of my experimentation which is the root of our real-time features coming very soon in AgoraPulse v6.0!&lt;/p&gt;
&lt;h2 id=&quot;why-vert-x-&quot;&gt;Why Vert.x?&lt;/h2&gt;
&lt;p&gt;Like other reactive platform, Vert.x is event driven and non blocking. It scales very well (even more that Node.js).&lt;/p&gt;
&lt;p&gt;Unlike other reactive platforms, Vert.x is polyglot: you can use Vert.x with multiple languages including Java, JavaScript, Groovy, Ruby, Ceylon, Scala and Kotlin.&lt;/p&gt;
&lt;p&gt;Unlike Node.js, Vert.x is a general purpose tool-kit and unopinionated. It’s a versatile platform suitable for many things: from simple network utilities, sophisticated modern web applications, HTTP/REST microservices or a full blown back-end message-bus application.&lt;/p&gt;
&lt;p&gt;Like other reactive platforms, it looks scary in the begining when you read the documentation… ;) But once you start playing with it, it remains fun and simple to use, especially with Groovy! Vert.x really allows you to build substantial systems without getting tangled in complexity.&lt;/p&gt;
&lt;p&gt;In my case, I was mainly interested by the distributed event-bus provided (a core feature of Vert.x).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To validate our approach, we built prototypes with the following goals:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;share and synchronize a common (Ngrx-based) state between multiple connected clients, and&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;distribute real-time (Ngrx-based) actions across multiple connected clients, which impact local states/reducers.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note: &lt;a href=&quot;https://github.com/ngrx/store&quot;&gt;@ngrx/store&lt;/a&gt; is a RxJS powered state management inspired by Redux for Angular apps. It’s currently the most popular way to structure complex business logic in Angular apps.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blog/vertx-realtime-angular-ngrx/redux.png&quot; alt=&quot;Redux&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Source: &lt;a href=&quot;https://www.smashingmagazine.com/2016/06/an-introduction-to-redux/&quot;&gt;https://www.smashingmagazine.com/2016/06/an-introduction-to-redux/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;proof-of-concept&quot;&gt;PROOF OF CONCEPT&lt;/h2&gt;
&lt;p&gt;Here is the repo of our initial proof of concept:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/benorama/ngrx-realtime-app&quot;&gt;http://github.com/benorama/ngrx-realtime-app&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The repo is divided into two separate projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Vert.x server app&lt;/strong&gt;, based on &lt;a href=&quot;http://vertx.io&quot;&gt;Vert.x&lt;/a&gt; (version 3.3), managed by &lt;a href=&quot;https://gradle.org&quot;&gt;Gradle&lt;/a&gt;, with a main verticle developed in &lt;a href=&quot;http://groovy-lang.org&quot;&gt;Groovy&lt;/a&gt; lang.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Angular client app&lt;/strong&gt;, based on Angular (version 4.0.1), managed by &lt;a href=&quot;https://angular.io&quot;&gt;Angular&lt;/a&gt; CLI with state, reducers and actions logic based on &lt;a href=&quot;https://github.com/ngrx/store&quot;&gt;@ngrx/store&lt;/a&gt; (version 2.2.1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the demo, we are using the counter example code (actions and reducers) from &lt;a href=&quot;https://github.com/ngrx/store&quot;&gt;@ngrx/store&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The counter client business logic is based on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CounterState&lt;/code&gt; interface, counter state model,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;counterReducer&lt;/code&gt; reducer, counter state management based on dispatched actions, and&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Increment&lt;/em&gt;, &lt;em&gt;decrement&lt;/em&gt; and &lt;em&gt;reset&lt;/em&gt; counter actions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;State is maintained server-side with a simple singleton &lt;code&gt;CounterService&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs groovy&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CounterService&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; INCREMENT = &lt;span class=&quot;hljs-string&quot;&gt;&#39;[Counter] Increment&#39;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; DECREMENT = &lt;span class=&quot;hljs-string&quot;&gt;&#39;[Counter] Decrement&#39;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; RESET = &lt;span class=&quot;hljs-string&quot;&gt;&#39;[Counter] Reset&#39;&lt;/span&gt;
    &lt;span class=&quot;hljs-typename&quot;&gt;int&lt;/span&gt; total = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;hljs-typename&quot;&gt;void&lt;/span&gt; handleEvent(event) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt;(event.type) {
            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;INCREMENT:&lt;/span&gt;
                total++
                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;DECREMENT:&lt;/span&gt;
                total--
                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;RESET:&lt;/span&gt;
                total = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;client-state-initialization-through-request-response&quot;&gt;Client state initialization through Request/Response&lt;/h3&gt;
&lt;p&gt;Initial state is initialized with simple &lt;strong&gt;request/response&lt;/strong&gt; (or send/reply) on the event bus.
Once the client is connected, it sends a request to the event bus at the address &lt;strong&gt;counter::total&lt;/strong&gt;. The server replies directly with the value of &lt;code&gt;CounterService&lt;/code&gt; total and the client dispatches locally a &lt;em&gt;reset&lt;/em&gt; action with the total value from the reply.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blog/vertx-realtime-angular-ngrx/vertx-request-response.png&quot; alt=&quot;Vertx Request Response&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Source: &lt;a href=&quot;https://www.slideshare.net/RedHatDevelopers/vertx-microservices-were-never-so-easy-clement-escoffier&quot;&gt;https://www.slideshare.net/RedHatDevelopers/vertx-microservices-were-never-so-easy-clement-escoffier&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Here is an extract of the corresponding code (from &lt;code&gt;AppEventBusService&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs typescript&quot;&gt;initializeCounter() {
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.eventBusService.send(&lt;span class=&quot;hljs-string&quot;&gt;&#39;counter::total&#39;&lt;/span&gt;, body, (error, message) =&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle reply&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (message &amp;&amp; message.body) {
            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; localAction = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; CounterActions.ResetAction();
            localAction.payload = message.body; &lt;span class=&quot;hljs-comment&quot;&gt;// Total value&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.store.dispatch(localAction);
        }
    });
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;actions-distribution-through-publish-subscribe&quot;&gt;Actions distribution through Publish/Subscribe&lt;/h3&gt;
&lt;p&gt;Action distribution/sync uses the &lt;strong&gt;publish/subscribe&lt;/strong&gt; pattern.&lt;/p&gt;
&lt;p&gt;Counter actions are published from the client to the event bus at the address &lt;strong&gt;counter::actions&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Any client that have subscribed to &lt;strong&gt;counter::actions&lt;/strong&gt; address will receive the actions and redispatch them locally to impact app states/reducers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blog/vertx-realtime-angular-ngrx/vertx-publish-subscribe.png&quot; alt=&quot;Vertx Publish Subscribe&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Source: &lt;a href=&quot;https://www.slideshare.net/RedHatDevelopers/vertx-microservices-were-never-so-easy-clement-escoffier&quot;&gt;https://www.slideshare.net/RedHatDevelopers/vertx-microservices-were-never-so-easy-clement-escoffier&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Here is an extract of the corresponding code (from &lt;code&gt;AppEventBusService&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs typescript&quot;&gt;publishAction(action: RemoteAction) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (action.publishedByUser) {
        &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.error(&lt;span class=&quot;hljs-string&quot;&gt;&quot;This action has already been published&quot;&lt;/span&gt;);
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
    }
    action.publishedByUser = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.currentUser;
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.eventBusService.publish(action.eventBusAddress, action);
}
subscribeToActions(eventBusAddress: &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.eventBusService.registerHandler(eventBusAddress, (error, message) =&gt; {
        &lt;span class=&quot;hljs-comment&quot;&gt;// Handle message from subscription&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (message.body.publishedByUser === &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.currentUser) {
            &lt;span class=&quot;hljs-comment&quot;&gt;// Ignore action sent by current manager&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
        }
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; localAction = message.body;
        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.store.dispatch(localAction);
    });
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The event bus publishing logic is achieved through a simple Ngrx Effects. Any actions that extend &lt;code&gt;RemoteAction&lt;/code&gt; class will be published to the event bus.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs typescript&quot;&gt;@Injectable()
&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; AppEventBusEffects {

    &lt;span class=&quot;hljs-constructor&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;constructor&lt;/span&gt;(private actions$: Actions, private appEventBusService: AppEventBusService) &lt;/span&gt;{}
    &lt;span class=&quot;hljs-comment&quot;&gt;// Listen to all actions and publish remote actions to account event bus&lt;/span&gt;
    @Effect({dispatch: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;}) remoteAction$ = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.actions$
        .filter(action =&gt; action &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; RemoteAction &amp;&amp; action.publishedByUser == &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;)
        .do((action: RemoteAction) =&gt; {
            &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.appEventBusService.publishAction(action);
        });

    @Effect({dispatch: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;}) login$ = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.actions$
        .ofType(UserActionTypes.LOGIN)
        .do(() =&gt; {
            &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.appEventBusService.connect();
        });
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see all of this in action by locally launching the server and the client app in two separate browser windows.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blog/vertx-realtime-angular-ngrx/demo-app-screen.png&quot; alt=&quot;Demo app screen&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bonus: the demo app also includes user status (offline/online), based of the event bus connection status.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The counter state is shared and synchronized between connected clients and each local action is distributed in real-time to other clients.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mission accomplished!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;Typescript version of Vertx EventBus Client &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; The app uses our own Typescript version of the official JS &lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;Vertx EventBus Client&lt;/a&gt;. It can be found &lt;a href=&quot;https://gist.github.com/benorama/93373c3c1c3574732d6cc1b4754aab9f&quot;&gt;here&lt;/a&gt;, any feedback, improvement suggestions are welcome!&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Wed, 26 Apr 2017 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/building-a-real-time-web-app-with-angular-ngrx-and-vert-x</link>
          <guid isPermaLink="true">https://vertx.io/blog/building-a-real-time-web-app-with-angular-ngrx-and-vert-x</guid>
          <author>
            <name>benorama</name>
            <uri>http://github.com/benorama</uri>
          </author>
        </item>
      
        <item>
          <title>Dynamic Routing in Serverless Microservice with Vert.x Event Bus</title>
          <description>
      &lt;article&gt;&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;content&#39;&gt;this is a re-publication of the following &lt;a href=&quot;https://www.rowellbelen.com/dynamic-routing-in-serverless-microservice-with-vert-x-event-bus/&quot;&gt;blog post&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&quot;serverless-framework&quot;&gt;SERVERLESS FRAMEWORK&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://serverless.com&quot;&gt;Serverless Framework&lt;/a&gt; has become the &lt;em&gt;De Facto&lt;/em&gt; toolkit for building and deploying Serverless functions or applications. Its community has done a great job advancing the tools around Serverless architecture.&lt;/p&gt;
&lt;p&gt;However, in the Serverless community there is debate among developers on whether a single &lt;strong&gt;AWS Lambda&lt;/strong&gt; function should only be responsible for a single API endpoint. My answer, based on my real-world production experience, is &lt;strong&gt;NO&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;Imagine if you are building a set of APIs with &lt;strong&gt;10&lt;/strong&gt; endpoints and you need to deploy the APIs to &lt;strong&gt;DEV&lt;/strong&gt;, &lt;strong&gt;STAGE&lt;/strong&gt; and &lt;strong&gt;PROD&lt;/strong&gt; environments. Now you are looking at &lt;strong&gt;30&lt;/strong&gt; different functions to version, deploy and manage - not to mention the &lt;em&gt;Copy &amp; Paste&lt;/em&gt; code and configuration that will result from this type of set-up. &lt;strong&gt;NO THANKS!!!&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;I believe a more pragmatic approach is &lt;strong&gt;1 Lambda Function&lt;/strong&gt; == &lt;strong&gt;1 Microservice&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, if you were building a &lt;strong&gt;User Microservice&lt;/strong&gt; with basic &lt;strong&gt;CRUD&lt;/strong&gt; functionality, you should implement &lt;code&gt;CREATE&lt;/code&gt;, &lt;code&gt;READ&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; in a &lt;strong&gt;single&lt;/strong&gt; Lambda function. In the code, you should resolve the desired action by inspecting the request or the context.&lt;/p&gt;
&lt;h2 id=&quot;vert-x-to-the-rescue&quot;&gt;VERT.X TO THE RESCUE&lt;/h2&gt;
&lt;p&gt;There are many benefits to using &lt;strong&gt;Vert.x&lt;/strong&gt; in any application. With &lt;strong&gt;Vert.x&lt;/strong&gt;, you get a rock-solid and lightweight toolkit for building &lt;strong&gt;reactive&lt;/strong&gt;, &lt;strong&gt;highly performant&lt;/strong&gt;, &lt;strong&gt;event-driven&lt;/strong&gt; and &lt;strong&gt;non-blocking&lt;/strong&gt; applications. The toolkit even provides asynchronous &lt;em&gt;APIs&lt;/em&gt; for accessing traditional blocking drivers such as &lt;strong&gt;&lt;a href=&quot;http://vertx.io/docs/vertx-jdbc-client/groovy/&quot;&gt;JDBC&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;However, for this example, we will mainly focus on the &lt;a href=&quot;http://vertx.io/docs/vertx-core/groovy/#event_bus&quot;&gt;Event Bus&lt;/a&gt;. The event bus allows different parts of your application to communicate with each other via event messages. It supports &lt;em&gt;publish/subscribe&lt;/em&gt;, &lt;em&gt;point to point&lt;/em&gt;, and &lt;em&gt;request-response messaging&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For the &lt;strong&gt;User Microservice&lt;/strong&gt; example above, we could treat the combination of the &lt;code&gt;HTTP METHOD&lt;/code&gt; and &lt;code&gt;RESOURCE PATH&lt;/code&gt; as a unique event channel, and register the subscribers/handlers to respond appropriately.&lt;/p&gt;
&lt;p&gt;Let’s dive right in.&lt;/p&gt;
&lt;h2 id=&quot;goal-&quot;&gt;GOAL:&lt;/h2&gt;
&lt;p&gt;Create a &lt;em&gt;reactive&lt;/em&gt;, &lt;em&gt;message-driven&lt;/em&gt;, &lt;em&gt;asynchronous&lt;/em&gt; &lt;strong&gt;User Microservice&lt;/strong&gt; with &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; CRUD operations in a &lt;em&gt;single&lt;/em&gt; &lt;strong&gt;&lt;a href=&quot;aws.amazon.com/lambda&quot;&gt;AWS Lambda Function&lt;/a&gt;&lt;/strong&gt; using the &lt;a href=&quot;https://serverless.com&quot;&gt;Serverless Framework&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Serverless stack definition&lt;/code&gt;:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/bytekast/48daa2ca479156c98d2735cca181ef30.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;solution-&quot;&gt;SOLUTION:&lt;/h2&gt;
&lt;p&gt;Use &lt;a href=&quot;http://vertx.io&quot;&gt;Vert.x&lt;/a&gt;‘s &lt;a href=&quot;http://vertx.io/docs/vertx-core/groovy/#event_bus&quot;&gt;Event Bus&lt;/a&gt; to handle &lt;strong&gt;dynamic routing&lt;/strong&gt; to &lt;strong&gt;event handlers&lt;/strong&gt; based on &lt;em&gt;HTTP method&lt;/em&gt; and &lt;em&gt;resource path&lt;/em&gt; from the API input.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Lambda Handler&lt;/code&gt;:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/bytekast/d5a544f8cdcd327a12010100b2ba2d66.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;code-review&quot;&gt;CODE REVIEW&lt;/h2&gt;
&lt;p&gt;Lines &lt;code&gt;14-19&lt;/code&gt; initializes the &lt;strong&gt;Vert.x&lt;/strong&gt; instance. AWS Lambda will hold on to this instance for the life of the container/&lt;strong&gt;JVM&lt;/strong&gt;. It is reused in subsequent requests.&lt;/p&gt;
&lt;p&gt;Line &lt;code&gt;17&lt;/code&gt; registers the &lt;strong&gt;User Service&lt;/strong&gt; &lt;em&gt;handlers&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Line &lt;code&gt;22&lt;/code&gt; defines the &lt;strong&gt;main handler&lt;/strong&gt; method that is called when the &lt;strong&gt;Lambda function&lt;/strong&gt; is invoked.&lt;/p&gt;
&lt;p&gt;Line &lt;code&gt;27&lt;/code&gt; sends the Lambda function input to the (dynamic) &lt;strong&gt;address&lt;/strong&gt; where handlers are waiting to respond. &lt;/p&gt;
&lt;p&gt;Lines &lt;code&gt;44-66&lt;/code&gt; defines the specific &lt;em&gt;handlers&lt;/em&gt; and binds them to the appropriate &lt;em&gt;channels&lt;/em&gt; (http method + resource path)&lt;/p&gt;
&lt;h2 id=&quot;summary&quot;&gt;SUMMARY&lt;/h2&gt;
&lt;p&gt;As you can see, &lt;a href=&quot;http://vertx.io&quot;&gt;Vert.x&lt;/a&gt;‘s &lt;a href=&quot;http://vertx.io/docs/vertx-core/groovy/#event_bus&quot;&gt;Event Bus&lt;/a&gt; makes it very easy to dynamically support multiple routes in a single &lt;strong&gt;Serverless&lt;/strong&gt; function. This reduces the number of functions you have to manage, deploy and maintain in &lt;strong&gt;AWS&lt;/strong&gt;. In addition, you gain access to asynchronous, non-blocking APIs that come standard with &lt;strong&gt;Vert.x&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Serverless + Vert.x = BLISS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/article&gt;
      </description>
          <pubDate>Fri, 14 Apr 2017 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/dynamic-routing-in-serverless-microservice-with-vert-x-event-bus</link>
          <guid isPermaLink="true">https://vertx.io/blog/dynamic-routing-in-serverless-microservice-with-vert-x-event-bus</guid>
          <author>
            <name>bytekast</name>
            <uri>http://github.com/bytekast</uri>
          </author>
        </item>
      
        <item>
          <title>Scala is here</title>
          <description>
      &lt;article&gt;&lt;h2 id=&quot;tl-dr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Scala support for Vert.x is here!&lt;/li&gt;
&lt;li&gt;It is based on Scala 2.12, no support for 2.11 planned&lt;/li&gt;
&lt;li&gt;all Vert.x-modules are available in a Scala flavor&lt;/li&gt;
&lt;li&gt;It’s awesome&lt;/li&gt;
&lt;li&gt;Get started &lt;a href=&quot;https://github.com/vert-x3/vertx-sbt-starter&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;The rise of &lt;a href=&quot;http://scala-lang.org/&quot;&gt;Scala&lt;/a&gt; as one of the most important languages on the JVM caught many (me included) by surprise. This hybrid of functional and imperative paradigms struck a chord with many developers. Thanks to Scala a lot of people who’d never have touched a language like Haskell got exposed to functional programming. This exposure was one of the driving forces to get streams and lambda into the JVM.&lt;/p&gt;
&lt;p&gt;With the release of Vert.x 3.4.0 we finally introduced Scala to the family of supported languages: &lt;a href=&quot;https://github.com/vert-x3/vertx-lang-scala&quot;&gt;vertx-lang-scala&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post I will introduce the new stack and how the power of Scala can be used in your favorite reactive toolkit.&lt;/p&gt;
&lt;h2 id=&quot;basics&quot;&gt;Basics&lt;/h2&gt;
&lt;p&gt;vertx-lang-scala is based on Scala 2.12. There are no plans to support 2.11.&lt;/p&gt;
&lt;p&gt;All modules available for Vert.x are supported (you can check  &lt;a href=&quot;https://github.com/vert-x3/vertx-lang-scala/tree/master/vertx-lang-scala-stack&quot;&gt;here&lt;/a&gt; ).&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;Future and Promise both need a ExecutionContext &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; Modules use the following naming-scheme: &lt;em&gt;io.vertx:&lt;name-of-vertx-module&gt;-scala_2.12:&lt;vertx-major-version&gt;&lt;/em&gt;. The Scala version of &lt;em&gt;io.vertx:vert-web:3.4.0&lt;/em&gt; would be &lt;em&gt;io.vertx:vertx-web-scala_2.12:3.4.0&lt;/em&gt;.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;There is an sbt-based &lt;a href=&quot;https://github.com/vert-x3/vertx-sbt-starter&quot;&gt;quickstart-project&lt;/a&gt; available that will be updated for each Vert.x-release.&lt;/p&gt;
&lt;p&gt;Please note: Although &lt;a href=&quot;http://www.scala-sbt.org/&quot;&gt;sbt&lt;/a&gt; is used in this quickstart it is by no means required. There are no special plugins involved so vertx-lang-scala can easily be used with &lt;a href=&quot;https://docs.gradle.org/current/userguide/scala_plugin.html&quot;&gt;Gradle&lt;/a&gt; or &lt;a href=&quot;https://github.com/davidB/scala-maven-plugin&quot;&gt;Maven&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I use sbt as it is the default build system used for Scala projects.&lt;/p&gt;
&lt;h2 id=&quot;quickstart&quot;&gt;Quickstart&lt;/h2&gt;
&lt;p&gt;Let’s get started by cloning the quickstart:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;git clone git@github.com:vert-x3/vertx-sbt-starter.git&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You just got the following things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An sbt project containing dependencies to Vert.x-core and Vert.x-web&lt;/li&gt;
&lt;li&gt;The ability to create a fat-jat via &lt;code&gt;sbt assembly&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The ability to create a docker container via &lt;code&gt;sbt docker&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A few example verticles&lt;/li&gt;
&lt;li&gt;Unit test examples&lt;/li&gt;
&lt;li&gt;a pre-configured Scala-shell inside sbt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will now run the application to get some quick satisfaction. Use &lt;code&gt;sbt assembly&lt;/code&gt; to produce the fat-jar followed by &lt;code&gt;java -jar target/scala-2.12/vertx-scala-sbt-assembly-0.1-SNAPSHOT.jar&lt;/code&gt;. Now point your browser to &lt;a href=&quot;http://localhost:8666/hello&quot;&gt;http://localhost:8666/hello&lt;/a&gt; for a classic welcome message.&lt;/p&gt;
&lt;h2 id=&quot;the-details&quot;&gt;The details&lt;/h2&gt;
&lt;p&gt;Open your IDE so we can take a look at what’s going on under the hood. We start with the &lt;em&gt;HttpVerticle&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; io.vertx.scala.sbt

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.lang.scala.&lt;span class=&quot;hljs-type&quot;&gt;ScalaVerticle&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.scala.ext.web.&lt;span class=&quot;hljs-type&quot;&gt;Router&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; scala.concurrent.&lt;span class=&quot;hljs-type&quot;&gt;Future&lt;/span&gt;

&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HttpVerticle&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ScalaVerticle&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;1&gt;&lt;/span&gt;


  &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;startFuture&lt;/span&gt;(&lt;/span&gt;): &lt;span class=&quot;hljs-type&quot;&gt;Future&lt;/span&gt;[&lt;span class=&quot;hljs-type&quot;&gt;Unit&lt;/span&gt;] = { &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;2&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;router&lt;/span&gt; =&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Router&lt;/span&gt;.router(vertx) &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;3&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;route&lt;/span&gt; =&lt;/span&gt; router
      .get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/hello&quot;&lt;/span&gt;)
        .handler(_.response().end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;world&quot;&lt;/span&gt;))

    vertx &lt;span class=&quot;hljs-comment&quot;&gt;//&lt;4&gt;&lt;/span&gt;
      .createHttpServer()
      .requestHandler(router.accept)
      .listenFuture(&lt;span class=&quot;hljs-number&quot;&gt;8666&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;5&gt;&lt;/span&gt;
        .map(_ =&gt; ()) &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;6&gt;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;ScalaVerticle&lt;/em&gt; is the base class for all Scala-Verticles. It provides all required methods to integrate with the Vert.x-runtime.&lt;/li&gt;
&lt;li&gt;There are two ways to start a Verticle. Overriding &lt;em&gt;startFuture&lt;/em&gt;, like in this example, tells Vert.x to only consider the Verticle fully started after the returned &lt;em&gt;Future[Unit]&lt;/em&gt; has been successfully completed. Alternatively one can override &lt;em&gt;start&lt;/em&gt; and by that signal to Vert.x the instant availability of the Verticle.&lt;/li&gt;
&lt;li&gt;This block creates a &lt;em&gt;Router&lt;/em&gt; for incoming HTTP-requests. It registers a handler to answer with “world” if a request to the URL “/hello” arrives. The class is coming from the &lt;a href=&quot;http://vertx.io/docs/vertx-web/scala/&quot;&gt;Vert.x-web-module&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Every Verticle has access to the Vert.x-instance. Here we use it to create a webserver and register our router to handle incoming requests.&lt;/li&gt;
&lt;li&gt;We finally reached the reason why I use &lt;em&gt;startFuture&lt;/em&gt; in the first place. All operations in Vert.x are asynchronous. So starting the webserver most definitely means it takes some more time until it bound to the given port (8666 in this case). That’s why &lt;em&gt;listenFuture&lt;/em&gt; is used, which returns a &lt;em&gt;Future&lt;/em&gt; which in turn contains the actual instance of the webserver that just got started. So our Verticle will be ready to receive requests &lt;em&gt;after&lt;/em&gt; the returned &lt;em&gt;Future&lt;/em&gt; has been completed.&lt;/li&gt;
&lt;li&gt;In most cases we can return the &lt;em&gt;Future&lt;/em&gt; directly. In this case the &lt;em&gt;Future&lt;/em&gt; returned by &lt;em&gt;listenFuture&lt;/em&gt; has the wrong type. We get a &lt;em&gt;Future[HttpServer]&lt;/em&gt; but we need a &lt;em&gt;Future[Unit]&lt;/em&gt; as you can see in the signature of &lt;em&gt;startFuture&lt;/em&gt;. This call takes care of mapping the given &lt;em&gt;Future[HttpServer]&lt;/em&gt; to the required return type.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;I use &lt;a href=&quot;http://www.scalatest.org/&quot;&gt;ScalaTest&lt;/a&gt; for all my testing needs. It comes with stellar support for asynchronous operations and is a perfect fit for testing Vert.x-applications.&lt;/p&gt;
&lt;p&gt;The following &lt;em&gt;HttpVerticleSpec&lt;/em&gt; shows how to test an HTTP-API using only Vert.x-classes. Personally I prefer &lt;a href=&quot;http://rest-assured.io/&quot;&gt;REST-assured&lt;/a&gt; with its rich DSL. For this post I wanted to stick with Vert.x-API, so here we go.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs scala&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; io.vertx.scala.sbt

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.scalatest.&lt;span class=&quot;hljs-type&quot;&gt;Matchers&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; scala.concurrent.&lt;span class=&quot;hljs-type&quot;&gt;Promise&lt;/span&gt;

&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HttpVerticleSpec&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;VerticleTesting&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-type&quot;&gt;HttpVerticle&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Matchers&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;1&gt;&lt;/span&gt;

  &lt;span class=&quot;hljs-string&quot;&gt;&quot;HttpVerticle&quot;&lt;/span&gt; should &lt;span class=&quot;hljs-string&quot;&gt;&quot;bind to 8666 and answer with &#39;world&#39;&quot;&lt;/span&gt; in { &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;2&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;promise&lt;/span&gt; =&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Promise&lt;/span&gt;[&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;3&gt;&lt;/span&gt;

    vertx.createHttpClient()  &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;4&gt;&lt;/span&gt;
      .getNow(&lt;span class=&quot;hljs-number&quot;&gt;8666&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/hello&quot;&lt;/span&gt;,
        r =&gt; {
          r.exceptionHandler(promise.failure)
          r.bodyHandler(b =&gt; promise.success(b.toString))
        })

    promise.future.map(res =&gt; res should equal(&lt;span class=&quot;hljs-string&quot;&gt;&quot;world&quot;&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;5&gt;&lt;/span&gt;
  }

}&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;VerticleTesting&lt;/em&gt; is a base class for your tests included with the quickstart-project. It’s a small helper that takes care of deploying/un-deploying the Verticle to be tested and manages a Vert.x-instance. It additionally extends &lt;a href=&quot;http://www.scalatest.org/user_guide/async_testing&quot;&gt;AsyncFlatSpec&lt;/a&gt; so we can use Futures as test-return-types.&lt;/li&gt;
&lt;li&gt;Isn’t it nice and readable?&lt;/li&gt;
&lt;li&gt;The promise is required as the whole test will run async&lt;/li&gt;
&lt;li&gt;We use the vertx-instance provided by &lt;em&gt;VerticleTesting&lt;/em&gt; to create a Netty-based HttpClient. We instruct the client to call the specified URL and to succeed the &lt;em&gt;Promise&lt;/em&gt; with the returned body.&lt;/li&gt;
&lt;li&gt;This creates the actual assertion. After getting the &lt;em&gt;Future&lt;/em&gt; from the &lt;em&gt;Promise&lt;/em&gt; an assertion is created: &lt;em&gt;The Result should be equal to the String “world”&lt;/em&gt;. ScalaTest takes care of evaluating the returned &lt;em&gt;Future&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That’s all you need to get started!&lt;/p&gt;
&lt;h2 id=&quot;futures-in-vertx-lang-scala&quot;&gt;Futures in vertx-lang-scala&lt;/h2&gt;
&lt;p&gt;Now for a more in depth topic I think is worth mentioning. vertx-lang-scala treats async operations the Scala-way which is a little different from what you might be used from Vert.x. For async operations like subscribing to the eventbus or deploying a Verticle you would call a method like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs scala&quot;&gt;vertx.deployVerticle(&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.foo.OtherVerticle&quot;&lt;/span&gt;, res -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (res.succeeded()) {
    startFuture.complete();
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    startFuture.fail(res.cause());
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;em&gt;deployVerticle&lt;/em&gt; method takes the Verticle-name and a &lt;em&gt;Handler[AsyncResult]&lt;/em&gt; as its arguments. The &lt;em&gt;Handler[AsyncResult]&lt;/em&gt; is called after Vert.x tried deploying the Verticle. This style can also be used for Scala (which might ease the transition when coming from the Java-world) but their is a way more &lt;em&gt;scalaish&lt;/em&gt; way of doing this.&lt;/p&gt;
&lt;p&gt;For every method taking a &lt;em&gt;Handler[AsyncResult]&lt;/em&gt; as its argument I create an alternative method using &lt;a href=&quot;http://docs.scala-lang.org/overviews/core/futures.html&quot;&gt;Scala-Futures&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs scala&quot;&gt;vertx.deployVerticleFuture(&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.foo.OtherVerticle&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;1&gt;&lt;/span&gt;
  .onComplete{  &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;2&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Success&lt;/span&gt;(s) =&gt; println(s&lt;span class=&quot;hljs-string&quot;&gt;&quot;Verticle id is: $s&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// &lt;3&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Failure&lt;/span&gt;(t) =&gt; t.printStackTrace()
  }&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;A method providing a &lt;em&gt;Future&lt;/em&gt; based alternative gets &lt;em&gt;Future&lt;/em&gt; appended to its name and returns a &lt;em&gt;Future&lt;/em&gt; instead of taking a &lt;em&gt;Handler&lt;/em&gt; as its argument.&lt;/li&gt;
&lt;li&gt;We are now free to use &lt;em&gt;Future&lt;/em&gt; the way we want. In this case onComplete is used to react on the completion.&lt;/li&gt;
&lt;li&gt;Pattern matching on the result &lt;em&gt;&lt;3&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I strongly recommend using this approach over using &lt;em&gt;Handlers&lt;/em&gt; as you won’t run into Callback-hell and you get all the goodies Scala provides for async operations.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;Future and Promise both need a ExecutionContext &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; The &lt;a href=&quot;https://github.com/vert-x3/vertx-lang-scala/blob/master/vertx-lang-scala/src/main/scala/io/vertx/lang/scala/VertxExecutionContext.scala&quot;&gt;VertxExecutionContext&lt;/a&gt; is made implicitly available inside the &lt;a href=&quot;https://github.com/vert-x3/vertx-lang-scala/blob/master/vertx-lang-scala/src/main/scala/io/vertx/lang/scala/ScalaVerticle.scala&quot;&gt;ScalaVerticle&lt;/a&gt;. It makes sure all  operations are executed on the correct Event Loop. If you are using Vert.x without Verticles you have to provide it on your own.
&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&quot;using-the-console&quot;&gt;Using the console&lt;/h2&gt;
&lt;p&gt;A great feature of sbt is the embedded, configurable Scala-console. The console available in the quickstart-project is pre-configured to provide a fresh Vert.x-instance and all required imports so you can start playing around with Vert.x in an instant.&lt;/p&gt;
&lt;p&gt;Execute the following commands in the project-folder to deploy the &lt;em&gt;HttpVerticle&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;sbt
&gt; console
scala&gt; vertx.deployVerticle(nameForVerticle[HttpVerticle])
scala&gt; vertx.deploymentIDs&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After  executing this sequence you can now point your browser &lt;a href=&quot;http://localhost:8666/hello&quot;&gt;http://localhost:8666/hello&lt;/a&gt; to see our message. The last command issued shows the Ids under which Verticles have been deployed.&lt;/p&gt;
&lt;p&gt;To get rid of the deployment you can now type &lt;code&gt;vertx.undeploy(vertx.deploymentIDs.head)&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;that-s-it-&quot;&gt;That’s it!&lt;/h2&gt;
&lt;p&gt;This was a very quick introduction to our new Scala-stack. I hope to have given you a little taste of the Scala goodness now available with Vert.x. I recommend digging a little more through the quickstart to get a feeling for what’s there.
In my next blog post I will explain some of the decisions I made and the obstacles I faced with the differences between Java and Scala /Hint: They are way bigger than I was aware of).&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 20 Mar 2017 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/scala-is-here</link>
          <guid isPermaLink="true">https://vertx.io/blog/scala-is-here</guid>
          <author>
            <name>codepitbull</name>
            <uri>http://github.com/codepitbull</uri>
          </author>
        </item>
      
        <item>
          <title>Data-driven Apps made easy with Vert.x 3.4.0 and headless CMS Gentics Mesh</title>
          <description>
      &lt;article&gt;&lt;p&gt;In this article, I would like to share why Vert.x is not only a robust foundation for the &lt;a href=&quot;http://getmesh.io/&quot;&gt;headless Content Management System Gentics Mesh&lt;/a&gt; but also how the recent release 3.4.0 can be used to build a template-based web server with Gentics Mesh and handlebars.&lt;/p&gt;
&lt;p&gt;A headless CMS focuses on delivering your content through an API and allows editors creating and managing that data through a web-based interface. Unlike a traditional CMS, it does not provide a specifically rendered output. The frontend part (the head) is literally cut off, allowing developers create websites, apps, or any other data-driven projects with their favourite technologies.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://vertx.io/blog/vert-x-3-4-0-is-released/&quot;&gt;Vert.x 3.4.0&lt;/a&gt; has just been released and it comes with a bunch of new features and bug fixes. I am especially excited about a small enhancement that changes the way in which the handlebars template engine handle their context data. Previously it was not possible to resolve Vert.x ‘s JsonObjects within the render context. With my enhancement &lt;a href=&quot;https://github.com/vert-x3/vertx-web/pull/509&quot;&gt;#509&lt;/a&gt; - released in Vert.x 3.4.0 - it is now possible to access nested data from these objects within your templates. Previously this would have required flattening out each object and resolving it individually, which would have been very cumbersome.&lt;/p&gt;
&lt;p&gt;I’m going to demonstrate this enhancement by showing how to build a product catalogue using Vert.x together with handlebars templates to render and serve the web pages. The product data is managed, stored and delivered by the CMS server as source for JSON data.&lt;/p&gt;
&lt;h2 id=&quot;clone-import-download-start-set-up-your-product-catalogue-website-quickly&quot;&gt;Clone, Import, Download, Start - Set up your product catalogue website quickly&lt;/h2&gt;
&lt;p&gt;Let’s quickly set up everything you need to run the website before I walk you through the code.&lt;/p&gt;
&lt;h3 id=&quot;1-clone-get-the-full-vert-x-with-gentics-mesh-example-from-github-https-github-com-gentics-mesh-vertx-example-&quot;&gt;1.  Clone - &lt;a href=&quot;https://github.com/gentics/mesh-vertx-example&quot;&gt;Get the full Vert.x with Gentics Mesh example from Github&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Fire up your terminal and clone the example application to the directory of your choice.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;git clone git@github.com:gentics/mesh-vertx-example.git&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;2-import-the-maven-project-in-your-favourite-ide&quot;&gt;2. Import - The maven project in your favourite IDE&lt;/h3&gt;
&lt;p&gt;The application is set up as a maven project and can be imported in Eclipse IDE via File → Import → Existing Maven Project&lt;/p&gt;
&lt;h3 id=&quot;3-download-get-the-headless-cms-gentics-mesh&quot;&gt;3. Download  -  Get the headless CMS Gentics Mesh&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://getmesh.io/Download&quot;&gt;Download the latest version of Gentics Mesh&lt;/a&gt; and start the CMS with this one-liner&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;java -jar mesh-demo-&lt;span class=&quot;hljs-number&quot;&gt;0.6&lt;/span&gt;.xx.jar&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the current example we are going to use the read-only user credentials (&lt;em&gt;webclient:webclient&lt;/em&gt;).
If you want to play around with the demo data you can point your browser to &lt;a href=&quot;http://localhost:8080/mesh-ui/&quot;&gt;http://localhost:8080/mesh-ui/&lt;/a&gt; to reach the Gentics Mesh user interface and use one of the &lt;a href=&quot;http://getmesh.io/docs/beta/getting-started.html#_startup&quot;&gt;available demo credentials&lt;/a&gt; to login.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;img-responsive center-block&quot; src=&quot;https://vertx.io/assets/blog/vertx-mesh/mesh-ui.jpg&quot; title=&quot;Gentics Mesh User Interface&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-start-the-application-and-browse-the-product-catalogue&quot;&gt;4. Start - The application and browse the product catalogue&lt;/h3&gt;
&lt;p&gt;You can start the Vert.x web server by running Server.java.&lt;/p&gt;
&lt;p&gt;That’s it - now you can access the product catalogue website in your browser: &lt;a href=&quot;http://localhost:3000&quot;&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;why-vert-x-is-a-good-fit-for-gentics-mesh&quot;&gt;Why Vert.x is a good fit for Gentics Mesh&lt;/h2&gt;
&lt;p&gt;Before digging into the example, let me share a few thoughts on Vert.x and Gentics Mesh in combination. In this example Vert.x is part of the frontend stack in delivering the product catalogue website. But it might also be of interest to you that Vert.x is also used at the very heart of Gentics Mesh itself. The Gentics Mesh &lt;a href=&quot;http://getmesh.io/docs/beta/raml/&quot;&gt;REST API endpoints&lt;/a&gt; are built on top of Vert.x as a core component.&lt;/p&gt;
&lt;p&gt;The great thing about Vert.x is that there are a lot of default implementations for various tasks such as authentication, database integration, monitoring and clustering. It is possible to use one or more features and omit the rest and thus your application remains lightweight.&lt;/p&gt;
&lt;h2 id=&quot;curious-about-the-code-&quot;&gt;Curious about the code?&lt;/h2&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/gentics/mesh-vertx-example&quot;&gt;https://github.com/gentics/mesh-vertx-example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now that everything is up and running let’s have a detailed look at the code.&lt;/p&gt;
&lt;p&gt;A typical deployment unit for Vert.x is a &lt;a href=&quot;http://vertx.io/docs/vertx-core/java/#_verticles&quot;&gt;verticle&lt;/a&gt;. In our case we use the verticle to bundle our code and run the web server within it. Once deployed, Vert.x will run the verticle and start the HTTP server code.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/Jotschi/39fc0d3fcd45122eafe68d61bea4c120.js?file=main.java&quot;&gt;&lt;/script&gt;

&lt;p&gt;The &lt;a href=&quot;http://getmesh.io/docs/beta/#_java_rest_client&quot;&gt;Gentics Mesh REST client&lt;/a&gt; is used to communicate with the Gentics Mesh server. The &lt;a href=&quot;http://vertx.io/docs/vertx-web/java/&quot;&gt;Vert.x web library&lt;/a&gt; is used to set up our &lt;a href=&quot;http://vertx.io/docs/vertx-web/java/#_basic_vert_x_web_concepts&quot;&gt;HTTP Router&lt;/a&gt;. As with other routing frameworks like &lt;em&gt;Silex&lt;/em&gt; and &lt;em&gt;Express&lt;/em&gt;, the router can be used to create routes for inbound HTTP requests. In our case we only need two routes. The main route which accepts the request will utilize the &lt;a href=&quot;http://getmesh.io/docs/beta/#_webroot&quot;&gt;Gentics Mesh Webroot API Endpoint&lt;/a&gt; which is able to resolve content by a provided path. It will examine the response and add fields to the routing context.&lt;/p&gt;
&lt;p&gt;The other route is chained and will take the previously prepared routing context and render the desired template using the &lt;a href=&quot;http://vertx.io/docs/vertx-web/java/#_templates&quot;&gt;handlebars template handler&lt;/a&gt;.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/Jotschi/39fc0d3fcd45122eafe68d61bea4c120.js?file=start.java&quot;&gt;&lt;/script&gt;

&lt;p&gt;First we can handle various special requests path such as “/“ for the welcome page. Or the typical favicon.ico request. Other requests are passed to the Webroot API handler method.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/Jotschi/39fc0d3fcd45122eafe68d61bea4c120.js?file=pathHandler.java&quot;&gt;&lt;/script&gt;

&lt;p&gt;Once the path has been resolved to a &lt;em&gt;WebRootResponse&lt;/em&gt; we can examine that data and determine whether it is a binary response or a JSON response. Binary responses may occur if the requested resource represents an image or any other binary data. Resolved binary contents are directly passed through to the client and the handlebars route is not invoked.&lt;/p&gt;
&lt;p&gt;Examples&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000/&lt;/a&gt; → welcome.hbs&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://localhost:3000/Automobiles&quot;&gt;http://localhost:3000/Automobiles&lt;/a&gt; → category → productList.hbs&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://localhost:3000/Automobiles/Tesla%20Roadster&quot;&gt;http://localhost:3000/Automobiles/Tesla Roadster&lt;/a&gt; → vehicle → productDetail.hbs&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://localhost:3000/Vehicle%20Images/tesla-roadster.jpg&quot;&gt;http://localhost:3000/Vehicle Images/tesla-roadster.jpg&lt;/a&gt; → binary passthru&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JSON responses on the other hand are examined to determine the type of node which was located. A typical node response contains information about the schema used by the node. This will effectively determine the type of the located content (e.g.: category, vehicle).&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/Jotschi/39fc0d3fcd45122eafe68d61bea4c120.js?file=routeHandler.java&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive center-block&quot; src=&quot;https://vertx.io/assets/blog/vertx-mesh/mesh-schemas.jpg&quot; title=&quot;Mesh Schemas&quot;&gt;&lt;/p&gt;
&lt;p&gt;The demo application serves different pages which correspond to the identified type.
Take a look at the template sources within &lt;em&gt;src/main/resources/templates/&lt;/em&gt; if you are interested in the &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;handlebars syntax&lt;/a&gt;. 
The templates in the example should cover most common cases.   &lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;img-responsive center-block&quot; src=&quot;https://vertx.io/assets/blog/vertx-mesh/mesh-vertx-templates.jpg&quot; title=&quot;Handlebars Template Overview&quot;&gt;&lt;/p&gt;
&lt;p&gt;The Mesh REST Client library internally makes use of the &lt;a href=&quot;http://vertx.io/docs/vertx-core/java/#_creating_an_http_client&quot;&gt;Vert.x core HTTP client&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxJava&quot;&gt;RxJava&lt;/a&gt; is being used to handle these async requests. This way we can combine all asynchronously requested Gentics Mesh resources (breadcrumb, list of products) and add the loaded data into the routing context.&lt;/p&gt;
&lt;p&gt;The Vert.x example server loads JSON content from the Gentics Mesh server. The &lt;em&gt;JsonObject&lt;/em&gt; is placed in the &lt;a href=&quot;https://github.com/jknack/handlebars.java&quot;&gt;handlebars&lt;/a&gt; render context and the template can access all nested fields within.&lt;/p&gt;
&lt;p&gt;This way it is possible to resolve any field within the handlebars template.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/Jotschi/39fc0d3fcd45122eafe68d61bea4c120.js?file=template.example&quot;&gt;&lt;/script&gt;

&lt;p&gt;That’s it! Finally, we can invoke mvn clean package in order to package our webserver. The &lt;a href=&quot;https://maven.apache.org/plugins/maven-shade-plugin/&quot;&gt;maven-shade-plugin&lt;/a&gt; will bundle everything and create an executable jar.&lt;/p&gt;
&lt;h2 id=&quot;what-s-next-&quot;&gt;What’s next?&lt;/h2&gt;
&lt;p&gt;Future releases of Gentics Mesh will refine the Mesh REST Client API and provide a &lt;a href=&quot;http://graphql.org/&quot;&gt;GraphQL&lt;/a&gt; which will reduce the JSON overhead. Using GraphQL will also reduce the amount of requests which need to be issued.&lt;/p&gt;
&lt;p&gt;Thanks for reading. If you have any futher questions or feedback don’t hesitate to send me a tweet to &lt;a href=&quot;https://twitter.com/Jotschi/&quot;&gt;@Jotschi&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/genticsmesh/&quot;&gt;@genticsmesh&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 13 Mar 2017 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/data-driven-apps-made-easy-with-vert-x-3-4-0-and-headless-cms-gentics-mesh</link>
          <guid isPermaLink="true">https://vertx.io/blog/data-driven-apps-made-easy-with-vert-x-3-4-0-and-headless-cms-gentics-mesh</guid>
          <author>
            <name>jotschi</name>
            <uri>http://github.com/jotschi</uri>
          </author>
        </item>
      
        <item>
          <title>Vert.x 3.4.0 is released !</title>
          <description>
      &lt;article&gt;&lt;p&gt;Vert.x 3.4.0 has just been released with many new exciting features!&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;content&#39;&gt;Vert.x 3.4.1 has been released - the links have been updated&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Since the beginning Vert.x has provided a polyglot runtime, this version simply adds the support of two major languages
of the JVM ecosystem: Scala 2.12 and Kotlin 1.1.&lt;/p&gt;
&lt;p&gt;Some features are so important that they deserve to be taken to another level : the Vert.x Web Client focuses on usability
features for building web applications. It actually builds upon the multi purpose and scalable Http Client and inherits
all its features.&lt;/p&gt;
&lt;p&gt;Vert.x RxJava is a very popular extension, 3.4 supports the &lt;code&gt;rx.Single&lt;/code&gt; reactive type as well as &lt;code&gt;Observable&lt;/code&gt;
&lt;em&gt;reactive pull back pressure&lt;/em&gt;, combined with Vert.x Web Client, it is a very powerful combo.&lt;/p&gt;
&lt;p&gt;You can now get a stream for large result sets using JDBC client, with RxJava your stream becomes
naturally an &lt;code&gt;Observable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When it comes to IoT, Vert.x is a relevant choice thanks to its unique toolkit approach that combines
 modularity and reduced footprint, there are no doubts that the new Vert.x MQTT Server extends Vert.x capabilities
 in this field!&lt;/p&gt;
&lt;p&gt;Everyone knows Kafka, everyone loves Kafka, the new Vert.x Kafka Client gives you everything you need to use Kafka
the Vert.x way!&lt;/p&gt;
&lt;p&gt;On the microservices side, Vert.x gRPC will give a boost to your networking and Vert.x Config fills the gap
in our toolbox. In addition we provide now a full fledged Vert.x Consul client!&lt;/p&gt;
&lt;p&gt;During this release cycle, we paid special attention to security, ensuring that Vert.x-Web sessions are safe and
follow the OWASP recommendations. Also, Vert.x web got many usability improvements, with a revised OAuth2 setup and a new &lt;code&gt;htdigest&lt;/code&gt; authentication scheme.&lt;/p&gt;
&lt;p&gt;Devops hasn’t been forgotten with Vert.x Health Check, a key feature in application monitoring.&lt;/p&gt;
&lt;p&gt;On top of many bug fixes, here is a list of the most important new features you can find in 3.4.0:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vert.x Infinispan is a new cluster option and supersedes the JGroups option&lt;/li&gt;
&lt;li&gt;HTTP and Web client redirect handling&lt;/li&gt;
&lt;li&gt;Zero-config service proxies generation with a &lt;code&gt;processor&lt;/code&gt; classified jar&lt;/li&gt;
&lt;li&gt;a new &lt;code&gt;SelfSignedCertificate&lt;/code&gt; to make easy to create tests and demos with TLS/SSL&lt;/li&gt;
&lt;li&gt;Hystrix metrics in the circuit breaker&lt;/li&gt;
&lt;li&gt;Handlebars templates can now fully resolve properties passed to them&lt;/li&gt;
&lt;li&gt;JsonObject POJO mapping convenience&lt;/li&gt;
&lt;li&gt;Http compression level option&lt;/li&gt;
&lt;li&gt;Groovy support now uses extension methods and does not generate wrappers anymore&lt;/li&gt;
&lt;li&gt;Dropwizard match metrics can now have an alias&lt;/li&gt;
&lt;li&gt;RxHelper method for adapting an &lt;code&gt;Observable&lt;T&gt;&lt;/code&gt; to a &lt;code&gt;ReadStream&lt;T&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;RxHelper method for adpating a &lt;code&gt;Handler&lt;AsyncResult&lt;T&gt;&gt;&lt;/code&gt; to a &lt;code&gt;Subscriber&lt;T&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;provide Alpine and Busybox docker images&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vert.x 3.4.0 release notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.4.1---Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.4.1---Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.4.1%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.4.1/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Tue, 07 Mar 2017 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/vert-x-3-4-0-is-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/vert-x-3-4-0-is-released</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Vert.x 3.4.0.Beta1 release</title>
          <description>
      &lt;article&gt;&lt;h2 id=&quot;tl-dr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;we have released 3.4.0.Beta1, this release is the biggest since Vert.x 3.0.0 with plenty of great features.&lt;/p&gt;
&lt;p&gt;You can use consume it in your projects from Maven or Gradle as usual with the version &lt;code&gt;3.4.0.Beta1&lt;/code&gt; or read&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;a href=&quot;http://vertx.io/docs/3.4.0.Beta1/&quot;&gt;documentation preview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the &lt;a href=&quot;https://gist.github.com/vietj/1ce63b368af127775512afbfc0ab14cc&quot;&gt;release notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;see the &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/3.4.0-SNAPSHOT&quot;&gt;actual examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me outline the important changes you can already find in this Beta1.&lt;/p&gt;
&lt;h2 id=&quot;vert-x-web-client&quot;&gt;Vert.x Web Client&lt;/h2&gt;
&lt;p&gt;In a simple sentence “Vert.x Web Client is to Vert.x HttpClient what Vert.x Web is to HttpServer”&lt;/p&gt;
&lt;p&gt;The Web Client makes it easy to do HTTP request/response interactions with a web server, and provides advanced features like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Json body encoding / decoding&lt;/li&gt;
&lt;li&gt;request/response pumping&lt;/li&gt;
&lt;li&gt;request parameters&lt;/li&gt;
&lt;li&gt;unified error handling&lt;/li&gt;
&lt;li&gt;form submissions&lt;/li&gt;
&lt;li&gt;and more!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Built on top of HttpClient, it naturally inherits its features and provides a better API, let me give an overview in one example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;WebClient&lt;/span&gt; client = &lt;span class=&quot;hljs-type&quot;&gt;WebClient&lt;/span&gt;.
client
  .get(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;myserver.mycompany.com&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/some-uri&quot;&lt;/span&gt;)
  .&lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;BodyCodec&lt;/span&gt;.json(&lt;span class=&quot;hljs-type&quot;&gt;User&lt;/span&gt;.class))
  .send(ar -&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {

      &lt;span class=&quot;hljs-type&quot;&gt;HttpResponse&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;User&lt;/span&gt;&gt; response = ar.&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;();
      &lt;span class=&quot;hljs-type&quot;&gt;User&lt;/span&gt; user = response.body();

      &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Received response with status code&quot;&lt;/span&gt; + response.statusCode() + &lt;span class=&quot;hljs-string&quot;&gt;&quot; with body &quot;&lt;/span&gt; +
        user.getFirstName() + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + user.getLastName());
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Something went wrong &quot;&lt;/span&gt; + ar.cause().getMessage());
    }
  });&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;rxjava-singles&quot;&gt;RxJava singles&lt;/h2&gt;
&lt;p&gt;RxJava is a very popular Java extension and in this release we focused on the API usability with the support
of the &lt;code&gt;Single&lt;/code&gt; RxJava type.&lt;/p&gt;
&lt;p&gt;The new methods are prefixed by &lt;code&gt;rx&lt;/code&gt; and deprecates the &lt;code&gt;Observable&lt;/code&gt; suffixed methods.&lt;/p&gt;
&lt;p&gt;So instead of starting a server with &lt;code&gt;listenObservable&lt;/code&gt; now you use &lt;code&gt;rxListen&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;HttpServer &lt;span class=&quot;hljs-built_in&quot;&gt;server&lt;/span&gt; = vertx.createHttpServer();
Single&lt;HttpServer&gt; single = &lt;span class=&quot;hljs-built_in&quot;&gt;server&lt;/span&gt;.rxListen(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;);
single.subscribe(
  ok -&gt; System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Server started&quot;&lt;/span&gt;),
  &lt;span class=&quot;hljs-built_in&quot;&gt;err&lt;/span&gt; -&gt; System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Something went wrong &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;err&lt;/span&gt;.getMessage()));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One noticeable difference with the previous API, is that the &lt;code&gt;listen&lt;/code&gt; method is called when the &lt;code&gt;Single&lt;/code&gt; is subscribed.&lt;/p&gt;
&lt;p&gt;This is very handy when combined with the new web client:&lt;/p&gt;
 &lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-prompt&quot;&gt;Single&lt;HttpResponse&lt;Buffer&gt;&gt;&lt;/span&gt; single = client
   .get(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;myserver.mycompany.com&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/some-uri&quot;&lt;/span&gt;)
   .rxSend();

&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;hljs-constant&quot;&gt;Send&lt;/span&gt; the request
&lt;span class=&quot;hljs-prompt&quot;&gt;single.subscribe(response -&gt;&lt;/span&gt; &lt;span class=&quot;hljs-constant&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;got response &quot;&lt;/span&gt; + response.statusCode());

&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;hljs-constant&quot;&gt;Send&lt;/span&gt; the request again
&lt;span class=&quot;hljs-prompt&quot;&gt;single.subscribe(response -&gt;&lt;/span&gt; &lt;span class=&quot;hljs-constant&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;got response &quot;&lt;/span&gt; + response.statusCode());&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;polyglot&quot;&gt;Polyglot&lt;/h2&gt;
&lt;p&gt;In this beta you can try &lt;em&gt;Vert.x for Kotlin&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Vert.x for Kotlin&lt;/em&gt; is based on the Java API and provides also the execution of Kotlin Verticles.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.core.*&lt;/span&gt;
&lt;span class=&quot;hljs-preprocessor&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.kotlin.core.http.HttpServerOptions&lt;/span&gt;

&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Server&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;AbstractVerticle&lt;/span&gt;() {&lt;/span&gt;

  override fun start() {
    vertx.createHttpServer(

        // We provide Kotlin extension methods, allowing &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; use an idiomatic Kotlin API &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; building these options
        HttpServerOptions(
            port = &lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;,
            host = &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;
        ))
        .requestHandler() { req -&gt;
          req.response().&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello from Kotlin&quot;&lt;/span&gt;)
        }
        .listen()
    println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Server started on 8080&quot;&lt;/span&gt;)
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It can be directly ran from the command line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;julien:vertx-kotlin-example julien$ vertx &lt;span class=&quot;hljs-command&quot;&gt;run&lt;/span&gt; Server.kt
Server started &lt;span class=&quot;hljs-function_start&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;
Succeeded &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; deploying verticle&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, Kotlin is using the Java API directly, and we thought that it might be a cool thing to do the
same with Groovy support. So we have reconsidered our Groovy support and now it uses the plain Java API,
without losing the existing features.&lt;/p&gt;
&lt;p&gt;Thanks to Groovy extension methods, idiomatic Groovy is still supported while benefiting from the full Java API!&lt;/p&gt;
&lt;p&gt;Scala support is also planned for 3.4.0 and will be released soon, watch &lt;a href=&quot;https://twitter.com/vertx_project&quot;&gt;@vertx_project&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;the-microservices-story-goes-on-&quot;&gt;The microservices story goes on…&lt;/h2&gt;
&lt;p&gt;Our APIs have matured and now they have been moved out of tech preview, of course this wasn’t enough and we now
have &lt;em&gt;Vert.x Config&lt;/em&gt;, an extensible way to configure Vert.x applications supporting File, json, ENV, system properties,
HTTP, &lt;em&gt;Kubernetes Configmap&lt;/em&gt;, &lt;em&gt;Consul&lt;/em&gt;, &lt;em&gt;Spring Config Server&lt;/em&gt;, &lt;em&gt;Redis&lt;/em&gt;, &lt;em&gt;Git&lt;/em&gt;, &lt;em&gt;Zookeeper&lt;/em&gt;, … stores as well as
several formats: properties file, YAML and Hocon.&lt;/p&gt;
&lt;p&gt;Here is a small example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;ConfigStoreOptions httpStore = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ConfigStoreOptions()
  .setType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http&quot;&lt;/span&gt;)
  .setConfig(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject()
    .&lt;span class=&quot;hljs-keyword&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;host&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;port&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;path&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/conf&quot;&lt;/span&gt;));

ConfigStoreOptions fileStore = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ConfigStoreOptions()
  .setType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt;)
  .setConfig(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject().&lt;span class=&quot;hljs-keyword&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;path&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;my-config.json&quot;&lt;/span&gt;));

ConfigStoreOptions sysPropsStore = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ConfigStoreOptions().setType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sys&quot;&lt;/span&gt;);

ConfigRetrieverOptions &lt;span class=&quot;hljs-keyword&quot;&gt;options&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ConfigRetrieverOptions()
  .addStore(httpStore).addStore(fileStore).addStore(sysPropsStore);

ConfigRetriever retriever = ConfigRetriever.create(vertx, &lt;span class=&quot;hljs-keyword&quot;&gt;options&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vert.x Config also supports push based notification style:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;ConfigRetriever retriever &lt;span class=&quot;hljs-subst&quot;&gt;=&lt;/span&gt; ConfigRetriever&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;create(Vertx&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;vertx(), options);
retriever&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;configStream()
  &lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;endHandler(v &lt;span class=&quot;hljs-subst&quot;&gt;-&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-comment&quot;&gt;// retriever closed&lt;/span&gt;
  })
  &lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;exceptionHandler(t &lt;span class=&quot;hljs-subst&quot;&gt;-&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-comment&quot;&gt;// an error has been caught while retrieving the configuration&lt;/span&gt;
  })
  &lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;handler(conf &lt;span class=&quot;hljs-subst&quot;&gt;-&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-comment&quot;&gt;// the configuration&lt;/span&gt;
  });&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;vertx-mqtt-server&quot;&gt;Vertx MQTT Server&lt;/h2&gt;
&lt;p&gt;Vert.x MQTT Server is able to handle connections, communication and messages exchange with remote MQTT clients.
Its API provides a bunch of events related to protocol messages received by clients and exposes allow to send
messages to them.&lt;/p&gt;
&lt;p&gt;Here is a small effective example of creating, the Vert.x way!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;MqttServerOptions &lt;span class=&quot;hljs-keyword&quot;&gt;options&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MqttServerOptions()
  .setPort(&lt;span class=&quot;hljs-number&quot;&gt;1883&lt;/span&gt;)
  .setHost(&lt;span class=&quot;hljs-string&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;);

MqttServer server = MqttServer.create(vertx, &lt;span class=&quot;hljs-keyword&quot;&gt;options&lt;/span&gt;);

server.endpointHandler(endpoint -&gt; {

  System.out.&lt;span class=&quot;hljs-keyword&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;connected client &quot;&lt;/span&gt; + endpoint.clientIdentifier());

  endpoint.publishHandler(message -&gt; {

    System.out.&lt;span class=&quot;hljs-keyword&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Just received message on [&quot;&lt;/span&gt; + message.topicName() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;] payload [&quot;&lt;/span&gt; +
      message.payload() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;] with QoS [&quot;&lt;/span&gt; +
      message.qosLevel() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;);
  });

  endpoint.accept(&lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;);
});

server.listen(ar -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    System.out.&lt;span class=&quot;hljs-keyword&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MQTT server started and listening on port &quot;&lt;/span&gt; + server.actualPort());
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    System.err.&lt;span class=&quot;hljs-keyword&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MQTT server error on start&quot;&lt;/span&gt; + ar.cause().getMessage());
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;vert-x-sql-streaming&quot;&gt;Vert.x SQL streaming&lt;/h2&gt;
&lt;p&gt;We now support streaming style for SQL queries:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;connection.queryStream(&lt;span class=&quot;hljs-string&quot;&gt;&quot;select * from test&quot;&lt;/span&gt;, stream -&gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (stream.succeeded()) {
    &lt;span class=&quot;hljs-type&quot;&gt;SQLRowStream&lt;/span&gt; sqlRowStream = stream.&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;();

    sqlRowStream
      .handler(row -&gt; {
        // &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; something &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; the row...
        &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(row.encode());
      })
      .endHandler(v -&gt; {
        // no more data available, close the connection
        connection.close(done -&gt; {
          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (done.failed()) {
            throw new &lt;span class=&quot;hljs-type&quot;&gt;RuntimeException&lt;/span&gt;(done.cause());
          }
        });
      });
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And with the RxJava API:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;client
  .rxGetConnection() // &lt;span class=&quot;hljs-type&quot;&gt;Connect&lt;/span&gt; to the database
  .flatMapObservable(conn -&gt; { // &lt;span class=&quot;hljs-type&quot;&gt;With&lt;/span&gt; the connection...
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; conn.rxUpdate(&lt;span class=&quot;hljs-string&quot;&gt;&quot;CREATE TABLE test(col VARCHAR(20))&quot;&lt;/span&gt;) // ...create test table
      .flatMap(&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; -&gt; conn.rxUpdate(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO test (col) VALUES (&#39;val1&#39;)&quot;&lt;/span&gt;)) // ...insert a row
      .flatMap(&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; -&gt; conn.rxUpdate(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO test (col) VALUES (&#39;val2&#39;)&quot;&lt;/span&gt;)) // ...another one
      .flatMap(&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; -&gt; conn.rxQueryStream(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM test&quot;&lt;/span&gt;)) // ...get values stream
      .flatMapObservable(sqlRowStream -&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sqlRowStream.toObservable() // &lt;span class=&quot;hljs-type&quot;&gt;Transform&lt;/span&gt; the stream into an &lt;span class=&quot;hljs-type&quot;&gt;Observable&lt;/span&gt;...
          .doOnTerminate(conn::close); // ...&lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; close the connection &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; the stream &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; fully read &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; an error occurs
      });
  }).subscribe(row -&gt; &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Row : &quot;&lt;/span&gt; + row.encode()));&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;finally&quot;&gt;Finally&lt;/h2&gt;
&lt;p&gt;In addition to all these brillant features here is a list of more-than-noticeable things you have in this Beta1:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vert.x Infinispan replaces Vert.x Jgroups cluster manager&lt;/li&gt;
&lt;li&gt;Vert.x Consul Client provides a full fledged client for Consul&lt;/li&gt;
&lt;li&gt;Oauth2 predefined configuration with 16 settings from &lt;em&gt;Azure Active Directory&lt;/em&gt;, to &lt;em&gt;Twitter&lt;/em&gt; with the usual suspects (&lt;em&gt;Facebook&lt;/em&gt;, &lt;em&gt;LinkedIn&lt;/em&gt;, …)&lt;/li&gt;
&lt;li&gt;Http client now follow redirects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can use and consume it in your projects from Maven or Gradle as usual with the version &lt;code&gt;3.4.0.Beta1&lt;/code&gt; or read&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;a href=&quot;http://vertx.io/docs/3.4.0.Beta1/&quot;&gt;documentation preview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the &lt;a href=&quot;https://gist.github.com/vietj/1ce63b368af127775512afbfc0ab14cc&quot;&gt;release notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;see the &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/3.4.0-SNAPSHOT&quot;&gt;actual examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Last but not least, I want to personally thank all the people that contributed to this release, beyond the Vert.x core team, the actual
 Vert.x committers and many other people who have given a lot of effort to this upcoming 3.4.0!!!!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Thu, 09 Feb 2017 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/vert-x-3-4-0-beta1-release</link>
          <guid isPermaLink="true">https://vertx.io/blog/vert-x-3-4-0-beta1-release</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>An Introduction to the Vert.x Context Object</title>
          <description>
      &lt;article&gt;&lt;p&gt;Under the hood, the vert.x Context class plays a critical part in maintaining the thread-safety guarantees of verticles. Most of the time, vert.x coders don’t need to make use of Context objects directly. However, sometimes you may need to. This article provides a brief introduction to the vert.x Context class, which covers why it’s important, and why and when you might wish to make use of the Context directly, based on the author’s experience of building a generic async library which can be used with vert.x.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;content&#39;&gt;this is a re-publication of the following &lt;a href=&quot;http://www.millross-consultants.com/vertx_context_object.html&quot;&gt;blog post&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-context-object-in-vert-x-a-brief-introduction&quot;&gt;The Context object in Vert.x - a brief introduction&lt;/h2&gt;
&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Recently I’ve been looking at the possibility of building an asynchronous version of the &lt;a href=&quot;http://www.pac4j.org&quot;&gt;pac4j&lt;/a&gt; library, with a view to then migrating the &lt;a href=&quot;https://github.com/pac4j/vertx-pac4j&quot;&gt;vertx-pac4j&lt;/a&gt; implementation to use the asynchronous version of pac4j by default.&lt;/p&gt;
&lt;p&gt;I’m keen (for obvious reasons) that the async version of pac4j is not tightly coupled to  one particular asynchronous/non-blocking framework, I decided to expose the API via the &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html&quot;&gt;CompletableFuture&lt;/a&gt; class, using this to wrap values which will be determined in the future. However, I opted to use the &lt;a href=&quot;http://vertx.io&quot;&gt;vert.x&lt;/a&gt; framework for my asynchronous testing as a way of testing the API as it emerged. This in turn has led me to learn some aspects of the vert.x &lt;a href=&quot;http://vertx.io/docs/apidocs/io/vertx/core/Context.html&quot;&gt;Context&lt;/a&gt; class which I didn’t really understand before.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;content&#39;&gt;The information presented relates to Vert.x version 3.3.3. It is conceivable that later versions of vert.x could render aspects of this article incorrect.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3 id=&quot;introduction-to-the-context-class&quot;&gt;Introduction to the Context class&lt;/h3&gt;
&lt;p&gt;Whenever a vert.x &lt;a href=&quot;http://vertx.io/docs/apidocs/io/vertx/core/Handler.html&quot;&gt;Handler&lt;/a&gt; is executed, or the start or step method of a verticle is called, then that execution is associated with a specific context. Generally a context is an event-loop context and is therefore associated with an event loop thread (exceptions are covered in the Further Reading referenced below). Contexts are propagated. When a handler is set by code running on a specific context, then that handler will also be executed on the same context. This means for example, that if the start method of a verticle instance sets a number of event bus handlers (as many do), then they will all run on the same context as the start method for that verticle (so all handlers for that verticle instance will share a common context). &lt;/p&gt;
&lt;p&gt;A schematic of the relationships between non-worker verticles, contexts and eventloop threads is shown in Figure 1. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blog/vertx3-intro-to-context-object/VertxContextRelationships.png&quot; alt=&quot;Vertx Context/Thread/Verticle Relationships&quot;&gt;&lt;/p&gt;
&lt;p&gt;Note that each verticle effectively has only one context for handlers created by its start method, and each context is bound to a single event-loop thread. A given event-loop thread can, however, have multiple contexts bound to it. &lt;/p&gt;
&lt;h3 id=&quot;when-are-contexts-not-propagated-&quot;&gt;When are contexts not propagated?&lt;/h3&gt;
&lt;p&gt;When a verticle’s start method is called, a new context is created. If 4 identical verticles are deployed via the instances parameter on DeploymentOptions, the start method of each will be on a new context. This is logical as we may not want all non-worker verticles to be bound to a single eventloop thread when multiple eventloop threads are available. &lt;/p&gt;
&lt;h3 id=&quot;threading-guarantees&quot;&gt;Threading Guarantees&lt;/h3&gt;
&lt;p&gt;There are certain consequences of the propagation of contexts to handlers as mentioned above. The most important one is that since all handlers in a given eventloop verticle run on the same context (the one on which its start method ran), they all run on the same eventloop thread. This gives rise to the threading guarantee within vert.x, that as long as a given verticle is the only one to ever access a piece of state, then that state is being accessed by only one thread, so no synchronization will be necessary. &lt;/p&gt;
&lt;h3 id=&quot;exception-handling&quot;&gt;Exception Handling&lt;/h3&gt;
&lt;p&gt;Each context can have its own exception handler attached for handling exceptions which occur during event loop processing.&lt;/p&gt;
&lt;h4 id=&quot;why-might-you-not-want-the-default-exception-handler-&quot;&gt;Why might you not want the default exception handler?&lt;/h4&gt;
&lt;p&gt;As one example, you might have some verticles running whose job it is to monitor other verticles, and if something appears to go wrong with them, undeploy and restart them, a frequent pattern in an actor- or microservices- style archictecture. So one option could be that when a supervised verticle encounters an unrecoverable error, it could simply notify its supervisor that it has gone wrong via an eventbus message, and its supervisor could then undeploy and redeploy (and after a number of failures in rapid succession possibly give up hope or escalate to its own supervisor.&lt;/p&gt;
&lt;h3 id=&quot;going-off-context-and-getting-back-onto-a-particular-context&quot;&gt;Going off-context and getting back onto a particular context&lt;/h3&gt;
&lt;p&gt;There are several reasons why you might execute code off-context and then want to operate back on a vert.x context when complete. I’ll outline a couple of scenarios below&lt;/p&gt;
&lt;h4 id=&quot;running-code-on-a-separate-thread&quot;&gt;Running code on a separate thread&lt;/h4&gt;
&lt;p&gt;Firstly you might be using an asynchronous driver which is entirely vertx-unaware. Its code will run on non-eventloop threads but it’s possible you may then want to use the results of that code to update information within your verticle. If you don’t get back onto the correct context, you can’t make any guarantees about thread-safety, so your subsequent processing needs to be run back on the correct eventloop thread.&lt;/p&gt;
&lt;h4 id=&quot;using-asynchronous-java-8-apis&quot;&gt;Using asynchronous Java 8 APIs&lt;/h4&gt;
&lt;p&gt;APIs such as CompletableFuture are context-unaware. In one example, I created an already completed future on the vert.x event loop in a test. I then attached subsequent processing to it via thenRun:-&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@RunWith&lt;/span&gt;(VertxUnitRunner.class)
&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ImmediateCompletionTest&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-annotation&quot;&gt;@Rule&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; RunTestOnContext rule = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; RunTestOnContext();

    &lt;span class=&quot;hljs-annotation&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;testImmediateCompletion&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(TestContext context)&lt;/span&gt; &lt;/span&gt;{

        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Async async = context.async();
        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Vertx vertx = rule.vertx();
        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; CompletableFuture&lt;Integer&gt; toComplete = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; CompletableFuture&lt;&gt;();
        &lt;span class=&quot;hljs-comment&quot;&gt;// delay future completion by 500 ms&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String threadName = Thread.currentThread().getName();
        toComplete.complete(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;);
        toComplete.thenRun(() -&gt; {
            assertThat(Thread.currentThread().getName(), is(threadName));
            async.complete();
        });
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  Naively one might expect this to automatically run on the context, since it hasn’t left the eventloop thread on which the future was completed, and indeed it’s provable that it is on the correct thread. However, it will not be on the correct context. This would mean that it wouldn’t, for example, invoke any modified exception handler attached to the context.&lt;/p&gt;
&lt;h4 id=&quot;getting-back-on-context&quot;&gt;Getting back on context&lt;/h4&gt;
&lt;p&gt;Fortunately, once we’ve left the context, it’s quite straightforward to return to it. Prior to definition of the code block within thenRun, we can use Vertx.currentContext() or vertx.getOrCreateContext() to get a handle to the context on which our eventloop code is running, We can then execute the code block inside a call to Context::runOnContext, similar to&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Context currentContext = vertx.getOrCreateContext();
toComplete.thenRun(() -&gt; {
        currentContext.runOnContext(v -&gt; {
        assertThat(Thread.currentThread().getName(), is(threadName));
        async.complete();
    }
});&lt;/code&gt;&lt;/pre&gt;
While getting back onto the correct context may not be critical if you have remained on the event loop thread throughout, it is critical if you are going to invoke subsequent vert.x handlers, update verticle state or anything similar, so it’s a sensible general approach.&lt;/p&gt;
&lt;h3 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h3&gt;
&lt;p&gt;The vert.x team themselves offer an excellent blog about the Vert.x eventloop, with excellent material on the context, on &lt;a href=&quot;https://github.com/vietj/vertx-materials/blob/master/src/main/asciidoc/Demystifying_the_event_loop.adoc&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;thanks&quot;&gt;Thanks&lt;/h3&gt;
&lt;p&gt;Thanks very much to the vert.x core team for their clear github pages on the eventloop, and also to &lt;a href=&quot;https://twitter.com/alexlehm?lang=en&quot;&gt;Alexander Lehmann&lt;/a&gt; for his answers to my stupid and naive questions on the &lt;a href=&quot;https://groups.google.com/forum/#!forum/vertx&quot;&gt;Vert.x google group&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Tue, 31 Jan 2017 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/an-introduction-to-the-vert-x-context-object</link>
          <guid isPermaLink="true">https://vertx.io/blog/an-introduction-to-the-vert-x-context-object</guid>
          <author>
            <name>millross</name>
            <uri>http://github.com/millross</uri>
          </author>
        </item>
      
        <item>
          <title>Building services and APIs with AMQP 1.0</title>
          <description>
      &lt;article&gt;&lt;p&gt;Microservices and APIs are everywhere. Everyone talks about them, presentation slides are full of them … some people are actually even building them. Microservices and APIs are of course not completely new concepts and they are a bit over-hyped. But in general the ideas behind them are not bad. Unfortunately, many people seem to believe that the only way how to implement an API in microservice is to use HTTP and REST. That is of course not true. Microservices and APIs can be based on many different protocols and technologies. My favorite one is of course &lt;a href=&quot;http://www.amqp.org&quot;&gt;AMQP&lt;/a&gt;. Don’t take me wrong, HTTP and REST is not necessarily bad. But in some cases AMQP is simply better and creating AMQP based APIs does not need to be complicated.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;content&#39;&gt;this is a re-publication of the following &lt;a href=&quot;http://blog.effectivemessaging.com/2017/01/building-services-and-apis-with-amqp-10.html&quot;&gt;blog post&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&quot;livescore-service&quot;&gt;LiveScore service&lt;/h2&gt;
&lt;p&gt;For demonstration, I will use a very simple service for keeping scores of football games. It has very basic API. It has only three calls:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a new game&lt;/li&gt;
&lt;li&gt;Update a score of existing game&lt;/li&gt;
&lt;li&gt;List the scores
The AMQP variants will be additionally able to push live updates to the clients.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The demo is using Java and Vert.x toolkit. &lt;a href=&quot;http://vertx.io/&quot;&gt;Vert.x&lt;/a&gt; is cool and I definitely recommend it to everyone. But most of the stuff from the demo should be possible also in any other programming languages and/or framework.&lt;/p&gt;
&lt;h2 id=&quot;http-api&quot;&gt;HTTP API&lt;/h2&gt;
&lt;p&gt;HTTP implementation of my service is a typical REST API. Since it is very simple, it accepts requests only on one endpoint – /api/v1.0/scores. New games are added as POST operations, scores are updated with PUT operations and list of all scores can be obtained with GET.&lt;/p&gt;
&lt;p&gt;With Vert.x, creating HTTP/REST API is very easy. First the web router has to be created with all planned API calls:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;router = Router.router(vertx);  
router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/v1.0/*&quot;&lt;/span&gt;).handler(BodyHandler.create());  
router.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/v1.0/scores&quot;&lt;/span&gt;).handler(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;::getScores);  
router.post(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/v1.0/scores&quot;&lt;/span&gt;).handler(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;::addGame);  
router.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/v1.0/scores&quot;&lt;/span&gt;).handler(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;::setScore);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the HTTP server has to be created and linked with the router:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;HttpServerOptions httpOptions = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HttpServerOptions();  
server = vertx.createHttpServer(httpOptions)  
   .requestHandler(router::accept)  
   .listen(httpPort);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally the handlers which will be triggered for each API call have to be implemented as well. The full code is on &lt;a href=&quot;https://github.com/scholzj/livescore-demo-vertx-http&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blog/services-and-apis-with-amqp/HTTP-API.png&quot; alt=&quot;HTTP based API&quot;&gt;&lt;/p&gt;
&lt;p&gt;The HTTP API doesn’t provide any way how to automatically push the score updates to the clients. The clients simply have to poll the service periodically to get the updates. HTTP has of course some ways how to push live updates to clients. For example, with WebSockets or with chunked transfers. However, these are not that easy to implement. The service would also need to keep separate connection with every client and push the updates for each of them separately.&lt;/p&gt;
&lt;h2 id=&quot;amqp-api&quot;&gt;AMQP API&lt;/h2&gt;
&lt;p&gt;Creating the HTTP API was really easy. Creating an AMQP API has to be more complicated, right? We would need an AMQP server, which will listen on some port, accept the connections, sessions, links and so on. There are usually no nice and simple to use libraries for this.&lt;/p&gt;
&lt;p&gt;Sure, this is one way how to do it. There is actually a nice library called &lt;a href=&quot;http://qpid.apache.org/proton/index.html&quot;&gt;Apache Qpid Proton&lt;/a&gt;. It has Java and C versions and bindings into many other languages (Go, C++, Python, …). It makes creating your own AMQP server lot easier. It will take care of decoding and encoding the AMQP protocol, handling the connections, sessions etc. But still, Qpid Proton is not even nearly as easy to use as the HTTP router used for the HTTP API.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blog/services-and-apis-with-amqp/AMQP-Server-API.png&quot; alt=&quot;API with AMQP server&quot;&gt;&lt;/p&gt;
&lt;p&gt;Are there any easier options? What if all what is needed to create AMQP based API is a simple AMQP client? Normally, that should not be a possible because we need the API to listen on some port for the clients to connect to it and send requests. And clients usually don’t listen on any ports. However, Apache Qpid has something called &lt;a href=&quot;http://qpid.apache.org/components/dispatch-router/index.html&quot;&gt;Dispatch&lt;/a&gt;. It works as a lightweight AMQP router. Dispatch will serve as the AMQP server which was missing. It will take care of handling client connections, security and shield the service from the actual clients. All the service needs to do is to use AMQP client to connect to Dispatch on predefined address and wait for the request.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blog/services-and-apis-with-amqp/AMQP-API.png&quot; alt=&quot;AMQP API with Dispatch router&quot;&gt;&lt;/p&gt;
&lt;p&gt;Dispatch needs to be configured with three API entry points as addresses:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;hljs-rules&quot;&gt;{  
    &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;prefix&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt; /setScore  
    distribution: balanced  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;}  
&lt;span class=&quot;hljs-tag&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;hljs-rules&quot;&gt;{  
    &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;prefix&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt; /getScore  
    distribution: balanced  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;}  
&lt;span class=&quot;hljs-tag&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;hljs-rules&quot;&gt;{  
    &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;prefix&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt; /addGame  
    distribution: balanced  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;LiveScore service will connect to these addresses as a receiver / consumer. Clients will connect to them as senders  /producers. And Dispatch will take care of routing the messages between the clients and the service. Clients can also create additional receivers so that the service is able to respond to their requests and specify the address of the receiver as the reply-to header in the request message. LiveScore service will automatically send the response to this address. But specifying a reply-to is not mandatory. If the client wants, it can simply fire the request and forget about the response.&lt;/p&gt;
&lt;p&gt;LiveScore service is using Vert.x AMQP Bridge which allows easy integration between the Vert.x Event Bus and the AMQP connection to my router. The service starts the AMQP Bridge and if it successfully connects to Dispatch it creates three receivers for the API calls.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;AmqpBridgeOptions options = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; AmqpBridgeOptions().addEnabledSaslMechanism(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ANONYMOUS&quot;&lt;/span&gt;);  
bridge = AmqpBridge.create(vertx, options);  
bridge.start(amqpHostname, amqpPort, res -&gt; {  
   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (res.succeeded())  
   {  
     bridge.createConsumer(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/setScore&quot;&lt;/span&gt;).setMaxBufferedMessages(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;).handler(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;::setScore);  
     bridge.createConsumer(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/getScores&quot;&lt;/span&gt;).setMaxBufferedMessages(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;).handler(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;::getScores);  
     bridge.createConsumer(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/addGame&quot;&lt;/span&gt;).setMaxBufferedMessages(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;).handler(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;::addGame);  
     fut.complete();  
   }  
   &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;  
   {  
     fut.fail(res.cause());  
   }  
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only other thing which needs to be done is creating handlers for handling the requests received from clients:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getScores&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Message&lt;Object&gt; msg)&lt;/span&gt;  
&lt;/span&gt;{  
   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(msg.replyAddress() != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;)  
   {  
     JsonObject response = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject();  
     response.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;application_properties&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject().put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;status&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;));  
     response.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;body&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonArray(Json.encode(scoreService.getScores())).encode());  
     msg.reply(response);  
   }  
   &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;  
   {  
     LOG.warn(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Received LiveScore/getScores request without reply to address&quot;&lt;/span&gt;);  
   }  
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Live broadcasting of score updates is also very easy. New address has to be added into Dispatch configuration. This address will be used in opposite direction. the service connects to it as sender / producer and clients which want to receive the live updates create a receiver against this address. What is important, this address has to be marked as multicast. Thanks to that every single message will be delivered to all connected clients and not just to one of them:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;hljs-rules&quot;&gt;{  
    &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;prefix&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt; /liveScores  
    distribution: multicast  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/services-and-apis-with-amqp/AMQP-API-multicast.png&quot; alt=&quot;Multicasting messages&quot;&gt;&lt;/p&gt;
&lt;p&gt;Thanks to the multicast distribution, the service doesn’t need to send a separate update to every single client. It sends the message only once and dispatch takes care of the rest.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;broadcastUpdates&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Game game)&lt;/span&gt;  
&lt;/span&gt;{  
   LOG.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Broadcasting game update &quot;&lt;/span&gt; + game);  
   JsonObject message = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject();  
   message.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;body&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject(Json.encode(game)).encode());  
   producer.send(message);  
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, the complete source codes of the demo service are available on &lt;a href=&quot;https://github.com/scholzj/livescore-demo-vertx-amqp-bridge&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;how-to-structure-amqp-apis-&quot;&gt;How to structure AMQP APIs?&lt;/h2&gt;
&lt;p&gt;Compared to HTTP and REST, AMQP gives its users a lot more freedom when designing the API. It isn’t tied up by the available HTTP methods.&lt;/p&gt;
&lt;p&gt;My LiveScore service is using the API endpoints named according to their function:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/LiveScore/addGame&lt;/li&gt;
&lt;li&gt;/LiveScore/setScore&lt;/li&gt;
&lt;li&gt;/LiveScore/getScores
It also uses HTTP status codes in application properties of the different messages to describe the result of the request and JSON as the message payload with the actual request and response.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Is that the best way? To be honest, I don’t know. Just for the request encoding there are many different options. AMQP has its own encodings which supports all possible basic as well as more advanced data types and structures. But AMQP can also transfer any opaque data - be it JSON, XML, Google Protocol Buffers or anything else. For simple request, the payload can be completely skipped and application properties can be used instead. And for everyone who really loves HTTP/REST, one can also model the API in REST style as I did in an &lt;a href=&quot;https://github.com/scholzj/livescore-demo-vertx-amqp-bridge-rest-style&quot;&gt;alternative implementation&lt;/a&gt; of my demo service.&lt;/p&gt;
&lt;h2 id=&quot;browser&quot;&gt;Browser&lt;/h2&gt;
&lt;p&gt;One of the environments where HTTP is so to say “at home” is browser. AMQP will probably never be as “native” protocol for any browser as HTTP is. However AMQP can be used even from browsers. It has WebSocket binding and there are Javascript AMQP libraries - for example rhea. So AMQP can be also used really everywhere.&lt;/p&gt;
&lt;h2 id=&quot;decoupling&quot;&gt;Decoupling&lt;/h2&gt;
&lt;p&gt;It is important to mention that the Dispatch router doesn’t decouple the client from the service. If decoupling is what is needed, it can be easily achieved by replacing the Dispatch router with some AMQP broker. The broker would decouple the client from the service without any changes in the service or clients.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;While creating APIs using AMQP can be very easy, it doesn’t mean that AMQP is the best protocol for all APIs. There are definitely APIs where HTTP is more suitable. But in some use cases, AMQP has clear advantages. In my LiveScore example it is especially one to many communication. It is important to keep the mind open and select the best available for given service.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Wed, 25 Jan 2017 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/building-services-and-apis-with-amqp-1-0</link>
          <guid isPermaLink="true">https://vertx.io/blog/building-services-and-apis-with-amqp-1-0</guid>
          <author>
            <name>scholzj</name>
            <uri>http://github.com/scholzj</uri>
          </author>
        </item>
      
        <item>
          <title>Internet of Things - Reactive and Asynchronous with Vert.x</title>
          <description>
      &lt;article&gt;&lt;p&gt;&lt;img src=&quot;/assets/blog/vertx-iot/vertx-iot.png&quot; alt=&quot;Vert.x IoT&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;content&#39;&gt;this is a re-publication of the following &lt;a href=&quot;https://paolopatierno.wordpress.com/2016/12/27/internet-of-things-reactive-and-asynchronous-with-vert-x/&quot;&gt;blog post&lt;/a&gt;.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;I have to admit … before joining Red Hat I didn’t know about the &lt;a href=&quot;http://vertx.io/&quot;&gt;&lt;em&gt;Eclipse Vert.x&lt;/em&gt;&lt;/a&gt; project but it took me few days to fall in love with it !&lt;/p&gt;
&lt;p&gt;For the other developers who don’t know what Vert.x is, the best definition is …&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;… a toolkit to build distributed and reactive systems on top of the JVM using an asynchronous non blocking development model&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The first big thing is related to develop a &lt;em&gt;reactive&lt;/em&gt; system using Vert.x which means :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Responsive&lt;/em&gt; : the system responds in an acceptable time;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Elastic&lt;/em&gt; : the system can scale up and scale down;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Resilient&lt;/em&gt; : the system is designed to handle failures gracefully;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Asynchronous&lt;/em&gt; : the interaction with the system is achieved using asynchronous messages;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The other big thing is related to use an &lt;em&gt;asynchronous non blocking&lt;/em&gt; development model which doesn’t mean to be multi-threading but thanks to the non blocking I/O (i.e. for handling network, file system, …) and callbacks system, it’s possible to handle a huge numbers of events per second using a single thread (aka “event loop”).&lt;/p&gt;
&lt;p&gt;You can find a lot of &lt;a href=&quot;http://vertx.io/materials/&quot;&gt;material&lt;/a&gt; on the official web site in order to better understand what Vert.x is and all its main features; it’s not my objective to explain it in this very short article that is mostly … you guess … messaging and IoT oriented  :-)&lt;/p&gt;
&lt;p&gt;In my opinion, all the above features make Vert.x a great toolkit for building Internet of Things applications where being reactive and asynchronous is a “must” in order to handle millions of connections from devices and all the messages ingested from them.&lt;/p&gt;
&lt;h2 id=&quot;vert-x-and-the-internet-of-things&quot;&gt;Vert.x and the Internet of Things&lt;/h2&gt;
&lt;p&gt;As a toolkit, so made of different components, what are the ones provided by Vert.x and useful to IoT ?&lt;/p&gt;
&lt;p&gt;Starting from the Vert.x &lt;a href=&quot;https://github.com/eclipse/vert.x&quot;&gt;Core&lt;/a&gt; component, there is support for both versions of HTTP protocol so 1.1 and 2.0 in order to develop an &lt;a href=&quot;http://vertx.io/docs/vertx-core/java/#_writing_http_servers_and_clients&quot;&gt;HTTP server&lt;/a&gt; which can expose a RESTful API to the devices. Today , a lot of web and mobile developers prefer to use this protocol for building their IoT solution leveraging on the deep knowledge they have about the HTTP protocol.&lt;/p&gt;
&lt;p&gt;Regarding more IoT oriented protocols, there is the Vert.x &lt;a href=&quot;https://github.com/vert-x3/vertx-mqtt-server&quot;&gt;MQTT server&lt;/a&gt; component which doesn’t provide a full broker but exposes an API that a developer can use in order to handle incoming connections and messages from remote MQTT clients and then building the business logic on top of it, so for example developing a real broker or executing protocol translation (i.e. to/from plain TCP,to/from the Vert.x Event Bus,to/from HTTP,to/from AMQP and so on). The API raises all events related to the connection request from a remote MQTT client and all subsequent incoming messages; at same time, the API provides the way to reply to the remote endpoint. The developer doesn’t need to know how MQTT works on the wire in terms of encoding/decoding messages.&lt;/p&gt;
&lt;p&gt;Related to the AMQP 1.0 protocol there are the Vert.x &lt;a href=&quot;https://github.com/vert-x3/vertx-proton&quot;&gt;Proton&lt;/a&gt; and the &lt;a href=&quot;https://github.com/vert-x3/vertx-amqp-bridge&quot;&gt;AMQP bridge&lt;/a&gt; components. The first one provides a thin wrapper around the &lt;a href=&quot;http://qpid.apache.org/&quot;&gt;Apache Qpid&lt;/a&gt; Proton engine and can be used for interacting with AMQP based messaging systems as clients (sender and receiver) but even developing a server. The last one provides a bridge between the protocol and the Vert.x Event Bus mostly used for communication between deployed Vert.x verticles. Thanks to this bridge, verticles can interact with AMQP components in a simple way.&lt;/p&gt;
&lt;p&gt;Last but not least, the Vert.x &lt;a href=&quot;https://github.com/vert-x3/vertx-kafka-client&quot;&gt;Kafka client&lt;/a&gt; component which provides access to Apache Kafka for sending and consuming messages from topics and related partitions. A lot of IoT scenarios leverage on Apache Kafka in order to have an ingestion system capable of handling million messages per second.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The current Vert.x code base provides quite interesting components for developing IoT solutions which are already available in the current 3.3.3 version (see Vert.x Proton and AMQP bridge) and that will be available soon in the future 3.4.0 version (see MQTT server and Kafka client). Of course, you don’t need to wait for their official release because, even if under development, you can already adopt these components and provide your feedback to the community.&lt;/p&gt;
&lt;p&gt;This ecosystem will grow in the future and Vert.x will be a leading actor in the IoT applications world based on a microservices architecture !&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Thu, 29 Dec 2016 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/internet-of-things-reactive-and-asynchronous-with-vert-x</link>
          <guid isPermaLink="true">https://vertx.io/blog/internet-of-things-reactive-and-asynchronous-with-vert-x</guid>
          <author>
            <name>ppatierno</name>
            <uri>http://github.com/ppatierno</uri>
          </author>
        </item>
      
        <item>
          <title>Getting started with new fabric8 Vert.x Maven Plugin</title>
          <description>
      &lt;article&gt;&lt;p&gt;The all new &lt;a href=&quot;http://vmp.fabric8.io&quot;&gt;fabric8 Vert.x Maven Plugin&lt;/a&gt; allows you to setup, package, run, start, stop and redeploy easily with a very little configuration resulting in a less verbose &lt;code&gt;pom.xml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block info&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-info-circle&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;content&#39;&gt;The plugin is developed under the &lt;a href=&quot;https://fabric8.io/&quot;&gt;fabric8&lt;/a&gt; umbrella&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Traditionally Vert.x applications using &lt;a href=&quot;http://maven.apache.org&quot;&gt;Apache Maven&lt;/a&gt; need to have one or more of the following plugins:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://maven.apache.org/plugins/maven-shade-plugin/&quot;&gt;Maven Shade Plugin&lt;/a&gt; - aids in packaging a uber jar of Vert.x application with additional configurations to perform SPI combining, MANIFEST.MF entries etc.,&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mojohaus.org/exec-maven-plugin/&quot;&gt;Maven Exec Plugin&lt;/a&gt; - aids in starting the Vert.x application&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://maven.apache.org/plugins/maven-ant-plugin/&quot;&gt;Maven Ant Plugin&lt;/a&gt; - aids in stopping the running Vert.x application&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Though these are great plugins and do what is required, but at the end of the day the developer is left with a verbose &lt;code&gt;pom.xml&lt;/code&gt; which might become harder to maintain as the application or its configuration grows. Even if we decide to go this way and use those plugins, there are some things which can’t done or done easily:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;run&lt;/code&gt; an application on foreground - which is a typical way during development where the application starts in foreground of &lt;a href=&quot;http://maven.apache.org&quot;&gt;Apache Maven&lt;/a&gt; build and killed automatically once we hit &lt;code&gt;Ctrl + c&lt;/code&gt;(or &lt;code&gt;CMD + c&lt;/code&gt; on Mac)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redeploy&lt;/code&gt; is one of the coolest feature of Vert.x allowing us to perform hot deployments. Still we can manage to do this with IDE support but not natively using &lt;a href=&quot;http://maven.apache.org&quot;&gt;Apache Maven&lt;/a&gt; - typical cases where we disable &lt;em&gt;Automatic Builds&lt;/em&gt; via IDE&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setup&lt;/code&gt; Vert.x applications with sensible defaults and required Vert.x dependencies e.g. vertx-core&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this first blog of fabric8 Vert.x Maven Plugin series we will help you to get started with this new &lt;a href=&quot;http://vmp.fabric8.io&quot;&gt;fabric8 Vert.x Maven Plugin&lt;/a&gt;, highlighting how this plugin helps alleviating the aforementioned pain points with a less verbose &lt;code&gt;pom.xml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://maven.apache.org&quot;&gt;Apache Maven&lt;/a&gt; plugin source code is available at &lt;a href=&quot;https://github.com/fabric8io/vertx-maven-plugin&quot;&gt;github&lt;/a&gt; with &lt;a href=&quot;http://maven.apache.org&quot;&gt;Apache Maven&lt;/a&gt; plugin documentation available at &lt;a href=&quot;http://vmp.fabric8.io&quot;&gt;fabric8 Vert.x Maven Plugin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The source code of the examples used in this blog are available at &lt;a href=&quot;https://github.com/kameshsampath/vmp-blog&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;let-s-set-it-up&quot;&gt;Let’s set it up&lt;/h2&gt;
&lt;p&gt;Its very easy to setup and get started. Let’s say you have a project called &lt;em&gt;vmp-blog&lt;/em&gt; with the following content as part of your &lt;code&gt;pom.xml&lt;/code&gt;&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/kameshsampath/0e0cfc90ea3cb9d69553ee9901dfd796.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;from the project directory just run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mvn io.fabric8:vertx-maven-plugin:&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:setup&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On successful execution of the above command the project’s &lt;code&gt;pom.xml&lt;/code&gt; will be updated:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/kameshsampath/3c2e96d98f1e16d0f7a0501c05ce0d12.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The command did the following for you on the project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;added couple of properties&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fabric8.vertx.plugin.version&lt;/code&gt; - the latest fabric8 vert.x maven plugin version&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vertx.version&lt;/code&gt; - the latest Vert.x framework version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;added the Vert.x dependency BOM and vertx-core dependency corresponding to &lt;code&gt;vertx.version&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;added &lt;code&gt;vertx-maven-plugin&lt;/code&gt; with a single execution for goals &lt;a href=&quot;https://vmp.fabric8.io/#vertx:initalize&quot;&gt;initialize&lt;/a&gt; and &lt;a href=&quot;https://vmp.fabric8.io/#vertx:package&quot;&gt;package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The source code created by this step is available &lt;a href=&quot;https://github.com/kameshsampath/vmp-blog/tree/setup&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Et voilà, you are now all set to go with your Vert.x application building with &lt;a href=&quot;http://maven.apache.org&quot;&gt;Apache Maven&lt;/a&gt;!!&lt;/p&gt;
&lt;h2 id=&quot;let-s-package-it&quot;&gt;Let’s package it&lt;/h2&gt;
&lt;p&gt;Now that we have set up our project to use &lt;code&gt;vertx-maven-plugin&lt;/code&gt;, lets add a simple verticle and package the Vert.x application as typical &lt;em&gt;uber&lt;/em&gt; jar (in the Vert.x world we call them &lt;em&gt;fat&lt;/em&gt; jars).  The source code of this section is available &lt;a href=&quot;https://github.com/kameshsampath/vmp-blog/tree/package&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To make &lt;code&gt;package&lt;/code&gt; work correctly we need to add property called &lt;code&gt;vertx.verticle&lt;/code&gt;, which will be used by the vertx-maven-plugin to set the &lt;code&gt;Main-Verticle:&lt;/code&gt; attribute of the &lt;code&gt;MANIFEST.MF&lt;/code&gt;.  Please refer to the documentation of  &lt;a href=&quot;https://vmp.fabric8.io/#vertx:package&quot;&gt;package&lt;/a&gt; for other possible configurations.  There is also a &lt;a href=&quot;https://vmp.fabric8.io/#vertx:examples&quot;&gt;examples&lt;/a&gt; section of the vertx-maven-plugin which provides various samples snippets.&lt;/p&gt;
&lt;p&gt;The updated &lt;code&gt;pom.xml&lt;/code&gt; with the added property &lt;code&gt;vertx-maven-plugin&lt;/code&gt; is shown below:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;content&#39;&gt;Only updated section is shown below, rest of the pom.xml is same as above&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/kameshsampath/24a1ed6a377b118f06af2c4b4ddf0ca0.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;To package the Vert.x application, run the following &lt;a href=&quot;http://maven.apache.org&quot;&gt;Apache Maven&lt;/a&gt; command from the project directory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mvn clean package&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On successful run of the above command you should see the file with name &lt;code&gt;${project.finalName}.jar&lt;/code&gt; created in the &lt;code&gt;${project.build.directory}&lt;/code&gt;, you could now do the following to start and run the Vert.x application.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;java -jar &lt;span class=&quot;hljs-variable&quot;&gt;${project.build.directory}&lt;/span&gt;/&lt;span class=&quot;hljs-variable&quot;&gt;${project.finalName}&lt;/span&gt;.jar&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The generated &lt;code&gt;MANIFEST.MF&lt;/code&gt; file is as shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;Main-Class                               io&lt;span class=&quot;hljs-class&quot;&gt;.vertx&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.core&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.Launcher&lt;/span&gt;
Main-Verticle                            io&lt;span class=&quot;hljs-class&quot;&gt;.fabric8&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.blog&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.MainVerticle&lt;/span&gt;
Manifest-Version                         &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The source code up to now is available in &lt;a href=&quot;https://github.com/kameshsampath/vmp-blog/tree/package&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;spi-combination&quot;&gt;SPI Combination&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;package&lt;/code&gt; goal by default does a SPI combination, lets say you have a service file called &lt;code&gt;com.fasterxml.jackson.core.JsonFactory&lt;/code&gt; in &lt;code&gt;${project.basedir}/src/main/resources/META-INF/services&lt;/code&gt; with contents:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;foo.bar.baz.MyImpl
&lt;span class=&quot;hljs-variable&quot;&gt;${combine}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;During packaging, if the &lt;a href=&quot;http://vmp.fabric8.io&quot;&gt;fabric8 Vert.x Maven Plugin&lt;/a&gt; finds another &lt;code&gt;com.fasterxml.jackson.core.JsonFactory&lt;/code&gt; service definition file within the project dependencies with content &lt;em&gt;foo.bar.baz2.MyImpl2&lt;/em&gt;, then it merges the content into &lt;code&gt;com.fasterxml.jackson.core.JsonFactory&lt;/code&gt; of &lt;code&gt;${project.basedir}/src/main/resources/META-INF/services&lt;/code&gt;, resulting in the following content:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;foo&lt;span class=&quot;hljs-class&quot;&gt;.bar&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.baz&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.MyImpl&lt;/span&gt;
foo&lt;span class=&quot;hljs-class&quot;&gt;.bar&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.baz2&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.MyImpl2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The position of &lt;code&gt;${combine}&lt;/code&gt; controls the ordering of the merge, since we added &lt;code&gt;${combine}&lt;/code&gt; below &lt;em&gt;foo.bar.baz.MyImpl&lt;/em&gt; all other SPI definitions will be appended below &lt;em&gt;foo.bar.baz.MyImpl&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;what-s-next-&quot;&gt;What’s next ?&lt;/h2&gt;
&lt;p&gt;It’s good to have the jar packaged and run using &lt;code&gt;java -jar uber-jar&lt;/code&gt;, but when doing typical development you don’t  want to do frequent &lt;a href=&quot;http://maven.apache.org&quot;&gt;Apache Maven&lt;/a&gt; packaging and wish to see your changes automatically redeployed.&lt;/p&gt;
&lt;p&gt;Don’t worry!!! As part of &lt;a href=&quot;http://vmp.fabric8.io&quot;&gt;fabric8 Vert.x Maven Plugin&lt;/a&gt; we have added the incremental builder to &lt;a href=&quot;http://maven.apache.org&quot;&gt;Apache Maven&lt;/a&gt; build, which will watch for your source and resource changes to perform automatic re-build and delegate the redeployment to Vert.x.&lt;/p&gt;
&lt;p&gt;Run, redeploy and other features of the &lt;a href=&quot;http://vmp.fabric8.io&quot;&gt;fabric8 Vert.x Maven Plugin&lt;/a&gt; will be explored in detail in the next part of this series, until then have fun with &lt;a href=&quot;http://vmp.fabric8.io&quot;&gt;fabric8 Vert.x Maven Plugin&lt;/a&gt;!!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Wed, 07 Dec 2016 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/getting-started-with-new-fabric8-vert-x-maven-plugin</link>
          <guid isPermaLink="true">https://vertx.io/blog/getting-started-with-new-fabric8-vert-x-maven-plugin</guid>
          <author>
            <name>kameshsampath</name>
            <uri>http://github.com/kameshsampath</uri>
          </author>
        </item>
      
        <item>
          <title>OAuth2 got easy</title>
          <description>
      &lt;article&gt;&lt;p&gt;&lt;code&gt;Oauth2&lt;/code&gt; support exists in Eclipse Vert.x since version 3.2.0. The implementation follows the principles that rule the whole vert.x ecosystem: unopinionated, it does what you want it to do, simple but not too simple.&lt;/p&gt;
&lt;p&gt;This works fine because &lt;code&gt;OAuth2&lt;/code&gt; is a widely spread standard and vendors adhere to it quite well. However due to the API and the details of the specification it requires some knowledge on what kind of &lt;em&gt;flow&lt;/em&gt; your application needs to support, what are the endpoints for authorizing and getting tokens. This information, even though easily accessible to anyone who’s got the time and will, to read the vendor documentation is easy to find, but it means that developers would need to spend time in a non-project problem-related task.&lt;/p&gt;
&lt;p&gt;Vert.x thrives for being fast and productive, so what if we could help you focusing on your development tasks rather than reading Oauth2 provider documentation? This is what you can expect for the next release.&lt;/p&gt;
&lt;p&gt;Out of the box you will find out that you can instantiate an OAuth2 provider as easy as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;Provider.&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(vertx, clientId, clientSecret)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it! simple, to the point, sure it makes some assumptions, it assumes that you want to use the “&lt;code&gt;AUTH_CODE&lt;/code&gt;“ flow which is what you normally do for web applications with a backend.&lt;/p&gt;
&lt;p&gt;The supported &lt;code&gt;Provider&lt;/code&gt; implementations will configure the base API (which will be still available) with the correct URLs, scope encoding scheme or extra configuration such as “&lt;code&gt;shopId&lt;/code&gt;“/“&lt;code&gt;GUID&lt;/code&gt;“ for &lt;code&gt;Shopify&lt;/code&gt;/&lt;code&gt;Azure AD&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So what supported &lt;code&gt;Provider&lt;/code&gt;s can you already find?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://app.net/&quot;&gt;App.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/&quot;&gt;Azure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://box.com&quot;&gt;Box.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dropbox.com&quot;&gt;Dropbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.com&quot;&gt;Facebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://foursquare.com&quot;&gt;Foursquare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://google.com&quot;&gt;Google&lt;/a&gt; (either &lt;code&gt;AUTH_CODE&lt;/code&gt; flow or &lt;code&gt;Server to Server&lt;/code&gt; flow) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://instagram.com&quot;&gt;Instagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://keycloak.org&quot;&gt;Keycloak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://linkedin.com&quot;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mailchimp.com&quot;&gt;Mailchimp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://salesforce.com&quot;&gt;Salesforce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://shopify.com&quot;&gt;Shopify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://soundcloud.com&quot;&gt;Soundcloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stripe.com&quot;&gt;Stripe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com&quot;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s a handful of &lt;code&gt;Provider&lt;/code&gt;s, but there is more. Say that you want to ensure that your SSL connections are valid and want to control the certificate validation. Every provider also accepts a HttpClientOptions object that will be used internally when contacting your provider, so in this case, you have full security control of your connection, not just defaults.&lt;/p&gt;
&lt;p&gt;You can expect this new code to land for 3.4 as it is not available in the current release (3.3.3).&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Fri, 02 Dec 2016 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/oauth2-got-easy</link>
          <guid isPermaLink="true">https://vertx.io/blog/oauth2-got-easy</guid>
          <author>
            <name>pmlopes</name>
            <uri>http://github.com/pmlopes</uri>
          </author>
        </item>
      
        <item>
          <title>Vert.x featuring Continuous Delivery with Jenkins and Ansible</title>
          <description>
      &lt;article&gt;&lt;p&gt;This blog entry describes an approach to adopt &lt;em&gt;Continuous Delivery&lt;/em&gt; for Vert.x applications using Jenkins and Ansible by taking advantage of the Jenkins Job DSL and Ansible plugins.&lt;/p&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#preamble&quot;&gt;Preamble&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#creating-a-Jenkins-build-job-using-job-dSL&quot;&gt;Creating a Jenkins build job using Job DSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#deploying-vertx-app-using-ansible&quot;&gt;Deploying Vert.x app using Ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sample-sources-and-demo&quot;&gt;Sample sources and demo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#launch-instructions&quot;&gt;Launch instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#demo&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;preamble&quot;&gt;Preamble&lt;/h2&gt;
&lt;p&gt;This post was written in context of the project titled “&lt;a href=&quot;https://summerofcode.withgoogle.com/projects/#4858492141699072&quot;&gt;DevOps tooling for Vert.x applications&lt;/a&gt;“, one of the projects at Vert.x taking place during the 2016 edition of &lt;a href=&quot;https://summerofcode.withgoogle.com/about/&quot;&gt;Google Summer of Code&lt;/a&gt;, a program that aims to bring students together with open source organizations in order to help them to gain exposure to software development practices and real-world challenges.&lt;/p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;System configuration management (e.g., Ansible) has been really hype in the recent years and there is a strong reason for that.
Configuration management facilitates configuring a new environment following a fixed &lt;em&gt;recipe&lt;/em&gt; or slightly varying it with the help of parameters. This has not only the advantage of being able to do it more frequently but reduces the chance of errors than doing it manually.&lt;br&gt;Beyond that, combining it with &lt;em&gt;Continuous Integration&lt;/em&gt; tools (e.g., Jenkins) allows making a deployment as soon as a new codebase version is available, which represents the main building block of a &lt;em&gt;Continuous Delivery&lt;/em&gt; pipeline, one of the objectives of embracing a DevOps culture.&lt;/p&gt;
&lt;p&gt;Given that Vert.x is a framework that consists in a few libraries which can be shipped within a single &lt;em&gt;fat jar&lt;/em&gt;, adopting a DevOps culture while developing a Vert.x-based application is straightforward.&lt;/p&gt;
&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;As seen in the diagram below, this post describes a method to define a Jenkins build job which will react to changes in a code repository. After succesfully building the project, the job will execute an Ansible &lt;em&gt;playbook&lt;/em&gt; to deploy the new application version to the hosts specified within the Ansible configuration.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blog/continuous-delivery-jenkins-ansible/ansible-jenkins-overview.svg&quot; alt=&quot;Overview of the continous delivery process&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;creating-a-jenkins-build-job-using-job-dsl&quot;&gt;Creating a Jenkins build job using Job DSL&lt;/h2&gt;
&lt;p&gt;Jenkins has created a convenient way to define build jobs using a DSL. While this option avoids the hassle of configuring build jobs manually, it supports all features of the regular interface through its &lt;a href=&quot;https://jenkinsci.github.io/job-dsl-plugin/&quot;&gt;API&lt;/a&gt;. It is possible to use Ansible together with Jenkins with the help of the Ansible &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Ansible+Plugin/&quot;&gt;plugin&lt;/a&gt;, whose instructions are also included in the Job DSL &lt;a href=&quot;https://github.com/jenkinsci/ansible-plugin/blob/master/README.md&quot;&gt;API&lt;/a&gt;. Alternatively to the Job DSL Plugin, Ansible can be used inside the definition of Jenkins Pipeline, one of tool’s most recent features.&lt;/p&gt;
&lt;p&gt;Below is a sample job definition which can be used after creating a &lt;em&gt;freestyle&lt;/em&gt; job (seed job) and adding a new build step with the DSL script. In the script, there are a few things to notice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A name for the job created by the seed job is given.&lt;/li&gt;
&lt;li&gt;Specific versions of JDK, Maven, and Ansible (available in the environment) are used.&lt;/li&gt;
&lt;li&gt;Git is selected as the SCM platform and the target repository is defined. Also, the build job is triggered according to a specific interval.&lt;/li&gt;
&lt;li&gt;The Maven &lt;em&gt;package&lt;/em&gt; goal is invoked, which is instructed to package the application into a fat jar.&lt;/li&gt;
&lt;li&gt;Lastly, Ansible is used to call a playbook available in the filesystem. The app will be deployed to the defined target hosts and the credentials (configured in Jenkins) will be used to log into the target hosts. Additionally, enabling the &lt;code&gt;colorizedOutput&lt;/code&gt; option will result in a friendlier formatting of the results in the console output. The contents of this playbook will be addressed in the next section.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;hljs groovy&quot;&gt;job(&lt;span class=&quot;hljs-string&quot;&gt;&#39;vertx-microservices-workshop-job&#39;&lt;/span&gt;) {
    jdk(&lt;span class=&quot;hljs-string&quot;&gt;&#39;JDK8&#39;&lt;/span&gt;)
    scm {
        git(&lt;span class=&quot;hljs-string&quot;&gt;&#39;git://github.com/ricardohmon/vertx-microservices-workshop.git&#39;&lt;/span&gt;)
    }
    triggers {
        scm(&lt;span class=&quot;hljs-string&quot;&gt;&#39;*/15 * * * *&#39;&lt;/span&gt;)
    }
    steps {

      &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; mvnInst = &lt;span class=&quot;hljs-string&quot;&gt;&#39;M3.3.9&#39;&lt;/span&gt;  
      maven {  
        goals(&lt;span class=&quot;hljs-string&quot;&gt;&#39;package&#39;&lt;/span&gt;)  
        mavenInstallation(mvnInst)  
      }  
      ansiblePlaybook(&lt;span class=&quot;hljs-string&quot;&gt;&#39;/ansible/playbook.yml&#39;&lt;/span&gt;) {  
        inventoryPath(&lt;span class=&quot;hljs-string&quot;&gt;&#39;/ansible/hosts&#39;&lt;/span&gt;)  
        ansibleName(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Ansible2.0&#39;&lt;/span&gt;)  
        credentialsId(&lt;span class=&quot;hljs-string&quot;&gt;&#39;vagrant-key&#39;&lt;/span&gt;)  
        colorizedOutput(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)  
      }  

    }  
}&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;deploying-vert-x-app-using-ansible&quot;&gt;Deploying Vert.x app using Ansible&lt;/h2&gt;
&lt;p&gt;An Ansible Playbook results quite convenient to deploy a Vert.x application to a number of hosts while still taking considerations for each of them. Below is a sample playbook that deploys the respective application to each of the hosts described in an &lt;em&gt;inventory&lt;/em&gt; file. The playbook comprises the following tasks and takes the listed considerations:&lt;/p&gt;
&lt;p&gt;1) A task that targets only hosts with a database.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The target hosts is specified with the name of the host (or hosts group) defined in the inventory file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2) Actual application deployment task. Here, several considerations are done:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The application may require that only one host is updated at the time.&lt;br&gt;This can be achieved with the &lt;code&gt;serial&lt;/code&gt; option, while the order of the deployment to hosts can be enforced in the &lt;code&gt;hosts&lt;/code&gt; option.&lt;br&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;Host processing order &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; Even though we could have declared &lt;code&gt;all&lt;/code&gt; hosts, Ansible does not provide an explicit way to specify the order.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Java is a system requirement for our Vert.x applications.&lt;br&gt;Besides installing it (keep reading), we need to declare the &lt;code&gt;JAVA_HOME&lt;/code&gt; environment variable.&lt;/li&gt;
&lt;li&gt;A deployment may just represent an update to an already running application (&lt;em&gt;Continuous Deployment&lt;/em&gt;), hence it is convenient to stop the previous application inside the &lt;code&gt;pre_tasks&lt;/code&gt; and take post-deployment actions in the &lt;code&gt;post_tasks&lt;/code&gt;.
Vert.x ships with the convenient &lt;code&gt;start&lt;/code&gt;/&lt;code&gt;stop&lt;/code&gt;/&lt;code&gt;list&lt;/code&gt; commands that result very helpful here. We can use the &lt;code&gt;list&lt;/code&gt; command and extract (using regex) the &lt;code&gt;id&lt;/code&gt; of the running application of its output to stop it before deploying a new version.
&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;Hint &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; If our solution includes a load balancer or proxy, we could deal with them at this step as described in Ansible’s &lt;a href=&quot;http://docs.ansible.com/ansible/playbooks_delegation.html&quot;&gt;best practices&lt;/a&gt; for rolling updates&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Call to a &lt;code&gt;role&lt;/code&gt; that makes the actual application deployment. The Jenkins Ansible Plugin includes, between others, a &lt;code&gt;WORKSPACE&lt;/code&gt; environment variable, which may result very helpful in the following tasks, as shown later.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) Special task &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; the service with a db
- &lt;span class=&quot;hljs-string&quot;&gt;hosts:&lt;/span&gt; audit-service
&lt;span class=&quot;hljs-label&quot;&gt;  remote_user:&lt;/span&gt; vagrant
&lt;span class=&quot;hljs-label&quot;&gt;  become:&lt;/span&gt; yes
&lt;span class=&quot;hljs-label&quot;&gt;  roles:&lt;/span&gt;
    - db-setup

  # &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) Common tasks &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; all hosts
- &lt;span class=&quot;hljs-string&quot;&gt;hosts:&lt;/span&gt; quote-&lt;span class=&quot;hljs-string&quot;&gt;generator:&lt;/span&gt;portfolio-&lt;span class=&quot;hljs-string&quot;&gt;service:&lt;/span&gt;compulsive-&lt;span class=&quot;hljs-string&quot;&gt;traders:&lt;/span&gt;audit-&lt;span class=&quot;hljs-string&quot;&gt;service:&lt;/span&gt;trader-dashboard
&lt;span class=&quot;hljs-label&quot;&gt;  remote_user:&lt;/span&gt; vagrant
&lt;span class=&quot;hljs-label&quot;&gt;  become:&lt;/span&gt; yes
&lt;span class=&quot;hljs-label&quot;&gt;  serial:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;hljs-label&quot;&gt;  environment:&lt;/span&gt;
&lt;span class=&quot;hljs-label&quot;&gt;    JAVA_HOME:&lt;/span&gt; &lt;span class=&quot;hljs-regexp&quot;&gt;/usr/&lt;/span&gt;lib&lt;span class=&quot;hljs-regexp&quot;&gt;/jvm/&lt;/span&gt;jre-&lt;span class=&quot;hljs-number&quot;&gt;1.8&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;/span&gt;-openjdk/
&lt;span class=&quot;hljs-label&quot;&gt;
  pre_tasks:&lt;/span&gt;
  - &lt;span class=&quot;hljs-string&quot;&gt;name:&lt;/span&gt; Check &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; the app jar exists &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; the target already
&lt;span class=&quot;hljs-label&quot;&gt;    stat:&lt;/span&gt; path=&lt;span class=&quot;hljs-regexp&quot;&gt;/usr/&lt;/span&gt;share&lt;span class=&quot;hljs-regexp&quot;&gt;/vertx_app/&lt;/span&gt;app-fatjar.jar
&lt;span class=&quot;hljs-label&quot;&gt;    register:&lt;/span&gt; st
  - &lt;span class=&quot;hljs-string&quot;&gt;name:&lt;/span&gt; List running Vert.x applications
&lt;span class=&quot;hljs-label&quot;&gt;    command:&lt;/span&gt; java -jar &lt;span class=&quot;hljs-regexp&quot;&gt;/usr/&lt;/span&gt;share&lt;span class=&quot;hljs-regexp&quot;&gt;/vertx_app/&lt;/span&gt;app-fatjar.jar list
&lt;span class=&quot;hljs-label&quot;&gt;    register:&lt;/span&gt; running_app_list
&lt;span class=&quot;hljs-label&quot;&gt;    when:&lt;/span&gt; st.stat.exists == True
  - &lt;span class=&quot;hljs-string&quot;&gt;name:&lt;/span&gt; Stop app &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; it is already running (avoid multiple running instances)
&lt;span class=&quot;hljs-label&quot;&gt;    command:&lt;/span&gt; java -jar &lt;span class=&quot;hljs-regexp&quot;&gt;/usr/&lt;/span&gt;share&lt;span class=&quot;hljs-regexp&quot;&gt;/vertx_app/&lt;/span&gt;app-fatjar.jar stop {{ item | regex_replace(&lt;span class=&quot;hljs-string&quot;&gt;&#39;^(?P&lt;V_id&gt;.[8]-.[4]-.[4].[4].[12])\t.*&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&#39;\\g&lt;V_id&gt;&#39;&lt;/span&gt;) }}
&lt;span class=&quot;hljs-label&quot;&gt;    with_items:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;{{ running_app_list.stdout_lines|default([]) }}&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-label&quot;&gt;    when:&lt;/span&gt; st.stat.exists == True and (item | regex_replace(&lt;span class=&quot;hljs-string&quot;&gt;&#39;.*\t(.*)$&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&#39;\\1&#39;&lt;/span&gt;) | match(&lt;span class=&quot;hljs-string&quot;&gt;&#39;.*/app-fatjar.jar$&#39;&lt;/span&gt;))

  # Main role
&lt;span class=&quot;hljs-label&quot;&gt;  roles:&lt;/span&gt;
    - { &lt;span class=&quot;hljs-string&quot;&gt;role:&lt;/span&gt; vertx-app-deployment, &lt;span class=&quot;hljs-string&quot;&gt;jenkins_job_workspace:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; }
&lt;span class=&quot;hljs-label&quot;&gt;
  post_tasks:&lt;/span&gt;
  - &lt;span class=&quot;hljs-string&quot;&gt;name:&lt;/span&gt; List again running Vert.x applications
&lt;span class=&quot;hljs-label&quot;&gt;    command:&lt;/span&gt; java -jar &lt;span class=&quot;hljs-regexp&quot;&gt;/usr/&lt;/span&gt;share&lt;span class=&quot;hljs-regexp&quot;&gt;/vertx_app/&lt;/span&gt;app-fatjar.jar list&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we took care of the actions shown before, the remaining tasks (included in the main deployment role) reduce to the following:&lt;/p&gt;
&lt;p&gt;1) Prepare the target machine with the proper environment to run our application. This includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set up Java (pretty convenient to do it through a package manager).&lt;/li&gt;
&lt;li&gt;Copy the Vert.x application package to the appropriate folder (quite simple using a fat jar). The actual name and location of the jar package in the Jenkins environment can be defined using host-specific &lt;a href=&quot;http://docs.ansible.com/ansible/playbooks_delegation.html&quot;&gt;variables&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In case necessary, copy the required config files.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;- &lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: Install Java &lt;span class=&quot;hljs-number&quot;&gt;1.8&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;some&lt;/span&gt; basic dependencies
  yum: &lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;={{ &lt;span class=&quot;hljs-property&quot;&gt;item&lt;/span&gt; }} state=present
  with_items:
   - java-&lt;span class=&quot;hljs-number&quot;&gt;1.8&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;/span&gt;-openjdk
- &lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: Ensure app dir exists
  &lt;span class=&quot;hljs-type&quot;&gt;file&lt;/span&gt;: path=/usr/share/vertx_app/ recurse=yes state=directory mode=&lt;span class=&quot;hljs-number&quot;&gt;0744&lt;/span&gt;
- &lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: Copy &lt;span class=&quot;hljs-keyword&quot;&gt;the&lt;/span&gt; Vert.x &lt;span class=&quot;hljs-type&quot;&gt;application&lt;/span&gt; jar package
  &lt;span class=&quot;hljs-keyword&quot;&gt;copy&lt;/span&gt;: src={{ app_jar }} dest=/usr/share/vertx_app/app-fatjar.jar mode=&lt;span class=&quot;hljs-number&quot;&gt;0755&lt;/span&gt;
- &lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: Ensure config dir exists
  &lt;span class=&quot;hljs-type&quot;&gt;file&lt;/span&gt;: path=/etc/vertx_app/ recurse=yes state=directory mode=&lt;span class=&quot;hljs-number&quot;&gt;0744&lt;/span&gt;
- &lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: Copy &lt;span class=&quot;hljs-keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;application&lt;/span&gt; config &lt;span class=&quot;hljs-type&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; needed
  &lt;span class=&quot;hljs-keyword&quot;&gt;copy&lt;/span&gt;: src={{ app_config }} dest=/etc/vertx_app/config.json mode=&lt;span class=&quot;hljs-number&quot;&gt;0755&lt;/span&gt;
  when: app_config &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; defined&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2) Run the application as a service in the hosting machine.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure to ignore the hang up signal with the help of &lt;code&gt;nohup&lt;/code&gt; command. Otherwise, Ansible will be stuck at this step.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;- name: &lt;span class=&quot;hljs-keyword&quot;&gt;Run&lt;/span&gt; Vert.x application as a service, ignore the SIGHUP signal
  shell: nohup java &lt;span class=&quot;hljs-list&quot;&gt;&lt;/span&gt;&lt;span class=&quot;hljs-list&quot;&gt;{{ vertx_opts }&lt;/span&gt;}&lt;span class=&quot;hljs-list&quot;&gt;&lt;/span&gt; -jar /usr/share/vertx_app/app-fatjar.jar start &lt;span class=&quot;hljs-list&quot;&gt;&lt;/span&gt;&lt;span class=&quot;hljs-list&quot;&gt;{{ launch_params }&lt;/span&gt;}&lt;span class=&quot;hljs-list&quot;&gt;&lt;/span&gt;
  register: svc_run_out
- name: &lt;span class=&quot;hljs-keyword&quot;&gt;Print&lt;/span&gt; run output
  debug: var=svc_run_out.stdout_lines&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;Launching the Vert.x app &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; This example uses the &lt;code&gt;start&lt;/code&gt; command to launch the application as a service. This method may result more comfortable than creating an &lt;a href=&quot;http://vertx.io/blog/vert-x-3-init-d-script/&quot;&gt;init.d script&lt;/a&gt; or calling Vert.x from &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/#running-at-the-command-line&quot;&gt;command line&lt;/a&gt;, which would have required to install the Vert.x libraries in an independent Ansible task. &lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;This describes all the configuration needed to be able to build from a repository using Jenkins and deploy the results to our hosts with Ansible.&lt;/p&gt;
&lt;h2 id=&quot;sample-sources-and-demo&quot;&gt;Sample sources and demo&lt;/h2&gt;
&lt;p&gt;The sample configurations presented before are part of a complete demo focused on the Vert.x microservices &lt;a href=&quot;http://vertx-lab.dynamis-technologies.com/&quot;&gt;workshop&lt;/a&gt; to exemplify a basic Continuous Delivery scenario. This set up is available in a &lt;a href=&quot;https://github.com/ricardohmon/vertx-ansible&quot;&gt;repository&lt;/a&gt; and contains, in addition, a pre-configured Jenkins-based demo ready to host the build job described the previous sections. The demo scenario requires Vagrant and Virtualbox to be launched.&lt;/p&gt;
&lt;h3 id=&quot;launch-instructions&quot;&gt;Launch instructions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Clone or download this repository, and launch the demo using &lt;code&gt;vagrant up&lt;/code&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;git clone http&lt;span class=&quot;hljs-variable&quot;&gt;s:&lt;/span&gt;//github.&lt;span class=&quot;hljs-keyword&quot;&gt;com&lt;/span&gt;/ricardohmon/vertx-ansible.git
&lt;span class=&quot;hljs-keyword&quot;&gt;cd&lt;/span&gt; demo
vagrant &lt;span class=&quot;hljs-keyword&quot;&gt;up&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
This command will launch a virtual machine hosting Jenkins with the required plugins installed (tools names needed) and also launch five additional VMs that will host the microservices deployed by Jenkins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a Jenkins freestyle build job using the DSL job script (seed job) found in &lt;code&gt;deployment-jobs/microservices_workshop_dsl.groovy&lt;/code&gt; and build it.
&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;Tool configuration assumption &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; The DSL Job assumes the following tools (with names) have been configured in Jenkins: Java 8(&lt;code&gt;JDK8&lt;/code&gt;), Maven (&lt;code&gt;M3.3.9&lt;/code&gt;), Ansible (&lt;code&gt;Ansible2.0&lt;/code&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;After building the seed job, a new job(&lt;code&gt;vertx-microservices-workshop-job&lt;/code&gt;) will be created, which will be in charge of pulling recent changes of the project, building it, and deploying it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;/h3&gt;
&lt;p&gt;Watch the previous demo in action in the following screencast:&lt;/p&gt;
&lt;div class=&quot;embed-responsive embed-responsive-16by9&quot;&gt;
&lt;iframe class=&quot;embed-responsive-item&quot; src=&quot;https://www.youtube.com/embed/GQd_Rfeu6Yo&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Continuous Delivery approach is a &lt;em&gt;must&lt;/em&gt; in modern software development lifecycles (including Vert.x-based applications) and a step further towards adopting a DevOps culture. There are a number of tools that enable it and one example is the combination of Jenkins + Ansible described in this post.&lt;br&gt;While Jenkins offers the possibility to integrate recent changes perceived in a codebase and build runnable artifacts, Ansible can help to deploy them to hosting environments. The usage of both tools can be coupled easily with the help of the Job DSL plugin, a feature of Jenkins that allows describing a build job using a &lt;em&gt;domain-specific language&lt;/em&gt;, which can help to integrate additional steps and tools to a &lt;em&gt;CD&lt;/em&gt; pipeline.&lt;/p&gt;
&lt;p&gt;Further enhancements can be done to this basic pipeline, such as, integrating the recent &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Plugin&quot;&gt;Pipeline plugin&lt;/a&gt;, a feature that allows a better orchestration of CD stages; inclusion of notification and alerting services; and, ultimately a zero-downtime deployment approach, which could be achieved with the help of a proxy; plus, tons of options available trough Jenkins plugins.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Wed, 28 Sep 2016 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/vert-x-featuring-continuous-delivery-with-jenkins-and-ansible</link>
          <guid isPermaLink="true">https://vertx.io/blog/vert-x-featuring-continuous-delivery-with-jenkins-and-ansible</guid>
          <author>
            <name>ricardohmon</name>
            <uri>http://github.com/ricardohmon</uri>
          </author>
        </item>
      
        <item>
          <title>Vert.x 3.3.3 is released !</title>
          <description>
      &lt;article&gt;&lt;p&gt;We have just released Vert.x 3.3.3, a bug fix release of Vert.x 3.3.x.&lt;/p&gt;
&lt;p&gt;Since the release of Vert.x 3.3.2, quite a few bugs have been reported. We would like to thank you all for reporting these issues.&lt;/p&gt;
&lt;p&gt;Vert.x 3.3.3 release notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.3.3---Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.3.3---Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.3.3%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.3.3/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding !&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 12 Sep 2016 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/vert-x-3-3-3-is-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/vert-x-3-3-3-is-released</guid>
          <author>
            <name>cescoffier</name>
            <uri>http://github.com/cescoffier</uri>
          </author>
        </item>
      
        <item>
          <title>Centralized logging for Vert.x applications using the ELK stack</title>
          <description>
      &lt;article&gt;&lt;p&gt;This post entry describes a solution to achieve centralized logging of Vert.x applications using the &lt;a href=&quot;https://www.elastic.co/webinars/introduction-elk-stack&quot;&gt;ELK stack&lt;/a&gt;, a set of tools including Logstash, Elasticsearch, and Kibana that are well known to work together seamlessly.&lt;/p&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#preamble&quot;&gt;Preamble&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#app-logging-configuration&quot;&gt;App logging configuration&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#log4j-logging&quot;&gt;Log4j logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#filebeat-configuration&quot;&gt;Filebeat configuration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#elk-configuration&quot;&gt;ELK configuration&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#logstash&quot;&gt;Logstash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#elasticsearch&quot;&gt;Elasticsearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#kibana&quot;&gt;Kibana&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#log-shipping-challenge&quot;&gt;Log shipping challenge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#demo&quot;&gt;Demo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#building-the-example&quot;&gt;Building the example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#building-the-vertx-microservices-workshop-docker-images&quot;&gt;Building the Vert.x Microservices workshop Docker images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#running-the-example&quot;&gt;Running the example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-demo&quot;&gt;The demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;preamble&quot;&gt;Preamble&lt;/h2&gt;
&lt;p&gt;This post was written in context of the project titled “&lt;a href=&quot;https://summerofcode.withgoogle.com/projects/#4858492141699072&quot;&gt;DevOps tooling for Vert.x applications&lt;/a&gt;“, one of the Vert.x projects taking place during the 2016 edition of &lt;a href=&quot;https://summerofcode.withgoogle.com/about/&quot;&gt;Google Summer of Code&lt;/a&gt;, a program that aims to bring together students with open source organizations, in order to help them to gain exposure to software development practices and real-world challenges.&lt;/p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Centralized logging is an important topic while building a Microservices architecture and it is a step forward to adopting the DevOps culture. Having an overall solution partitioned into a set of services distributed across the Internet can represent a challenge when trying to monitor the log output of each of them, hence, a tool that helps to accomplish this results very helpful.&lt;/p&gt;
&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;As shown in the diagram below, the general centralized logging solution comprises two main elements: the application server, which runs our Vert.x application; and a separate server, hosting the ELK stack. Both elements are linked by Filebeat, a highly configurable tool capable of shipping our application logs to the Logstash instance, i.e., our gateway to the ELK stack.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blog/centralized-logging-using-elk/elk-overview.svg&quot; alt=&quot;Overview of centralized logging with ELK&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;app-logging-configuration&quot;&gt;App logging configuration&lt;/h2&gt;
&lt;p&gt;The approach described here is based on a Filebeat + Logstash configuration, that means first we need to make sure our app logs to a file, whose records will be shipped to Logstash by Filebeat. Luckily, Vert.x provides the means to &lt;a href=&quot;https://vertx.io/docs/vertx-core/java/#_logging&quot;&gt;configure&lt;/a&gt; alternative logging frameworks (e.g., Log4j, Log4j2 and SLF4J) besides the default JUL logging. However, we can use Filebeat independently of the logging framework chosen.&lt;/p&gt;
&lt;h3 id=&quot;log4j-logging&quot;&gt;Log4j Logging&lt;/h3&gt;
&lt;p&gt;The demo that accompanies this post relies on Log4j2 as the logging framework. We instructed Vert.x to use this framework following the &lt;a href=&quot;https://vertx.io/docs/vertx-core/java/#_logging&quot;&gt;guidelines&lt;/a&gt; and we made sure our logging calls are made asynchronous, since we don’t want them to block our application. For this purpose, we opted for the &lt;code&gt;AsyncAppender&lt;/code&gt; and this was included in the Log4J configuration together with the log output format described in a XML configuration available in the application’s &lt;em&gt;Resource&lt;/em&gt; folder.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;Configuration&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;Appenders&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;RollingFile&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;vertx_logs&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;append&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;fileName&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;/var/log/vertx.log&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;filePattern&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;/var/log/vertx/$${date:yyyy-MM}/vertx-%d{MM-dd-yyyy}-%i.log.gz&quot;&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;PatternLayout&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;pattern&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;%d{ISO8601} %-5p %c:%L - %m%n&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;RollingFile&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;Async&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;vertx_async&quot;&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;AppenderRef&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;vertx_logs&quot;&lt;/span&gt;/&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;Async&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;Appenders&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;Loggers&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;Root&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;level&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;DEBUG&quot;&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;AppenderRef&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;vertx_async&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;Root&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;Loggers&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;Configuration&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;filebeat-configuration&quot;&gt;Filebeat configuration&lt;/h3&gt;
&lt;p&gt;Now that we have configured the log output of our Vert.x application to be stored in the file system, we delegate to Filebeat the task of forwarding the logs to the Logstash instance. Filebeat can be configured through a YAML file containing the logs output location and the pattern to interpret multiline logs (i.e., stack traces). Also, the Logstash output plugin is configured with the host location and a secure connection is enforced using the certificate from the machine hosting Logstash. We set the &lt;code&gt;document_type&lt;/code&gt; to the type of instance that this log belongs to, which could later help us while indexing our logs inside Elasticsearch.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;filebeat&lt;/span&gt;:
  &lt;span class=&quot;hljs-attribute&quot;&gt;prospectors&lt;/span&gt;:
    -
      &lt;span class=&quot;hljs-attribute&quot;&gt;document_type&lt;/span&gt;: trader_dashboard
      &lt;span class=&quot;hljs-attribute&quot;&gt;paths&lt;/span&gt;:
        - /var/log/vertx.log
      &lt;span class=&quot;hljs-attribute&quot;&gt;multiline&lt;/span&gt;:
        &lt;span class=&quot;hljs-attribute&quot;&gt;pattern&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;^[0-9]+&quot;&lt;/span&gt;
        &lt;span class=&quot;hljs-attribute&quot;&gt;negate&lt;/span&gt;: true
        &lt;span class=&quot;hljs-attribute&quot;&gt;match&lt;/span&gt;: after
&lt;span class=&quot;hljs-attribute&quot;&gt;output&lt;/span&gt;:
  &lt;span class=&quot;hljs-attribute&quot;&gt;logstash&lt;/span&gt;:
    &lt;span class=&quot;hljs-attribute&quot;&gt;enabled&lt;/span&gt;: true
    &lt;span class=&quot;hljs-attribute&quot;&gt;hosts&lt;/span&gt;:
      - &lt;span class=&quot;hljs-attribute&quot;&gt;elk&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5044&lt;/span&gt;
    &lt;span class=&quot;hljs-attribute&quot;&gt;timeout&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;
    &lt;span class=&quot;hljs-attribute&quot;&gt;tls&lt;/span&gt;:
      &lt;span class=&quot;hljs-attribute&quot;&gt;insecure&lt;/span&gt;: false
      &lt;span class=&quot;hljs-attribute&quot;&gt;certificate_authoritites&lt;/span&gt;:
        - /etc/pki/tls/certs/logstash-beats.crt&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;elk-configuration&quot;&gt;ELK configuration&lt;/h2&gt;
&lt;p&gt;To take fully advantage of the ELK stack with respect to Vert.x and our app logs, we need to configure each of its individual components, namely Logstash, Elasticsearch and Kibana.&lt;/p&gt;
&lt;h3 id=&quot;logstash&quot;&gt;Logstash&lt;/h3&gt;
&lt;p&gt;Logstash is the component within the ELK stack that is in charge of aggregating the logs from each of the sources and forwarding them to the Elasticsearch instance.&lt;br&gt;Configuring Logstash is straightforward with the help of the specific input and output plugins for Beats and Elasticsearch, respectively.
In the previous section we mentioned that Filebeat could be easily coupled with Logstash. Now, we see that this can be done by just specifying &lt;code&gt;Beat&lt;/code&gt; as the input plugin and set the parameters needed to be reached by our shippers (listening port, ssl key and certificate location).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;input {
  beats {
    port =&gt; &lt;span class=&quot;hljs-number&quot;&gt;5044&lt;/span&gt;
    ssl =&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
    ssl_certificate =&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;/etc/pki/tls/certs/logstash-beats.crt&quot;&lt;/span&gt;
    ssl_key =&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;/etc/pki/tls/private/logstash-beats.key&quot;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we are ready to receive logs from the app, we can use Logstash filtering capabilities to specify the format of our logs and extract the fields so they can be indexed more efficiently by Elasticsearch.&lt;br&gt;The &lt;code&gt;grok&lt;/code&gt; filtering plugin comes handy in this situation. This plugin allows to declare the logs format using predefined and customized patterns based in regular expressions allowing to declare new fields from the information extracted from each log line. In the following block, we instruct Logstash to recognize our Log4j pattern inside a &lt;code&gt;message&lt;/code&gt; field, which contains the log message shipped by Filebeat. After that, the &lt;code&gt;date&lt;/code&gt; filtering plugin parses the &lt;code&gt;timestamp&lt;/code&gt; field extracted in the previous step and replaces it for the one set by Filebeat after reading the log output file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;filter {
  grok {
    &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;_on_match =&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
    match =&gt;  [ &lt;span class=&quot;hljs-string&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%{LOG4J}&quot;&lt;/span&gt;]
  }
  date{
    match =&gt; [ &lt;span class=&quot;hljs-string&quot;&gt;&quot;timestamp_string&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;ISO8601&quot;&lt;/span&gt;]
    remove_field =&gt; [ &lt;span class=&quot;hljs-string&quot;&gt;&quot;timestamp_string&quot;&lt;/span&gt; ]
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Log4j pattern is not included within the Logstash configuration, however, we can specify it using predefined data formats shipped with Logstash and adapt it to the specific log formats required in our application, as shown next.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-header&quot;&gt;# Pattern to match our Log4j format&lt;/span&gt;
SPACING (?:[\s]+)
LOGGER (?:[&lt;span class=&quot;hljs-link_label&quot;&gt;a-zA-Z$_&lt;/span&gt;][&lt;span class=&quot;hljs-link_reference&quot;&gt;a-zA-Z$_0-9&lt;/span&gt;]&lt;span class=&quot;hljs-emphasis&quot;&gt;*\.)*&lt;/span&gt;[&lt;span class=&quot;hljs-link_label&quot;&gt;a-zA-Z$_&lt;/span&gt;][&lt;span class=&quot;hljs-link_reference&quot;&gt;a-zA-Z$_0-9&lt;/span&gt;]*
LINE %{INT}?
LOG4J %{TIMESTAMP&lt;span class=&quot;hljs-emphasis&quot;&gt;_ISO8601:timestamp_&lt;/span&gt;string} %{LOGLEVEL:log&lt;span class=&quot;hljs-emphasis&quot;&gt;_level}%{SPACING}%{LOGGER:logger_&lt;/span&gt;name}:%{LINE:loc&lt;span class=&quot;hljs-emphasis&quot;&gt;_line} - %{JAVALOGMESSAGE:log_&lt;/span&gt;message}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we take a look at Logstash’s output configuration. This simply points to our elasticsearch instance, instructs it to provide a list of all cluster nodes (&lt;code&gt;sniffing&lt;/code&gt;), defines the name pattern for our indices, assigns the document type according to the metadata coming from Filebeat, and allows to define a custom index template for our data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;output {
  elasticsearch {
    hosts =&gt; [&lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;]
    sniffing =&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
    manage_template =&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
    index =&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;%{[@metadata][beat]}-%{+YYYY.MM.dd}&quot;&lt;/span&gt;
    document_type =&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;%{[@metadata][type]}&quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; =&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;/etc/filebeat/vertx_app_filebeat.json&quot;&lt;/span&gt;
    template_overwrite =&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;elasticsearch&quot;&gt;Elasticsearch&lt;/h3&gt;
&lt;p&gt;Elasticsearch is the central component that enables the efficient indexing and real-time search capabilities of the stack. To take the most advantage of Elasticsearch, we can provide an indexing template of our incoming logs, which can help to optimize the data storage and match the queries issued by Kibana at a later point.&lt;br&gt;In the example below, we see an index template that would be applied to any index matching the pattern &lt;code&gt;filebeat-*&lt;/code&gt;. Additionally, we declare our new log fields &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;log_level&lt;/code&gt;, &lt;code&gt;logger_name&lt;/code&gt;, and &lt;code&gt;log_message&lt;/code&gt;, which are set as &lt;code&gt;not_analyzed&lt;/code&gt; except for the last two that are set as &lt;code&gt;analyzed&lt;/code&gt; allowing to perform queries based on regular expressions and not restricted to query the full text.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;mappings&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;{
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;_default_&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;{
      &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;_all&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;{
        &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;enabled&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,
        &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;norms&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;{
          &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;enabled&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
        &lt;/span&gt;}
      &lt;/span&gt;}&lt;/span&gt;,
      &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;dynamic_templates&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;[
        {
          &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;template1&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;{
            &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;mapping&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;{
              &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;doc_values&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,
              &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;ignore_above&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1024&lt;/span&gt;&lt;/span&gt;,
              &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;index&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;not_analyzed&quot;&lt;/span&gt;&lt;/span&gt;,
              &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;{dynamic_type}&quot;&lt;/span&gt;
            &lt;/span&gt;}&lt;/span&gt;,
            &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;match&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;
          &lt;/span&gt;}
        &lt;/span&gt;}
      ]&lt;/span&gt;,
      &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;properties&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;{
        &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;@timestamp&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;{
          &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;date&quot;&lt;/span&gt;
        &lt;/span&gt;}&lt;/span&gt;,
        &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;offset&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;{
          &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;long&quot;&lt;/span&gt;&lt;/span&gt;,
          &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;doc_values&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;
        &lt;/span&gt;}&lt;/span&gt;,
        &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;{ &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;index&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;not_analyzed&quot;&lt;/span&gt; &lt;/span&gt;}&lt;/span&gt;,
        &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;host&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;{ &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;index&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;not_analyzed&quot;&lt;/span&gt; &lt;/span&gt;}&lt;/span&gt;,
        &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;log_level&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;{ &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;index&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;not_analyzed&quot;&lt;/span&gt; &lt;/span&gt;}&lt;/span&gt;,
        &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;logger_name&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;{ &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;index&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;analyzed&quot;&lt;/span&gt; &lt;/span&gt;}&lt;/span&gt;,
        &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;log_message&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;{ &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;index&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;analyzed&quot;&lt;/span&gt; &lt;/span&gt;}
      &lt;/span&gt;}
    &lt;/span&gt;}
  &lt;/span&gt;}&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;settings&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;{
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;index.refresh_interval&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;5s&quot;&lt;/span&gt;
  &lt;/span&gt;}&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;template&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;filebeat-*&quot;&lt;/span&gt;
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;kibana&quot;&gt;Kibana&lt;/h3&gt;
&lt;p&gt;Although we could fetch all our logs from Elasticsearch through its API, Kibana is a powerful tool that allows a more friendly query and visualization.
Besides the option to query our data through the available indexed field names and search boxes allowing typing specific queries, Kibana allows creating our own &lt;em&gt;Visualizations&lt;/em&gt; and &lt;em&gt;Dashboards&lt;/em&gt;. Combined, they represent a powerful way to display data and gain insight in a customized manner.
The accompanied demo ships with a couple of sample dashboards and visualizations that take advantage of the log fields that we specified in our index template and throw valuable insight. This includes: visualizing the number of log messages received by ELK, observe the proportion of messages that each log source produces, and directly find out the sources of error logs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blog/centralized-logging-using-elk/kibana-dashboard.png&quot; alt=&quot;Kibana Dashboard&quot; style=&quot;width: 70%; display: block; margin: auto;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;log-shipping-challenge&quot;&gt;Log shipping challenge&lt;/h2&gt;
&lt;p&gt;The solution presented here relied on Filebeat to ship log data to Logstash. However, if you are familiar with the Log4j framework you may be aware that there exists a &lt;em&gt;SocketAppender&lt;/em&gt; that allows to write log events directly to a remote server using a TCP connection. Although including the Filebeat + Logstash combination  may sound an unnecessary overhead to the logging pipeline, they provide a number of benefits in comparison to the Log4j socket alternative:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The SocketAppender relies on the specific serialization of Log4j’s &lt;em&gt;LogEvent&lt;/em&gt; objects, which is no an interchangeable format as JSON, which is used by the Beats solution. Although there are &lt;a href=&quot;https://github.com/majikthys/log4j2-logstash-jsonevent-layout&quot;&gt;attempts&lt;/a&gt; to output the logs in a JSON format for Logstash, it doesn’t support multiline logs, which results in messages being split into different events by Logstash. On the other hand, there is no official nor stable &lt;a href=&quot;https://www.elastic.co/guide/en/logstash/current/input-plugins.html&quot;&gt;input plugin&lt;/a&gt; for Log4j version 2.&lt;/li&gt;
&lt;li&gt;While enabling Log4j’s async logging mode in an application delegates logging operations to separate threads, given their coexistence in the same JVM there is still the risk of data loss in case of a sudden JVM termination without proper log channel closing.&lt;/li&gt;
&lt;li&gt;Filebeat is a data shipper designed to deal with many constraints that arise in distributed environments in a reliable manner, therefore it provides options to tailor and scale this operation to our needs: the possibility to load balance between multiple Logstash instances, specify the number of simultaneous Filebeat workers that ship log files, and specify a compression level in order to reduce the consumed bandwidth. Besides that, logs can be shipped in specific batch sizes, with maximum amount of retries, and specifying a connection timeout.&lt;/li&gt;
&lt;li&gt;Lastly, although Filebeat can forward logs directly to Elasticsearch, using Logstash as an intermediary offers the possibility to collect logs from diverse sources (e.g., system metrics).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;
&lt;p&gt;This post is accompanied by a demo based on the Vert.x Microservices &lt;a href=&quot;http://vertx-lab.dynamis-technologies.com/&quot;&gt;workshop&lt;/a&gt;, where each of them is shipped in a Docker container simulating a distributed system composed of independent addressable nodes.&lt;br&gt;Also, the ELK stack is provisioned using a preconfigured Docker image by &lt;a href=&quot;https://github.com/spujadas&quot;&gt;Sébastien Pujadas&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Following the guidelines in this post, this demo configures each of the Microservices of the workshop, sets up a Filebeat process on each of them to ship the logs to a central container hosting the ELK stack.&lt;/p&gt;
&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;
&lt;p&gt;In order to run this demo, it is necessary to have Docker installed, then proceed with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cloning or downloading the demo &lt;a href=&quot;https://github.com/ricardohmon/vertx-elk&quot;&gt;repository&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Separately, obtaining the source code of the &lt;a href=&quot;https://github.com/ricardohmon/vertx-microservices-workshop/tree/elk-demo&quot;&gt;branch&lt;/a&gt; of the Microservices workshop adapted for this demo.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;building-the-example&quot;&gt;Building the example&lt;/h3&gt;
&lt;p&gt;The Docker images belonging to the Vert.x Microservices workshop need to be built separately to this project before this project can be launched.&lt;/p&gt;
&lt;h3 id=&quot;building-the-vert-x-microservices-workshop-docker-images-&quot;&gt;Building the Vert.x Microservices workshop Docker images.&lt;/h3&gt;
&lt;p&gt;Build the &lt;em&gt;root&lt;/em&gt; project and the &lt;em&gt;Trader Dashboard&lt;/em&gt; followed by each of the modules contained in the solution folder. Issue the following commands for this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;mvn clean install
cd trader-dashboard
mvn &lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;docker:&lt;/span&gt;build
cd ..&lt;span class=&quot;hljs-regexp&quot;&gt;/solution/&lt;/span&gt;audit-service
mvn &lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;docker:&lt;/span&gt;build
cd ../compulsive-traders
mvn &lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;docker:&lt;/span&gt;build
cd ../portfolio-service
mvn &lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;docker:&lt;/span&gt;build
cd ..&lt;span class=&quot;hljs-regexp&quot;&gt;/quote-generator/&lt;/span&gt;
mvn &lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;docker:&lt;/span&gt;build&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;running-the-example&quot;&gt;Running the example&lt;/h3&gt;
&lt;p&gt;After building the previous images, build and run the example in &lt;code&gt;vertx-elk&lt;/code&gt; using the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;docker-compose &lt;span class=&quot;hljs-keyword&quot;&gt;up&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;the-demo&quot;&gt;The demo&lt;/h3&gt;
&lt;p&gt;You can watch the demo in action in the following screencast:&lt;/p&gt;
&lt;div class=&quot;embed-responsive embed-responsive-16by9&quot;&gt;
&lt;iframe class=&quot;embed-responsive-item&quot; src=&quot;https://www.youtube.com/embed/8P-MgXSujes&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The ELK stack is a powerful set of tools that ease the aggregation of logs coming from distributed services into a central server. Its main pillar, Elasticsearch, provides the indexing and search capabilities of our log data. Also, it is accompanied by the convenient input/output components: Logstash, which can be flexibly configured to accept different data sources; and Kibana, which can be customized to present the information in the most convenient way.&lt;/p&gt;
&lt;p&gt;Logstash has been designed to work seamlessly with Filebeat, the log shipper which represents a robust solution that can be adapted to our applications without having to make &lt;em&gt;significant&lt;/em&gt; changes to our architecture. In addition, Logstash can accept varied types of sources, filter the data, and process it before delivering to Elasticsearch. This flexibility comes with the price of having extra elements in our log aggregation pipeline, which can represent an increase of processing overhead or a point-of-failure. This additional overhead could be avoided if an application would be capable of delivering its log output directly to Elasticsearch.&lt;/p&gt;
&lt;p&gt;Happy logging!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Thu, 08 Sep 2016 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/centralized-logging-for-vert-x-applications-using-the-elk-stack</link>
          <guid isPermaLink="true">https://vertx.io/blog/centralized-logging-for-vert-x-applications-using-the-elk-stack</guid>
          <author>
            <name>ricardohmon</name>
            <uri>http://github.com/ricardohmon</uri>
          </author>
        </item>
      
        <item>
          <title>Vert.x Blueprint Tutorials</title>
          <description>
      &lt;article&gt;&lt;p&gt;The Vert.x Blueprint project aims to provide guidelines to Vert.x users to implement various applications such as message-based applications and microservices. This post introduces the content of each blueprints.&lt;/p&gt;
&lt;p&gt;This work has been done in the context of a &lt;a href=&quot;https://developers.google.com/open-source/gsoc/&quot;&gt;Google Summer of Code project&lt;/a&gt; .&lt;/p&gt;
&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;The blueprint project contains three parts: &lt;strong&gt;Todo Backend&lt;/strong&gt;, &lt;strong&gt;Vert.x Kue&lt;/strong&gt; and &lt;strong&gt;Online Shopping Microservice&lt;/strong&gt;. Both runnable code and very detailed documents and tutorials (both in English and Chinese) are provided.&lt;/p&gt;
&lt;h1 id=&quot;vert-x-blueprint-todo-backend&quot;&gt;Vert.x Blueprint - Todo Backend&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Repository&lt;/strong&gt;: &lt;a href=&quot;https://github.com/sczyh30/vertx-blueprint-todo-backend&quot;&gt;sczyh30/vertx-blueprint-todo-backend&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This blueprint is a todo-backend implementation using Vert.x and various persistence (e.g. Redis or MySQL). It is intended to be an introduction to basic Vert.x web RESTful service development. From this blueprint, developers  learn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is Vert.x and its principles&lt;/li&gt;
&lt;li&gt;What is and how to use &lt;code&gt;Verticle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;How to develop a REST API using &lt;a href=&quot;http://vertx.io/docs/vertx-web/java/&quot;&gt;Vert.x Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How to make use of &lt;strong&gt;asynchronous development model&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Future&lt;/code&gt;-based asynchronous patterns&lt;/li&gt;
&lt;li&gt;How to use persistence such as &lt;em&gt;Redis&lt;/em&gt; and &lt;em&gt;MySQL&lt;/em&gt; with the help of Vert.x async data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The tutorials are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sczyh30.github.io/vertx-blueprint-todo-backend/&quot;&gt;Vert.x Blueprint - Todo Backend (English version)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sczyh30.github.io/vertx-blueprint-todo-backend/cn/&quot;&gt;Vert.x Blueprint - Todo Backend (Chinese version)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sczyh30/vertx-blueprint-todo-backend/master/docs/img/vertx-todobackend-ui.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;vert-x-blueprint-vert-x-kue&quot;&gt;Vert.x Blueprint - Vert.x Kue&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Repository&lt;/strong&gt;: &lt;a href=&quot;https://github.com/sczyh30/vertx-blueprint-job-queue&quot;&gt;sczyh30/vertx-blueprint-job-queue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This blueprint is a priority job queue developed with Vert.x and backed by Redis. It’s a Vert.x implementation version of &lt;a href=&quot;https://github.com/Automattic/kue&quot;&gt;Automattic/kue&lt;/a&gt; that can be used in production.&lt;/p&gt;
&lt;p&gt;The list of features provided by Vert.x Kue is available here: &lt;a href=&quot;https://github.com/sczyh30/vertx-blueprint-job-queue/blob/master/docs/en/vertx-kue-features-en.md&quot;&gt;Vert.x Kue Features&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This blueprint is intended to be an introduction to message-based application development using Vert.x. From this blueprint, developers learn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to make use of &lt;strong&gt;Vert.x Event Bus&lt;/strong&gt; (distributed)&lt;/li&gt;
&lt;li&gt;How to develop message based applications with Vert.x&lt;/li&gt;
&lt;li&gt;Event and message patterns with the event bus (Pub/sub, point to point)&lt;/li&gt;
&lt;li&gt;How to design clustered Vert.x applications&lt;/li&gt;
&lt;li&gt;How to design and implement a job queue&lt;/li&gt;
&lt;li&gt;How to use &lt;strong&gt;Vert.x Service Proxy&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;More complex usage of &lt;a href=&quot;http://vertx.io/docs/vertx-redis-client/java/&quot;&gt;Vert.x Redis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The tutorial are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;English version&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sczyh30.github.io/vertx-blueprint-job-queue/kue-core/index.html&quot;&gt;Vert.x Kue Core Tutorial - English Version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sczyh30.github.io/vertx-blueprint-job-queue/kue-http/index.html&quot;&gt;Vert.x Kue Web Tutorial - English Version&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chinese version&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sczyh30.github.io/vertx-blueprint-job-queue/cn/kue-core/index.html&quot;&gt;Vert.x 蓝图 - Vert.x Kue (Core部分)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sczyh30.github.io/vertx-blueprint-job-queue/cn/kue-http/index.html&quot;&gt;Vert.x 蓝图 - Vert.x Kue (Web部分)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sczyh30/vertx-blueprint-job-queue/master/docs/images/vertx_kue_ui_1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;vert-x-blueprint-online-shopping-microservice&quot;&gt;Vert.x Blueprint - Online Shopping Microservice&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Repository&lt;/strong&gt;: &lt;a href=&quot;https://github.com/sczyh30/vertx-blueprint-microservice&quot;&gt;sczyh30/vertx-blueprint-microservice&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This blueprint is a micro-shop microservice application developed with Vert.x. It is intended to be an illustration on how to develop microservice applications using Vert.x. From this blueprint, developers learn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microservice development with Vert.x&lt;/li&gt;
&lt;li&gt;Asynchronous development model&lt;/li&gt;
&lt;li&gt;Reactive patterns&lt;/li&gt;
&lt;li&gt;Event sourcing patterns&lt;/li&gt;
&lt;li&gt;Asynchronous RPC on the clustered event bus&lt;/li&gt;
&lt;li&gt;Various type of services (e.g. HTTP endpoint, message source, event bus service)&lt;/li&gt;
&lt;li&gt;Vert.x Service Discovery&lt;/li&gt;
&lt;li&gt;Vert.x Circuit Breaker&lt;/li&gt;
&lt;li&gt;Microservice with polyglot persistence&lt;/li&gt;
&lt;li&gt;How to implement an API Gateway&lt;/li&gt;
&lt;li&gt;Global authentication (OAuth 2 + Keycloak)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And many more things…&lt;/p&gt;
&lt;p&gt;The tutorial are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;English version&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sczyh30.github.io/vertx-blueprint-microservice/index.html&quot;&gt;Vert.x Microservice Blueprint Tutorial - Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sczyh30.github.io/vertx-blueprint-microservice/api-gateway.html&quot;&gt;Vert.x Microservice Blueprint Tutorial - API Gateway&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chinese version&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sczyh30.github.io/vertx-blueprint-microservice/cn/index.html&quot;&gt;Vert.x 蓝图 - Micro Shop 微服务实战 (开发篇)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sczyh30.github.io/vertx-blueprint-microservice/cn/api-gateway.html&quot;&gt;Vert.x 蓝图 - Micro Shop 微服务实战 (API Gateway)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sczyh30/vertx-blueprint-microservice/master/docs/images/shopping-spa-product-detail.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sczyh30/vertx-blueprint-microservice/master/docs/images/monitor-dashboard.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Enjoy the code carnival with Vert.x!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Thu, 01 Sep 2016 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/vert-x-blueprint-tutorials</link>
          <guid isPermaLink="true">https://vertx.io/blog/vert-x-blueprint-tutorials</guid>
          <author>
            <name>sczyh30</name>
            <uri>http://github.com/sczyh30</uri>
          </author>
        </item>
      
        <item>
          <title>Vert.x fall conferences</title>
          <description>
      &lt;article&gt;&lt;p&gt;A lot of Vert.x conferences are planned this fall around the world, here is a quick recap of these events:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaZone&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://2016.javazone.no/program/lets-build-a-scalable-async-vert-x-app-in-60-min&quot;&gt;Let’s build a scalable async Vert.x app in &lt; 60 min&lt;/a&gt; - Paulo Lopes (Wednesday, 18:20 - 19:20)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Geecon Reactive in Sopot&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://2016.reactive.geecon.org/#bio&quot;&gt;Reactive back-pressure with Vert.x&lt;/a&gt; - Julien Viet (9th of September, 11:45 - 12:30)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JavaOne&lt;ul&gt;
&lt;li&gt;Reactive Microservices with Vert.x - Burr Sutter (Thursday, Sep 22, 4:00 p.m. - 5:00 p.m.)&lt;/li&gt;
&lt;li&gt;Reactive Distributed Applications with Vert.x - Clement Escoffier (Wednesday, Sep 21, 8:30 a.m. - 9:30 a.m.)&lt;/li&gt;
&lt;li&gt;Vert.x: From Zero to (Micro-) Hero (Hands-on Lab) - Clement Escoffier (Thursday, Sep 22, 12:00 p.m. - 2:00 p.m.)&lt;/li&gt;
&lt;li&gt;Go Reactive with Vert.x in Oracle Application Container Cloud - Edson Yanaga (Monday, Sep 19, 5:30 p.m. - 6:30 p.m.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reactive Summit&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://reactivesummit2016.sched.org/event/7emt/reactive-polyglot-microservices-with-openshift-and-vertx&quot;&gt;Reactive Polyglot Microservices with OpenShift and Vert.x&lt;/a&gt; - Clement Escoffier (Tuesday, October 4, 11:20am - 12:10pm)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Devoxx BE&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://cfp.devoxx.be/2016/talk/BED-6160/Better_performance_with_HTTP%2F2&quot;&gt;Better performance with HTTP/2&lt;/a&gt; - Julien Viet&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cfp.devoxx.be/2016/talk/HKC-9910/Reactive_Microservices_with_Vert.x&quot;&gt;Reactive Microservices with Vert.x&lt;/a&gt; - Edison Yanaga and Burr Sutter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are going at one of these conferences, don’t miss the opportunity to learn more about Vert.x!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Fri, 26 Aug 2016 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/vert-x-fall-conferences</link>
          <guid isPermaLink="true">https://vertx.io/blog/vert-x-fall-conferences</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Vert.x 3.3.2 is released !</title>
          <description>
      &lt;article&gt;&lt;p&gt;We have just released Vert.x 3.3.2, the first bug fix release of Vert.x 3.3.x.&lt;/p&gt;
&lt;p&gt;We have first released 3.3.1 that fixed a few bugs, but a couple of new bugs were discovered after 3.3.1 was tagged but not announced, we decided to release a 3.3.2 to fix the discovered bugs, as these bugs were preventing usage of Vert.x.&lt;/p&gt;
&lt;p&gt;Vert.x 3.3.1 release notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.3.1---Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.3.1---Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vert.x 3.3.2 release notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.3.2-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.3.2-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These releases do not contain breaking changes.&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.3.2%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.3.2/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding !&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Tue, 12 Jul 2016 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/vert-x-3-3-2-is-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/vert-x-3-3-2-is-released</guid>
          <author>
            <name>cescoffier</name>
            <uri>http://github.com/cescoffier</uri>
          </author>
        </item>
      
        <item>
          <title>Vert.x 3.3.0 is released !</title>
          <description>
      &lt;article&gt;&lt;p&gt;That was a long run …. but here we are. We are very pleased to announce the release of Vert.x 3.3.0!&lt;/p&gt;
&lt;p&gt;This release is huge with lots of new features, improvements, and obviously bug fixes. We won’t detail all the new features here (some are highlighted below), and full release notes are available: &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.3.0---Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.3.0---Release-Notes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Breaking changes are there: &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.3.0---Breaking-Changes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.3.0---Breaking-Changes&lt;/a&gt;. Be sure to read them before migrating.&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s highlight some of the major features shipped with this release.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vertx 3.3.0 is the first version to support &lt;strong&gt;HTTP2&lt;/strong&gt; (client and server). You can now configure HTTP servers and clients to use HTTP2. Proxy support for TCP and HTTP client has also been added.&lt;/li&gt;
&lt;li&gt;This version shows also the introduction of a bridge with &lt;strong&gt;Apache Camel&lt;/strong&gt;. So, integrating Vert.x applications with legacy systems (using EIP) has never been so easy.&lt;/li&gt;
&lt;li&gt;Several new components have been developed to implement microservice-based applications. First, a pluggable &lt;strong&gt;service discovery&lt;/strong&gt; is now available. An implementation of the &lt;strong&gt;circuit breaker&lt;/strong&gt; pattern has also been provided.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AMQP 1.0&lt;/strong&gt; support has been also integrated thanks to a bridge to send and receive messages from AMQP. A client has also been shipped to interact directly with an AMQP broker or router.&lt;/li&gt;
&lt;li&gt;New metrics has also been introduced to ease the monitoring of running applications. For instance, it’s now possible to monitor the thread usage in the &lt;strong&gt;worker thread pool&lt;/strong&gt; and in the &lt;strong&gt;JDBC connection pools&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;With this version, you can configure the TCP aspects of the event bus for, for instance, use SSL. Also notice a bridge between the  event bus of Vert.x 2 and  the one from Vert.x 3.&lt;/li&gt;
&lt;li&gt;Most of the delivered components are now deployable in &lt;strong&gt;OSGi&lt;/strong&gt; environments. So you can easily integrate Vert.x in Apache Karaf, Service Mix, or Apache Sling.&lt;/li&gt;
&lt;li&gt;Vert.x Unit usability has been greatly improved. It is now possible to write test using Hamcrest, AssertJ, Rest Assured, or any assertion libraries you want.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Many thanks to all the committers and community whose contributions made this possible, especially to Alex Lehman, Paul Bakker, Robbie Gemmel, Claus Ibsen, Michael Kremer, and many many other!&lt;/p&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.3.0%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.3.0/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Just a word about the future. As we did last, year, a poll will be organized in the next few weeks to collect ideas and prioritize the Vert.x 3.4 and beyond roadmap. Stay tuned, we love hearing about your ideas and issues.&lt;/p&gt;
&lt;p&gt;Happy coding !&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Fri, 24 Jun 2016 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/vert-x-3-3-0-is-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/vert-x-3-3-0-is-released</guid>
          <author>
            <name>cescoffier</name>
            <uri>http://github.com/cescoffier</uri>
          </author>
        </item>
      
        <item>
          <title>Vertx 3 and Keycloak tutorial</title>
          <description>
      &lt;article&gt;&lt;p&gt;With the upcoming release of Vert.x 3.3 securing your application with Keycloak is even easier than before.&lt;/p&gt;
&lt;h2 id=&quot;about-keycloak&quot;&gt;About Keycloak&lt;/h2&gt;
&lt;p&gt;Keycloak describes itself as an &lt;em&gt;Open Source Identity and Access Management For Modern Applications and Services&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;With Keycloak you can quickly add &lt;em&gt;Authentication&lt;/em&gt; and &lt;em&gt;Authorization&lt;/em&gt; to your vert.x application. The easy way is to
setup a realm on keycloak and once you’re done, export the configuration to your vert.x app.&lt;/p&gt;
&lt;p&gt;This how you would secure your app:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;create a &lt;code&gt;OAuth2Auth&lt;/code&gt; instance with &lt;code&gt;OAuth2Auth.createKeycloak(...)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;copy your config from the keycloak admin GUI&lt;/li&gt;
&lt;li&gt;setup your callback according to what you entered on keycloak&lt;/li&gt;
&lt;li&gt;secure your resource with &lt;code&gt;router.route(&quot;/protected/*&quot;).handler(oauth2)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;screencast&quot;&gt;Screencast&lt;/h2&gt;
&lt;p&gt;The following screencast explains how you can do this from scratch:&lt;/p&gt;
&lt;iframe width=&quot;1280&quot; height=&quot;720&quot; src=&quot;https://www.youtube.com/embed/c20igjL69Mo&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Don’t forget to follow our &lt;a href=&quot;https://www.youtube.com/channel/UCGN6L3tRhs92Uer3c6VxOSA&quot;&gt;youtube channel&lt;/a&gt;!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Wed, 30 Mar 2016 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/vertx-3-and-keycloak-tutorial</link>
          <guid isPermaLink="true">https://vertx.io/blog/vertx-3-and-keycloak-tutorial</guid>
          <author>
            <name>pmlopes</name>
            <uri>http://github.com/pmlopes</uri>
          </author>
        </item>
      
        <item>
          <title>Vertx 3 and Azure cloud platform tutorial</title>
          <description>
      &lt;article&gt;&lt;p&gt;Vert.x 3.2.1 applications can quickly be deployed on &lt;a href=&quot;http://portal.azure.com/&quot;&gt;Microsoft Azure&lt;/a&gt;. Deployment is independent of your build so it is all about configuration.&lt;/p&gt;
&lt;h2 id=&quot;about-azure&quot;&gt;About Azure&lt;/h2&gt;
&lt;p&gt;Azure by design does not support &lt;code&gt;multicast&lt;/code&gt; on the network virtualization level, however all virtual machines defined
on the same group are deployed on the same network (by default), so &lt;code&gt;TCP-IP&lt;/code&gt; discovery can be enabled and quickly setup
to form a cluster.&lt;/p&gt;
&lt;p&gt;This how you would deploy your app:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;create a &lt;code&gt;fat-jar&lt;/code&gt; with your app&lt;/li&gt;
&lt;li&gt;create a &lt;code&gt;cluster.xml&lt;/code&gt; with tcp-ip discovery&lt;/li&gt;
&lt;li&gt;run your app with: &lt;code&gt;cp folder_of_your_cluster_xml_file -cluster -cluster-host VM_PRIVATE_IP&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;screencast&quot;&gt;Screencast&lt;/h2&gt;
&lt;p&gt;The following screencast &lt;/p&gt;
&lt;div class=&quot;embed-responsive embed-responsive-16by9&quot;&gt;
&lt;iframe class=&quot;embed-responsive-item&quot; src=&quot;https://www.youtube.com/embed/nGQs_swWwAM&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Don’t forget to follow our &lt;a href=&quot;https://www.youtube.com/channel/UCGN6L3tRhs92Uer3c6VxOSA&quot;&gt;youtube channel&lt;/a&gt;!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Thu, 17 Mar 2016 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/vertx-3-and-azure-cloud-platform-tutorial</link>
          <guid isPermaLink="true">https://vertx.io/blog/vertx-3-and-azure-cloud-platform-tutorial</guid>
          <author>
            <name>pmlopes</name>
            <uri>http://github.com/pmlopes</uri>
          </author>
        </item>
      
        <item>
          <title>Vert.x 3.2.1 is released !</title>
          <description>
      &lt;article&gt;&lt;p&gt;We are pleased to announce the release of Vert.x 3.2.1!&lt;/p&gt;
&lt;p&gt;The release contains many bug fixes and a ton of small improvements, such as future composition, improved Ceylon support, Stomp virtual host support, performance improvements… Full release notes can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.2.1---Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.2.1---Release-Notes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Breaking changes are here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.2.1---Breaking-Changes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.2.1---Breaking-Changes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dockers images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;
The vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Many thanks to all the committers and community whose contributions made this possible.&lt;/p&gt;
&lt;p&gt;Next stop is Vert.x 3.3.0 which we hope to have out in May 2016.&lt;/p&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.2.1%22&quot;&gt;Maven Central&lt;/a&gt;
 and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.2.1/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding !&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Fri, 05 Feb 2016 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/vert-x-3-2-1-is-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/vert-x-3-2-1-is-released</guid>
          <author>
            <name>cescoffier</name>
            <uri>http://github.com/cescoffier</uri>
          </author>
        </item>
      
        <item>
          <title>Intro to Vert.x Shell</title>
          <description>
      &lt;article&gt;&lt;p&gt;Vert.x Shell provides an extensible command line for Vert.x, accessible via SSH, Telnet or a nice Web interface. Vert.x Shell comes out of the box with plenty of commands for Vert.x which makes it very handy for doing simple management operations like deploying a Verticle or getting the list of deployed Verticles. One power feature of Vert.x Shell is its extensibility: one can easily augment Vert.x Shell with its own commands. Let’s build an &lt;em&gt;http-client&lt;/em&gt; in JavaScript!&lt;/p&gt;
&lt;h2 id=&quot;booting-the-shell&quot;&gt;Booting the Shell&lt;/h2&gt;
&lt;p&gt;Vert.x Shell can be started in a couple of lines depending on the connectors you configure. The documentation provides several examples showing the &lt;a href=&quot;http://vertx.io/docs/vertx-shell/js/#_programmatic_service&quot;&gt;Shell Service configuration&lt;/a&gt;. For testing our command, we will use the Telnet protocol because it is easy to configure and use, so we just need to copy the corresponding section in &lt;em&gt;vertx-http-client.js&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;var ShellService = require(&lt;span class=&quot;hljs-string&quot;&gt;&quot;vertx-shell-js/shell_service&quot;&lt;/span&gt;);
var &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;service&lt;/span&gt; = &lt;span class=&quot;hljs-title&quot;&gt;ShellService&lt;/span&gt;.create(vertx, &lt;/span&gt;{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;telnetOptions&quot;&lt;/span&gt; : {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;host&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;,
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;port&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;4000&lt;/span&gt;
  }
});
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;service&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;start&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can run it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-constant&quot;&gt;Juliens&lt;/span&gt;-&lt;span class=&quot;hljs-constant&quot;&gt;MacBook&lt;/span&gt;-&lt;span class=&quot;hljs-constant&quot;&gt;Pro&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:java&lt;/span&gt; julien&lt;span class=&quot;hljs-variable&quot;&gt;$ &lt;/span&gt;vertx run vertx-http-client.js
&lt;span class=&quot;hljs-constant&quot;&gt;Succeeded&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; deploying verticle&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And connect to the shell:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;Juliens-MacBook-Pro:&lt;span class=&quot;hljs-special&quot;&gt;~&lt;/span&gt; julien&lt;span class=&quot;hljs-formula&quot;&gt;$ telnet localhost 4000
Trying ::1...
telnet: connect to address ::1: Connection refused
Trying 127.0.0.1...
Connected to localhost.
Escape character is &#39;^&lt;span class=&quot;hljs-special&quot;&gt;]&lt;/span&gt;&#39;.
__      __ ______  _____  _______  __   __
&lt;span class=&quot;hljs-command&quot;&gt;\ &lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\ &lt;/span&gt;   / /|  ____||  _  &lt;span class=&quot;hljs-command&quot;&gt;\|&lt;/span&gt;__   __| &lt;span class=&quot;hljs-command&quot;&gt;\ &lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\ &lt;/span&gt;/ /
 &lt;span class=&quot;hljs-command&quot;&gt;\ &lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\ &lt;/span&gt; / / | |____ | :_) |   | |     &lt;span class=&quot;hljs-command&quot;&gt;\ &lt;/span&gt;  /
  &lt;span class=&quot;hljs-command&quot;&gt;\ &lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\/&lt;/span&gt; /  |  ____||   __/   | |      &gt; /
   &lt;span class=&quot;hljs-command&quot;&gt;\ &lt;/span&gt; /   | |____ | |&lt;span class=&quot;hljs-command&quot;&gt;\ &lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\ &lt;/span&gt;   | |     / //&lt;span class=&quot;hljs-command&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;hljs-command&quot;&gt;\/&lt;/span&gt;    |______||_| &lt;span class=&quot;hljs-command&quot;&gt;\_&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\ &lt;/span&gt;  |_| o  /_/ &lt;span class=&quot;hljs-command&quot;&gt;\_&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\
&lt;/span&gt;

%&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now already use the shell, the &lt;em&gt;help&lt;/em&gt; command lists the available commands.&lt;/p&gt;
&lt;h2 id=&quot;creating-a-command&quot;&gt;Creating a command&lt;/h2&gt;
&lt;p&gt;For the sake of simplicity we will write a single script that starts the Shell service and deploys our command. In the real world you would probably have the command in one file and the deployment in another.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://vertx.io/docs/vertx-shell/js/#_extending_vert_x_shell&quot;&gt;documentation&lt;/a&gt; explains how to add a new command to Vert.x shell, we can just copy this section and append it to the &lt;em&gt;vertx-http-client.js&lt;/em&gt; script:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; CommandBuilder = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;vertx-shell-js/command_builder&quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; CommandRegistry = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;vertx-shell-js/command_registry&quot;&lt;/span&gt;);

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; builder = CommandBuilder.command(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http-client&quot;&lt;/span&gt;);
builder.processHandler(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(process)&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-comment&quot;&gt;// Write a message to the console&lt;/span&gt;
  process.write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Implement the client\n&quot;&lt;/span&gt;);

  &lt;span class=&quot;hljs-comment&quot;&gt;// End the process&lt;/span&gt;
  process.end();
});

&lt;span class=&quot;hljs-comment&quot;&gt;// Register the command&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; registry = CommandRegistry.getShared(vertx);
registry.registerCommand(builder.build(vertx));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can use the command just to see it in action:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;% http-&lt;span class=&quot;hljs-keyword&quot;&gt;client&lt;/span&gt;
Implement the &lt;span class=&quot;hljs-keyword&quot;&gt;client&lt;/span&gt;
%&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;checking-arguments&quot;&gt;Checking arguments&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;http-client&lt;/em&gt; requires an &lt;code&gt;url&lt;/code&gt; argument, an argument check is performed at the beginning of the process handler:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Check the url argument&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (process.args().length &lt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {
  process.write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Missing URL\n&quot;&lt;/span&gt;).end();
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
}
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; url = process.args()[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;implementing-the-command&quot;&gt;Implementing the command&lt;/h2&gt;
&lt;p&gt;The final step of this tutorial is the actual implementation of the client logic based on Vert.x HttpClient:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Create the client request&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; request = client.getAbs(url, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(response)&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-comment&quot;&gt;// Print the response in the shell console&lt;/span&gt;
  response.handler(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(buffer)&lt;/span&gt; &lt;/span&gt;{
    process.write(buffer.toString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;));
  });

  &lt;span class=&quot;hljs-comment&quot;&gt;// End the command when the response ends&lt;/span&gt;
  response.endHandler(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    process.end();
  });
});

&lt;span class=&quot;hljs-comment&quot;&gt;// Set a request handler to end the command with error&lt;/span&gt;
request.exceptionHandler(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(err)&lt;/span&gt; &lt;/span&gt;{
  process.write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Error: &quot;&lt;/span&gt; + err.getMessage());
  process.end();
});

&lt;span class=&quot;hljs-comment&quot;&gt;// End the http request&lt;/span&gt;
request.end();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we can test the command in the shell:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;% http-client http://vertx.io
http-client http://vertx.io
&lt;!DOCTYPE html&gt;&lt;html lang=en&gt;&lt;head&gt;&lt;title&gt;Vert.x&lt;/title&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;...&lt;/span&gt;
/javascripts/sticky_header.js&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;%&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;finally&quot;&gt;Finally&lt;/h2&gt;
&lt;p&gt;We have seen how easy it is to extend Vert.x with a shell and create an &lt;em&gt;http-client&lt;/em&gt; custom command, you can get the full source code &lt;a href=&quot;https://gist.github.com/vietj/51ff223bfb7cfcbc97ce&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our command is very simple, it only implements the very minimum, in future posts we will improve the command with support with more HTTP methods, SSL support or header support with the the Vert.x CLI API.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 25 Jan 2016 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/intro-to-vert-x-shell</link>
          <guid isPermaLink="true">https://vertx.io/blog/intro-to-vert-x-shell</guid>
          <author>
            <name>vietj</name>
            <uri>http://github.com/vietj</uri>
          </author>
        </item>
      
        <item>
          <title>Using Hamcrest Matchers with Vert.x Unit</title>
          <description>
      &lt;article&gt;&lt;p&gt;Vert.x Unit is a very elegant library to test asynchronous applications developed with vert.x. However because of this asynchronous aspect, reporting test failures is not natural for JUnit users.  This is because, the failed assertions need to be reported to the &lt;em&gt;test context&lt;/em&gt;, controlling the execution (and so the outcome) of the test. In other words, in a Vert.x Unit test you cannot use the regular Junit assertions and assertion libraries. In this blog post, we propose a way to let you using Hamcrest matchers in Vert.x Unit tests.&lt;/p&gt;
&lt;h2 id=&quot;using-vert-x-unit&quot;&gt;Using Vert.x Unit&lt;/h2&gt;
&lt;p&gt;Vert.x Unit is a test library made to ensure the behavior of vert.x applications. It lets you implement tests checking asynchronous behavior.&lt;/p&gt;
&lt;p&gt;Vert.x Unit can be used with Junit. For this, you just need to add the following dependency to your project:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.vertx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;vertx-unit&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;3.2.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;scope&lt;/span&gt;&gt;&lt;/span&gt;test&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;scope&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are using Gradle, the dependency is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;testCompile&lt;/span&gt; ‘&lt;span class=&quot;hljs-tag&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.vertx&lt;/span&gt;&lt;span class=&quot;hljs-pseudo&quot;&gt;:vertx-unit&lt;/span&gt;&lt;span class=&quot;hljs-pseudo&quot;&gt;:3&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.2&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.0&lt;/span&gt;’&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are using an IDE, just add the vertx-unit jar to your project classpath.&lt;/p&gt;
&lt;p&gt;Obviously, you would need to add JUnit too.&lt;/p&gt;
&lt;p&gt;Notice that vertx-unit does not need JUnit, and can be used without it. Check the Vert.x Unit &lt;a href=&quot;http://vertx.io/docs/vertx-unit/java/&quot;&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2 id=&quot;vert-x-unit-example&quot;&gt;Vert.x Unit example&lt;/h2&gt;
&lt;p&gt;Let’s consider this very simple &lt;code&gt;Verticle&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyFirstVerticle&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AbstractVerticle&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Future future)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{
    vertx.createHttpServer()
        .requestHandler(req -&gt; req.response().end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello vert.x&quot;&lt;/span&gt;))
        .listen(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;, done -&gt; {
          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (done.failed()) {
            future.fail(done.cause());
          } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
            future.complete();
          }
        });
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It just creates a new HTTP server and when launched it notifies the &lt;code&gt;future&lt;/code&gt; of the completion.&lt;/p&gt;
&lt;p&gt;To test this verticle with Vert.x Unit you would write something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@RunWith&lt;/span&gt;(VertxUnitRunner.class)
&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyFirstVerticleTest&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Vertx vertx;

  &lt;span class=&quot;hljs-annotation&quot;&gt;@Before&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(TestContext context)&lt;/span&gt; &lt;/span&gt;{
    vertx = Vertx.vertx();
    vertx.deployVerticle(MyFirstVerticle.class.getName(),
      context.asyncAssertSuccess());
  }

  &lt;span class=&quot;hljs-annotation&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(TestContext context)&lt;/span&gt; &lt;/span&gt;{
    Async async = context.async();
    vertx.createHttpClient().get(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;)
      .handler(response -&gt; {
        context.assertEquals(&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, response.statusCode());
        response.bodyHandler(buffer -&gt; {
          context.assertEquals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello vert.x&quot;&lt;/span&gt;, buffer.toString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;));
          async.complete();
        });
      })
      .end();
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, the test class is annotated with &lt;code&gt;@RunWith(VertxUnitRunner.class)&lt;/code&gt;, instructing JUnit to use this special runner. This runner lets you inject a &lt;code&gt;TestContext&lt;/code&gt; parameter into every test methods (as well as &lt;code&gt;@Before&lt;/code&gt; and &lt;code&gt;@After&lt;/code&gt;) to handle the asynchronous aspect of the test.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;setUp&lt;/code&gt; method, it creates a new instance of &lt;code&gt;Vertx&lt;/code&gt; and deploy the verticle. Thanks to &lt;code&gt;context.asyncAssertSuccess()&lt;/code&gt;, it waits until the successful completion of the verticle deployment. Indeed, the deployment is asynchronous, and we must be sure that the verticle has been deployed and has completed its initialization before starting to test it.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;test()&lt;/code&gt; method creates an &lt;code&gt;Async&lt;/code&gt; object that will be used to report when the test has been completed. Then it creates an HTTP client to emit a request on the server from our verticle and check that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the HTTP code is &lt;code&gt;200 (OK)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the body is &lt;code&gt;hello vert.x&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As you can see, to implement the checks, the assertions method are called on the &lt;code&gt;TestContext&lt;/code&gt; object, which control the test execution. When everything has been tested, we call &lt;code&gt;async.complete()&lt;/code&gt; to end the test. If an assertion failed, the test is obviously stopped. This would not be the case if you would use regular Junit assertions.&lt;/p&gt;
&lt;h2 id=&quot;using-the-hamcrest-matchers&quot;&gt;Using the Hamcrest Matchers&lt;/h2&gt;
&lt;p&gt;In the previous example, we used the the assertions available from the &lt;code&gt;TestContext&lt;/code&gt; instance. However it provides a limited set of methods. Hamcrest is a library of matchers, which can be combined in to create flexible expressions of intent in tests. It is very convenient when testing complex applications.&lt;/p&gt;
&lt;p&gt;Hamcrest cannot be used directly as it would not report the failure on the &lt;code&gt;TestContext&lt;/code&gt;. For this purpose we create a &lt;code&gt;VertxMatcherAssert&lt;/code&gt; class:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;VertxMatcherAssert&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;T&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(TestContext context, T actual,
    Matcher&lt;? &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt; T&gt; matcher)&lt;/span&gt; &lt;/span&gt;{
    assertThat(context, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, actual, matcher);
  }

  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;T&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(TestContext context, String reason,
    T actual, Matcher&lt;? &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt; T&gt; matcher)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!matcher.matches(actual)) {
      Description description = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringDescription();
      description.appendText(reason)
          .appendText(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\nExpected: &quot;&lt;/span&gt;)
          .appendDescriptionOf(matcher)
          .appendText(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\n     but: &quot;&lt;/span&gt;);
      matcher.describeMismatch(actual, description);
      context.fail(description.toString());
    }
  }

  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(TestContext context, String reason,
    &lt;span class=&quot;hljs-keyword&quot;&gt;boolean&lt;/span&gt; assertion)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!assertion) {
      context.fail(reason);
    }
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This class provides &lt;code&gt;assertThat&lt;/code&gt; method that reports error on the given &lt;code&gt;TestContext&lt;/code&gt;. The complete code is available &lt;a href=&quot;https://gist.github.com/cescoffier/5cbf4c69aa094ac9b1a6&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With this class, we can re-implement our test as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;testWithHamcrest&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(TestContext context)&lt;/span&gt; &lt;/span&gt;{
  Async async = context.async();
  vertx.createHttpClient().get(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;).handler(response -&gt; {
    assertThat(context, response.statusCode(), is(&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;));
    response.bodyHandler(buffer -&gt; {
      assertThat(context, buffer.toString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;), is(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello vert.x&quot;&lt;/span&gt;));
      async.complete();
    });
  }).end();
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To ease the usage, I’ve added two &lt;em&gt;import static&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; io.vertx.unit.example.VertxMatcherAssert.assertThat;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; org.hamcrest.core.Is.is;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use any Hamcrest matcher, or even implement your own as soon as you use the &lt;code&gt;assertThat&lt;/code&gt; method provided by &lt;code&gt;VertxMatcherAssert&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post we have seen how you can combine Hamcrest and Vert.x Unit. So, you are not limited anymore by the set of assert methods provided by Vert.x Unit, and can use the whole expressiveness of Hamcrest Matchers.&lt;/p&gt;
&lt;p&gt;Don’t forget that you still can’t use the &lt;code&gt;assert&lt;/code&gt; methods from Junit, as they don’t report on the &lt;code&gt;TestContext&lt;/code&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 18 Jan 2016 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/using-hamcrest-matchers-with-vert-x-unit</link>
          <guid isPermaLink="true">https://vertx.io/blog/using-hamcrest-matchers-with-vert-x-unit</guid>
          <author>
            <name>cescoffier</name>
            <uri>http://github.com/cescoffier</uri>
          </author>
        </item>
      
        <item>
          <title>Real-time bidding with Websockets and Vert.x</title>
          <description>
      &lt;article&gt;&lt;p&gt;The expectations of users for interactivity with web applications have changed over the past few years.
Users during bidding in auction no longer want to press the refresh button to check if the price
has changed or the auction is over. This made bidding difficult and less fun.
Instead, they expect to see the updates in application in real-time.&lt;/p&gt;
&lt;p&gt;In this article I want to show how to create a simple application that provides real-time bidding.
We will use WebSockets, &lt;a href=&quot;https://github.com/sockjs/sockjs-client&quot;&gt;SockJS&lt;/a&gt; and Vert.x.&lt;/p&gt;
&lt;p&gt;We will create a front-end for fast bidding that communicates with a micro-service written in Java and based on Vert.x.&lt;/p&gt;
&lt;h2 id=&quot;what-are-websockets-&quot;&gt;What are Websockets?&lt;/h2&gt;
&lt;p&gt;WebSocket is asynchronous, bidirectional, full-duplex protocol that provides a communication channel over a single TCP connection.
With the &lt;a href=&quot;http://www.w3.org/TR/websockets/&quot;&gt;WebSocket API&lt;/a&gt; it provides bidirectional communication between the website and a remote server.&lt;/p&gt;
&lt;p&gt;WebSockets solve many problems which prevented the HTTP protocol from being suitable for use in modern,
real-time applications. Workarounds like polling are no longer needed, which simplifies application architecture.
WebSockets do not need to open multiple HTTP connections, they provide a reduction of unnecessary network traffic and reduce latency.&lt;/p&gt;
&lt;h2 id=&quot;websocket-api-vs-sockjs&quot;&gt;Websocket API vs SockJS&lt;/h2&gt;
&lt;p&gt;Unfortunately, WebSockets are not supported by all web browsers. However, there are libraries that provide a fallback
when WebSockets are not available. One such library is &lt;a href=&quot;https://github.com/sockjs/sockjs-client&quot;&gt;SockJS&lt;/a&gt;.
SockJS starts from trying to use the WebSocket protocol. However, if this is not possible,
it uses  a &lt;a href=&quot;https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https&quot;&gt;variety of browser-specific transport protocols&lt;/a&gt;.
SockJS is a library designed to work in all modern browsers and in environments that do not support WebSocket protocol,
for instance behind restrictive corporate proxy. SockJS provides an API similar to the standard WebSocket API.&lt;/p&gt;
&lt;h2 id=&quot;frontend-to-fast-bidding&quot;&gt;Frontend to fast bidding&lt;/h2&gt;
&lt;p&gt;Auction web page contains the bidding form and some simple JavaScript which loads current price from the service,
opens an event bus connection to the SockJS server and offers bidding.
HTML source code of sample web page on which we bid might look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs html&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;h3&lt;/span&gt;&gt;&lt;/span&gt;Auction 1&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;h3&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;error_message&quot;&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;div&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;form&lt;/span&gt;&gt;&lt;/span&gt;
    Current price:
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;current_price&quot;&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;span&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;div&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;my_bid_value&quot;&lt;/span&gt;&gt;&lt;/span&gt;Your offer:&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;label&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;my_bid_value&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;text&quot;&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;bid();&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;Bid&quot;&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;div&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;div&lt;/span&gt;&gt;&lt;/span&gt;
        Feed:
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;textarea&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;feed&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;rows&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;4&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;cols&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;50&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;readonly&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;textarea&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;div&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;form&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We use the &lt;code&gt;vertx-eventbus.js&lt;/code&gt; library to create a connection to the event bus.
&lt;code&gt;vertx-eventbus.js&lt;/code&gt; library is a part of the Vert.x distribution. &lt;code&gt;vertx-eventbus.js&lt;/code&gt; internally uses SockJS library
to send the data to the SockJS server. In the code snippet below we create an instance of the event bus.
The parameter to the constructor is the URI where to connect to the event bus.
Then we register the handler listening on address &lt;code&gt;auction.&lt;auction_id&gt;&lt;/code&gt;. Each client has a possibility of registering
at multiple addresses e.g. when bidding in the auction 1234, they register on the address &lt;code&gt;auction.1234&lt;/code&gt; etc.
When data arrives in the handler, we change the current price and the bidding feed on the auction’s web page.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;registerHandlerForUpdateCurrentPriceAndFeed&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; eventBus = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; EventBus(&lt;span class=&quot;hljs-string&quot;&gt;&#39;http://localhost:8080/eventbus&#39;&lt;/span&gt;);
    eventBus.onopen = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
        eventBus.registerHandler(&lt;span class=&quot;hljs-string&quot;&gt;&#39;auction.&#39;&lt;/span&gt; + auction_id, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(error, message)&lt;/span&gt; &lt;/span&gt;{
            &lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;hljs-string&quot;&gt;&#39;current_price&#39;&lt;/span&gt;).innerHTML = &lt;span class=&quot;hljs-built_in&quot;&gt;JSON&lt;/span&gt;.parse(message.body).price;
            &lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;hljs-string&quot;&gt;&#39;feed&#39;&lt;/span&gt;).value += &lt;span class=&quot;hljs-string&quot;&gt;&#39;New offer: &#39;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;JSON&lt;/span&gt;.parse(message.body).price + &lt;span class=&quot;hljs-string&quot;&gt;&#39;\n&#39;&lt;/span&gt;;
        });
    }
};&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any user attempt to bid generates a PATCH Ajax request
to the service with information about the new offer made at auction (see &lt;code&gt;bid()&lt;/code&gt; function).
On the server side we publish this information on the event bus to all clients registered to an address.
If you receive an HTTP response status code other than &lt;code&gt;200 (OK)&lt;/code&gt;, an error message is displayed on the web page.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bid&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newPrice = &lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;hljs-string&quot;&gt;&#39;my_bid_value&#39;&lt;/span&gt;).value;

    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xmlhttp = (&lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;.XMLHttpRequest) ? &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest() : &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ActiveXObject(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Microsoft.XMLHTTP&quot;&lt;/span&gt;);
    xmlhttp.onreadystatechange = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (xmlhttp.readyState == &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) {
            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (xmlhttp.status != &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;) {
                &lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;hljs-string&quot;&gt;&#39;error_message&#39;&lt;/span&gt;).innerHTML = &lt;span class=&quot;hljs-string&quot;&gt;&#39;Sorry, something went wrong.&#39;&lt;/span&gt;;
            }
        }
    };
    xmlhttp.open(&lt;span class=&quot;hljs-string&quot;&gt;&quot;PATCH&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://localhost:8080/api/auctions/&quot;&lt;/span&gt; + auction_id);
    xmlhttp.setRequestHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;);
    xmlhttp.send(&lt;span class=&quot;hljs-built_in&quot;&gt;JSON&lt;/span&gt;.stringify({price: newPrice}));
};&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;auction-service&quot;&gt;Auction Service&lt;/h2&gt;
&lt;p&gt;SockJS client requires the server-side part. Now we are going to create a light-weight RESTful auction service.
We will send and retrieve data in JSON format. Let’s start by creating a verticle.
First we need to inherit from &lt;a href=&quot;http://vertx.io/docs/apidocs/io/vertx/core/AbstractVerticle.html&quot;&gt;&lt;code&gt;AbstractVerticle&lt;/code&gt;&lt;/a&gt;
and override the &lt;code&gt;start&lt;/code&gt; method.
Each verticle instance has a member variable called &lt;code&gt;vertx&lt;/code&gt;. This provides access to the Vert.x core API.
For example, to create an HTTP server you call the &lt;code&gt;createHttpServer&lt;/code&gt; method on &lt;code&gt;vertx&lt;/code&gt; instance.
To tell the server to listen on port 8080 for incoming requests you use the &lt;code&gt;listen&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;We need a router with routes. A router takes an HTTP request and finds the first matching route.
The route can have a handler associated with it, which receives the request
(e.g. route that matches path &lt;code&gt;/eventbus/*&lt;/code&gt; is  associated with &lt;code&gt;eventBusHandler&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We can do something with the request, and then, end it or pass it to the next matching handler.&lt;/p&gt;
&lt;p&gt;If you have a lot of handlers it makes sense to split them up into multiple routers.&lt;/p&gt;
&lt;p&gt;You can do this by mounting a router at a mount point in another router
(see &lt;code&gt;auctionApiRouter&lt;/code&gt; that corresponds to &lt;code&gt;/api&lt;/code&gt; mount point in code snippet below).&lt;/p&gt;
&lt;p&gt;Here’s an example verticle:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AuctionServiceVerticle&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AbstractVerticle&lt;/span&gt; &lt;/span&gt;{

    &lt;span class=&quot;hljs-annotation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
        Router router = Router.router(vertx);

        router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/eventbus/*&quot;&lt;/span&gt;).handler(eventBusHandler());
        router.mountSubRouter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api&quot;&lt;/span&gt;, auctionApiRouter());
        router.route().failureHandler(errorHandler());
        router.route().handler(staticHandler());

        vertx.createHttpServer().requestHandler(router::accept).listen(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;);
    }

    &lt;span class=&quot;hljs-comment&quot;&gt;//…&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we’ll look at things in more detail. We’ll discuss Vert.x features used in verticle:
error handler, SockJS handler, body handler, shared data, static handler and routing based on method, path etc.&lt;/p&gt;
&lt;h3 id=&quot;error-handler&quot;&gt;Error handler&lt;/h3&gt;
&lt;p&gt;As well as setting handlers to handle requests you can also set a handler for failures in routing.
Failure in routing occurs if a handler throws an exception, or if a handler calls &lt;a href=&quot;http://vertx.io/docs/apidocs/io/vertx/ext/web/RoutingContext.html#fail-int-&quot;&gt;&lt;code&gt;fail&lt;/code&gt;&lt;/a&gt; method.
To render error pages we use error handler provides by Vert.x:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; ErrorHandler &lt;span class=&quot;hljs-title&quot;&gt;errorHandler&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ErrorHandler.create();
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;sockjs-handler&quot;&gt;SockJS handler&lt;/h3&gt;
&lt;p&gt;Vert.x provides SockJS handler with the event bus bridge which extends
the server-side Vert.x event bus into client side JavaScript.&lt;/p&gt;
&lt;p&gt;Configuring the bridge to tell it which messages should pass through is easy.
You can specify which matches you want to allow for inbound and outbound traffic
using the &lt;a href=&quot;http://vertx.io/docs/apidocs/io/vertx/ext/web/handler/sockjs/BridgeOptions.html&quot;&gt;&lt;code&gt;BridgeOptions&lt;/code&gt;&lt;/a&gt;.
If a message is outbound, before sending it from the server to the client side JavaScript,
Vert.x will look through any outbound permitted matches. In code snippet below we allow any messages
from addresses starting with “auction.” and ending with digits (e.g. &lt;code&gt;auction.1&lt;/code&gt;, &lt;code&gt;auction.100&lt;/code&gt; etc).&lt;/p&gt;
&lt;p&gt;If you want to be notified when an event occurs on the bridge you can provide a handler when calling the bridge.
For example, &lt;code&gt;SOCKET_CREATED&lt;/code&gt; event will occur when a new SockJS socket is created.
The event is an instance of &lt;a href=&quot;http://vertx.io/docs/apidocs/io/vertx/core/Future.html&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;.
When you are finished handling the event you can complete the future with “true” to enable further processing.&lt;/p&gt;
&lt;p&gt;To start the bridge simply call &lt;code&gt;bridge&lt;/code&gt; method on the SockJS handler:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; SockJSHandler &lt;span class=&quot;hljs-title&quot;&gt;eventBusHandler&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    BridgeOptions options = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BridgeOptions()
            .addOutboundPermitted(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; PermittedOptions().setAddressRegex(&lt;span class=&quot;hljs-string&quot;&gt;&quot;auction\\.[0-9]+&quot;&lt;/span&gt;));
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; SockJSHandler.create(vertx).bridge(options, event -&gt; {
         &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (event.type() == BridgeEventType.SOCKET_CREATED) {
            logger.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A socket was created&quot;&lt;/span&gt;);
        }
        event.complete(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);
    });
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;body-handler&quot;&gt;Body handler&lt;/h3&gt;
&lt;p&gt;The BodyHandler allows you to retrieve the request body, limit the body size and to handle the file upload.
Body handler should be on a matching route for any requests that require this functionality.
We need BodyHandler during the bidding process (PATCH method request &lt;code&gt;/auctions/&lt;auction_id&gt;&lt;/code&gt; contains request body
with information about a new offer made at auction). Creating a new body handler is simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;BodyHandler.create();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If request body is in JSON format, you can get it with
&lt;a href=&quot;http://vertx.io/docs/apidocs/io/vertx/ext/web/RoutingContext.html#getBodyAsJson--&quot;&gt;&lt;code&gt;getBodyAsJson&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;
&lt;h3 id=&quot;shared-data&quot;&gt;Shared data&lt;/h3&gt;
&lt;p&gt;Shared data contains functionality that allows you to safely share the data between different applications
in the same Vert.x instance or across a cluster of Vert.x instances.
Shared data includes local shared maps, distributed, cluster-wide maps, asynchronous cluster-wide locks
and asynchronous cluster-wide counters.&lt;/p&gt;
&lt;p&gt;To simplify the application we use the local shared map to save information about auctions.
The local shared map allows you to share data between different verticles in the same Vert.x instance.
Here’s an example of using a shared local map in an auction service:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AuctionRepository&lt;/span&gt; &lt;/span&gt;{

    &lt;span class=&quot;hljs-comment&quot;&gt;//…&lt;/span&gt;

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Optional&lt;Auction&gt; &lt;span class=&quot;hljs-title&quot;&gt;getById&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String auctionId)&lt;/span&gt; &lt;/span&gt;{
        LocalMap&lt;String, String&gt; auctionSharedData = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.sharedData.getLocalMap(auctionId);

        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Optional.of(auctionSharedData)
            .filter(m -&gt; !m.isEmpty())
            .map(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;::convertToAuction);
    }

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Auction auction)&lt;/span&gt; &lt;/span&gt;{
        LocalMap&lt;String, String&gt; auctionSharedData = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.sharedData.getLocalMap(auction.getId());

        auctionSharedData.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;, auction.getId());
        auctionSharedData.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;, auction.getPrice());
    }

    &lt;span class=&quot;hljs-comment&quot;&gt;//…&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to store auction data in a database, Vert.x provides a few different asynchronous clients
for accessing various data storages (MongoDB, Redis or JDBC client).&lt;/p&gt;
&lt;h3 id=&quot;auction-api&quot;&gt;Auction API&lt;/h3&gt;
&lt;p&gt;Vert.x lets you route HTTP requests to different handlers based on pattern matching on the request path.
It also enables you to extract values from the path and use them as parameters in the request.
Corresponding methods exist for each HTTP method. The first matching one will receive the request.
This functionality is particularly useful when developing REST-style web applications.&lt;/p&gt;
&lt;p&gt;To extract parameters from the path, you can use the colon character to denote the name of a parameter.
Regular expressions can also be used to extract more complex matches.
Any parameters extracted by pattern matching are added to the map of request parameters.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://vertx.io/docs/apidocs/io/vertx/ext/web/Route.html#consumes-java.lang.String-&quot;&gt;&lt;code&gt;Consumes&lt;/code&gt;&lt;/a&gt;
describes which MIME types the handler can consume.
By using &lt;a href=&quot;http://vertx.io/docs/apidocs/io/vertx/ext/web/Route.html#produces-java.lang.String-&quot;&gt;&lt;code&gt;produces&lt;/code&gt;&lt;/a&gt;
you define which MIME types the route produces.
In the code below the routes will match any request with &lt;code&gt;content-type&lt;/code&gt; header
and &lt;code&gt;accept&lt;/code&gt; header that matches &lt;code&gt;application/json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s look at an example of a subrouter mounted on the main router which was created in &lt;code&gt;start&lt;/code&gt; method in verticle:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Router &lt;span class=&quot;hljs-title&quot;&gt;auctionApiRouter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    AuctionRepository repository = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; AuctionRepository(vertx.sharedData());
    AuctionValidator validator = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; AuctionValidator(repository);
    AuctionHandler handler = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; AuctionHandler(repository, validator);

    Router router = Router.router(vertx);
    router.route().handler(BodyHandler.create());

    router.route().consumes(&lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;);
    router.route().produces(&lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;);

    router.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/auctions/:id&quot;&lt;/span&gt;).handler(handler::handleGetAuction);
    router.patch(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/auctions/:id&quot;&lt;/span&gt;).handler(handler::handleChangeAuctionPrice);

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; router;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The GET request returns auction data, while the PATCH method request allows you to bid up in the auction.
Let’s focus on the more interesting method, namely &lt;code&gt;handleChangeAuctionPrice&lt;/code&gt;.
In the simplest terms, the method might look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;handleChangeAuctionPrice&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext context)&lt;/span&gt; &lt;/span&gt;{
    String auctionId = context.request().getParam(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;);
    Auction auction = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Auction(
        auctionId,
        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BigDecimal(context.getBodyAsJson().getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;))
    );

    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.repository.save(auction);
    context.vertx().eventBus().publish(&lt;span class=&quot;hljs-string&quot;&gt;&quot;auction.&quot;&lt;/span&gt; + auctionId, context.getBodyAsString());

    context.response()
        .setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;)
        .end();
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;PATCH&lt;/code&gt; request to &lt;code&gt;/auctions/1&lt;/code&gt; would result in variable &lt;code&gt;auctionId&lt;/code&gt; getting the value 1.
We save a new offer in the auction and then publish this information on the event bus to all clients
registered on the address on the client side JavaScript.
After you have finished with the HTTP response you must call the &lt;code&gt;end&lt;/code&gt; function on it.&lt;/p&gt;
&lt;h3 id=&quot;static-handler&quot;&gt;Static handler&lt;/h3&gt;
&lt;p&gt;Vert.x provides the handler for serving static web resources.
The default directory from which static files are served is &lt;code&gt;webroot&lt;/code&gt;, but this can be configured.
By default the static handler will set cache headers to enable browsers to cache files.
Setting cache headers can be disabled with
&lt;a href=&quot;http://vertx.io/docs/apidocs/io/vertx/ext/web/handler/StaticHandler.html#setCachingEnabled-boolean-&quot;&gt;&lt;code&gt;setCachingEnabled&lt;/code&gt;&lt;/a&gt; method.
To serve the auction HTML page, JS files (and other static files) from auction service, you can create a static handler like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; StaticHandler &lt;span class=&quot;hljs-title&quot;&gt;staticHandler&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; StaticHandler.create()
        .setCachingEnabled(&lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;let-s-run-&quot;&gt;Let’s run!&lt;/h2&gt;
&lt;p&gt;Full application code is available on &lt;a href=&quot;https://github.com/mwarc/simple-realtime-auctions-vertx3-example&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Clone the repository and run &lt;code&gt;./gradlew run&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Open one or more browsers and point them to &lt;code&gt;http://localhost:8080&lt;/code&gt;. Now you can bid in auction:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blog/real-time-bidding-with-websockets-and-vertx/bidding_in_application.png&quot; alt=&quot;Real time bidding in application&quot; title=&quot;Real time bidding in application&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;This article presents the outline of a simple application that allows real-time bidding.
We created a lightweight, high-performance and scalable micro-service written in Java and based on Vert.x.
We discussed what Vert.x offers, among others, a distributed event bus and an elegant API that allows you to create applications in no time.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Fri, 15 Jan 2016 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/real-time-bidding-with-websockets-and-vert-x</link>
          <guid isPermaLink="true">https://vertx.io/blog/real-time-bidding-with-websockets-and-vert-x</guid>
          <author>
            <name>mwarc</name>
            <uri>http://github.com/mwarc</uri>
          </author>
        </item>
      
        <item>
          <title>ECMAScript 6/7 on the JVM with TypeScript and Vert.x</title>
          <description>
      &lt;article&gt;&lt;p&gt;Following the latest releases of &lt;a href=&quot;http://vertx.io&quot;&gt;Vert.x 3.2&lt;/a&gt; and
&lt;a href=&quot;https://github.com/michel-kraemer/vertx-lang-typescript&quot;&gt;vertx-lang-typescript 1.1.0&lt;/a&gt;
I figured it would be a good idea to give you a couple of examples how teaming
Vert.x and TypeScript helps you use ECMAScript 6 and 7 features on the JVM today.&lt;/p&gt;
&lt;p&gt;The vertx-lang-typescript library adds &lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; support to Vert.x 3.
TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. It supports the
ECMAScript 6 (ECMAScript 2015, ES6) standard and also a few parts of ECMAScript 7 (ES7) already.&lt;/p&gt;
&lt;p&gt;The library automatically compiles Vert.x verticles written in
TypeScript to JavaScript and executes them on the JVM. vertx-lang-typescript also provides
type definitions for the Vert.x JavaScript API. Use them in your favourite
TypeScript editor/IDE to get auto-completion, API documentation and meaningful error
messages. See the following screencast:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/michel-kraemer/vertx-lang-typescript/aaa67228c998bf9dc64b5f45fb407ef56169efec/screencast.gif&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ecmascript-6-7-and-vert-x&quot;&gt;ECMAScript 6/7 and Vert.x&lt;/h2&gt;
&lt;p&gt;Below you find an example verticle written in TypeScript. Well, I left all
the TypeScript-specific parts out. In fact the verticle is valid ECMAScript 6
(except for the last snippet [9] which is ECMAScript 7).&lt;/p&gt;
&lt;p&gt;First, follow the &lt;a href=&quot;https://github.com/michel-kraemer/vertx-lang-typescript/blob/master/README.md&quot;&gt;vertx-lang-typescript README&lt;/a&gt;
to install the library and to enable TypeScript in Vert.x. Then extract the
type definitions (&lt;code&gt;vertx-lang-typescript-1.1.0-typings.zip&lt;/code&gt;) into a new directory.
Create a new file named &lt;code&gt;es7verticle.ts&lt;/code&gt; in this directory and copy the code
below into it. Finally, open your command prompt and execute&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;vertx run es7verticle.ts&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will run a small HTTP server that listens to requests on port 8080. If you
open your browser and go to &lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt; you will see the following:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;img-responsive center-block&quot; src=&quot;https://vertx.io/assets/blog/ecmascript-6-7-on-the-jvm-with-typscript-and-vertx/output.png&quot; title=&quot;Output of the verticle written in TypeScript&quot;&gt;&lt;/p&gt;
&lt;p&gt;So far so good. Now let’s have a look at the code. I numbered the individual
ECMAScript features used. Here’s a complete list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use an &lt;em&gt;arrow function&lt;/em&gt; to create a request handler (ES6)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Block-scoped variables&lt;/em&gt; do not pollute your global namespace (ES6)&lt;/li&gt;
&lt;li&gt;Specify a &lt;em&gt;default value&lt;/em&gt; for a function parameter (ES6)&lt;/li&gt;
&lt;li&gt;Use &lt;em&gt;rest parameters&lt;/em&gt; to collect multiple parameters in an array (ES6)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Spread&lt;/em&gt; the contents of an array to function parameters (ES6)&lt;/li&gt;
&lt;li&gt;Iterate over array contents using the &lt;em&gt;for…of loop&lt;/em&gt; (ES6)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;template strings&lt;/em&gt; enable &lt;em&gt;string interpolation&lt;/em&gt; and &lt;em&gt;multi-line strings&lt;/em&gt; (ES6)&lt;/li&gt;
&lt;li&gt;Use &lt;em&gt;classes&lt;/em&gt; and &lt;em&gt;inheritance&lt;/em&gt; (ES6)&lt;/li&gt;
&lt;li&gt;Use the new &lt;em&gt;exponentiation operator&lt;/em&gt; as a shortcut for &lt;code&gt;Math.pow()&lt;/code&gt; (ES7)&lt;/li&gt;
&lt;/ol&gt;
&lt;script src=&quot;https://gist.github.com/michel-kraemer/892866038dabcb8376e6.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The example demonstrates very well how you can use ECMAScript 6 (and parts of
7) on the JVM today. In fact, there are a lot more
&lt;a href=&quot;http://es6-features.org/&quot;&gt;cool ES6 features&lt;/a&gt; not included in the example such
as constants (&lt;code&gt;const&lt;/code&gt;), the property shorthand or method properties.&lt;/p&gt;
&lt;p&gt;TypeScript is so much more than just ES6. It actually has a
very good static type system that allows you to make compile-time type checks.
This is makes it much easier to write large Vert.x applications with many
verticles. Personally I really like the support that I get from my IDE when
programming TypeScript. Since vertx-lang-typescript comes with type definitions
for the Vert.x JavaScript API I get auto-completion and access to the documentation
right in the editor. I mostly use &lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;Sublime&lt;/a&gt; by the
way, but I have tested it successfully with
&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/&quot;&gt;Eclipse&lt;/a&gt;
and &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, the only ES7 feature that you can use at the moment with
vertx-lang-typescript is the &lt;em&gt;exponentiation operator&lt;/em&gt;. TypeScript 1.7 also
supports &lt;em&gt;decorators&lt;/em&gt; but this feature is disabled at the moment in
vertx-lang-typescript because it is experimental and subject to change. I’ll
keep you up to date when new features are introduced.&lt;/p&gt;
&lt;h2 id=&quot;alternatives&quot;&gt;Alternatives&lt;/h2&gt;
&lt;p&gt;We’ve recently &lt;a href=&quot;http://vertx.io/blog/vert-x-es6-back-to-the-future/&quot;&gt;published a post&lt;/a&gt;
on how to use ECMAScript 6 with Vert.x here on this blog. We used &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt;, a
compiler that translates ES6 to ES5.&lt;/p&gt;
&lt;p&gt;Although this approach works well it is a bit harder to set up and use than the
one presented here. First, you need to wrap your Vert.x application in a NPM package.
Second, in order to run your application, you need to execute two commands.
You have to compile it with &lt;code&gt;npm run build&lt;/code&gt; and then then call &lt;code&gt;npm start&lt;/code&gt;.
With vertx-lang-typescript you only need one command. vertx-lang-typescript
also allows you to embed the TypeScript verticle in a larger Vert.x application
and also mix multiple languages in one project. This is not possible if you wrap
everything in a NPM package.&lt;/p&gt;
&lt;p&gt;Finally, the approach based on Babel only supports ECMAScript 6 (2015), although
more features from ES7 will surely be introduced in Babel in the future.
TypeScript on the other hand gives you much more features such as static
typing that you will certainly find useful for any larger project.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Sun, 03 Jan 2016 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/ecmascript-6-7-on-the-jvm-with-typescript-and-vert-x</link>
          <guid isPermaLink="true">https://vertx.io/blog/ecmascript-6-7-on-the-jvm-with-typescript-and-vert-x</guid>
          <author>
            <name>michel-kraemer</name>
            <uri>http://github.com/michel-kraemer</uri>
          </author>
        </item>
      
        <item>
          <title>Automatic redeployment in Eclipse IDE</title>
          <description>
      &lt;article&gt;&lt;p&gt;Vert.x 3.1 has (re-) introduced the &lt;em&gt;redeploy&lt;/em&gt; feature. This blog post explains how to use this feature in the Eclipse IDE. However, you can easily adapt the content to your IDE.&lt;/p&gt;
&lt;h2 id=&quot;how-does-redeploy-work&quot;&gt;How does redeploy work&lt;/h2&gt;
&lt;p&gt;How is implemented the &lt;code&gt;redeploy&lt;/code&gt; is not as you may expect. First, the redeploy does not rely on a build tool, but is integrated in vert.x. However you can plug your build tools with the redeploy feature. This feature is offered by the &lt;code&gt;io.vertx.core.Launcher&lt;/code&gt; class. The redeployment process is actually very simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the application is launched in &lt;em&gt;redeploy mode&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;it listens for file changes&lt;/li&gt;
&lt;li&gt;when a &lt;em&gt;matching&lt;/em&gt; file is changed, it stops the application&lt;/li&gt;
&lt;li&gt;it executes the &lt;code&gt;on-redeploy&lt;/code&gt; actions if any&lt;/li&gt;
&lt;li&gt;it restarts the application&lt;/li&gt;
&lt;li&gt;back to (2)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Initially the application is launched in &lt;em&gt;redeploy mode&lt;/em&gt;. The application is actually launched in background, in a separated process. Vert.x listens for file changes. You give it a set of (Ant-style) patterns and every time a matching file changes, Vert.x stops the whole application and restarts it. Optionally you can configure a &lt;code&gt;on-redeploy&lt;/code&gt; action to plug in your build tools.&lt;/p&gt;
&lt;p&gt;To integrate this process in Eclipse (or in your IDE), you just need to configure the set of listened files, and let the &lt;code&gt;Launcher&lt;/code&gt; class starts and stops your application.&lt;/p&gt;
&lt;h2 id=&quot;redeploy-in-eclipse&quot;&gt;Redeploy in Eclipse&lt;/h2&gt;
&lt;p&gt;The following screencast explains how you configure a vert.x application to be run in Eclipse and how to configure the redeploy:&lt;/p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/iyZwAzEVX-o&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;To summarize the last configuration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it’s a Java application configuration&lt;/li&gt;
&lt;li&gt;it uses &lt;code&gt;io.vertx.core.Launcher&lt;/code&gt; as main class&lt;/li&gt;
&lt;li&gt;In the &lt;em&gt;Program arguments&lt;/em&gt; (&lt;em&gt;Arguments&lt;/em&gt; tab), write: &lt;code&gt;run org.acme.verticle.MyMainVerticle --redeploy=&quot;src/**/*.java&quot; --launcher-class=io.vertx.core.Launcher&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;redeploy-with-your-own-main-class&quot;&gt;Redeploy with your own Main class&lt;/h2&gt;
&lt;p&gt;Let’s now imagine that you have your own &lt;code&gt;Main&lt;/code&gt; class, starting your application. For instance, it can be something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; org.acme.vertx;

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.core.Vertx;

&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Main&lt;/span&gt; &lt;/span&gt;{

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{
        Vertx vertx = Vertx.vertx();
        vertx.deployVerticle(MyMainVerticle.class.getName());
    }

}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The redeploy feature from vert.x lets you use your own &lt;code&gt;Main&lt;/code&gt; class:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create another &lt;code&gt;Run&lt;/code&gt; configuration&lt;/li&gt;
&lt;li&gt;Set the &lt;code&gt;Main-Class&lt;/code&gt; to &lt;code&gt;io.vertx.core.Launcher&lt;/code&gt; (yes, the one from vert.x not yours)&lt;/li&gt;
&lt;li&gt;In the application parameter add: &lt;code&gt;run --redeploy=&quot;src/**/*.java&quot; --launcher-class=org.acme.vertx.Main&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With this configuration, the application is launched in background using your own &lt;code&gt;Main&lt;/code&gt; class, and will restart the application every time you change your source code (you can even change the source code of your &lt;code&gt;Main&lt;/code&gt; class).&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Sun, 20 Dec 2015 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/automatic-redeployment-in-eclipse-ide</link>
          <guid isPermaLink="true">https://vertx.io/blog/automatic-redeployment-in-eclipse-ide</guid>
          <author>
            <name>cescoffier</name>
            <uri>http://github.com/cescoffier</uri>
          </author>
        </item>
      
        <item>
          <title>Vert.x 3.2.0 is released !</title>
          <description>
      &lt;article&gt;&lt;p&gt;We are pleased to announce the release of Vert.x 3.2.0!&lt;/p&gt;
&lt;p&gt;Some of the highlights of this release include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://vertx.io/docs/vertx-core/ceylon&quot;&gt;vertx-lang-ceylon&lt;/a&gt;: the support of the &lt;a href=&quot;http://ceylon-lang.org/&quot;&gt;Ceylon language&lt;/a&gt;!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://vertx.io/docs/vertx-tcp-eventbus-bridge/java/&quot;&gt;vertx-tcp-bridge&lt;/a&gt;: an event bus bridge that lets any TCP-capable application to interact with vert.x applications using the event bus.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://vertx.io/docs/vertx-hawkular-metrics/java/&quot;&gt;vertx-hawkular-metric&lt;/a&gt;: an implementation of the vert.x metrics for &lt;a href=&quot;http://www.hawkular.org/&quot;&gt;Hawkular&lt;/a&gt;. In addition, it lets you report your own metrics to hawkular.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A new &lt;a href=&quot;http://vertx.io/docs/vertx-stack-manager/stack-manager/&quot;&gt;stack manager&lt;/a&gt; to configure the vert.x distribution with the content you want.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://vertx.io/docs/vertx-shell/java/&quot;&gt;vertx-shell&lt;/a&gt; is now an official component.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://vertx.io/docs/vertx-jgroups/java/&quot;&gt;vertx-jgroups&lt;/a&gt;: an alternative implementation of the vert.x cluster manager using &lt;a href=&quot;http://jgroups.org/&quot;&gt;JGroups&lt;/a&gt;. This component is a technical preview.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The release also contains many bug fixes and a ton of improvements. Full release notes can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.2.0---Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.2.0---Release-Notes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Breaking changes are here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.2.0-Breaking-changes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.2.0-Breaking-changes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dockers images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;
The vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Many thanks to all the committers and community whose contributions made this possible.&lt;/p&gt;
&lt;p&gt;Next stop is Vert.x 3.3.0 which we hope to have out in March 2016.&lt;/p&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.2.0%22&quot;&gt;Maven Central&lt;/a&gt;
 and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.2.0/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Tue, 15 Dec 2015 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/vert-x-3-2-0-is-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/vert-x-3-2-0-is-released</guid>
          <author>
            <name>cescoffier</name>
            <uri>http://github.com/cescoffier</uri>
          </author>
        </item>
      
        <item>
          <title>Combine vert.x and mongo to build a giant</title>
          <description>
      &lt;article&gt;&lt;p&gt;This blog post is part of the &lt;em&gt;introduction to vert.x&lt;/em&gt; series. Last time, we have seen how we can use the &lt;code&gt;vertx-jdbc-client&lt;/code&gt; to connect to a database using a JDBC driver. In this post, we are going to replace this JDBC client by the &lt;code&gt;vertx-mongo-client&lt;/code&gt;, and thus connect to a Mongo database.&lt;/p&gt;
&lt;p&gt;You don’t understand the title, check the &lt;a href=&quot;https://www.mongodb.org&quot;&gt;mongoDB&lt;/a&gt; website.&lt;/p&gt;
&lt;p&gt;But before going further, let’s recap.&lt;/p&gt;
&lt;h2 id=&quot;previously-in-introduction-to-vert-x-&quot;&gt;Previously in  ‘introduction to vert.x’&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;a href=&quot;https://vertx.io/blog/my-first-vert-x-3-application/&quot;&gt;first post&lt;/a&gt; has described how to build a vert.x application with Maven and execute unit tests.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://vertx.io/blog/vert-x-application-configuration/&quot;&gt;second post&lt;/a&gt; has described how this application can become configurable.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://vertx.io/blog/some-rest-with-vert-x/&quot;&gt;third post&lt;/a&gt; has introduced &lt;a href=&quot;http://vertx.io/docs/vertx-web/java/&quot;&gt;vertx-web&lt;/a&gt;, and a small collection management application has been developed. This application offers a REST API used by a HTML/JavaScript frontend.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://vertx.io/blog/unit-and-integration-tests/&quot;&gt;fourth post&lt;/a&gt; has presented how you can run integration tests to ensure the behavior of your application.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://vertx.io/blog/using-the-asynchronous-sql-client/&quot;&gt;last post&lt;/a&gt; has presented how you can interact with a JDBC database using the vertx-jdbc-client.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This post shows another client that lets you use MongoDB in a vert.x application. This client provides an vert.x API to access asynchronously to the Mongo database. We won’t compare whether or not JDBC is superior to Mongo, they have both pros and cons, and you should use the one that meet your requirements. Vert.x lets you choose, that’s the point.&lt;/p&gt;
&lt;p&gt;The vertx-mongo-client documentation is available &lt;a href=&quot;http://vertx.io/docs/vertx-mongo-client/java/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code developed in this blog post is available in the branch &lt;a href=&quot;https://github.com/cescoffier/my-vertx-first-app/tree/post-6&quot;&gt;post-6&lt;/a&gt;. Our starting point is the code from the &lt;a href=&quot;https://github.com/cescoffier/my-vertx-first-app/tree/post-5&quot;&gt;post-5 branch&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;asynchronous-data-access&quot;&gt;Asynchronous data access&lt;/h2&gt;
&lt;p&gt;One of the vert.x characteristics is being asynchronous. With an asynchronous API, you don’t wait for a result, but you are notified when this result is ready. Thanks to vert.x, this notification happens in the same thread (understand event loop) as the initial request:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blog/intro-series/async-data.png&quot; alt=&quot;Asynchronous data access&quot;&gt;&lt;/p&gt;
&lt;p&gt;Your code (on the left) is going to invoke the mongo client and pass a callback that will be invoked when the result is available. The invocation to the mongo client is non blocking and returns immediately. The client is dealing with the mongo database and when the result has been computed / retrieved, it invokes the callback in the same event loop as the request.&lt;/p&gt;
&lt;p&gt;This model is particularly powerful as it avoids the synchronization pitfalls. Indeed, your code is only called by a single thread, no need to synchronize anything.&lt;/p&gt;
&lt;h2 id=&quot;as-with-every-maven-project-&quot;&gt;As with every Maven project….&lt;/h2&gt;
&lt;p&gt;… we need to update the &lt;code&gt;pom.xml&lt;/code&gt; file first.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;pom.xml&lt;/code&gt; file, replace the &lt;code&gt;vertx-jdbc-client&lt;/code&gt; by the &lt;code&gt;vertx-mongo-client&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.vertx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;vertx-mongo-client&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;3.1.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;  

&lt;p&gt;Unlike JDBC where we were instantiating a database on the fly, here we need to explicitly starts a MongoDB server. In order to launch a Mongo server in our test, we are going to add another dependency:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;de.flapdoodle.embed&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;de.flapdoodle.embed.mongo&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;1.50.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;scope&lt;/span&gt;&gt;&lt;/span&gt;test&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;scope&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This dependency will be used in our unit tests, as it lets us start a mongo server programmatically. For our integration tests, we are going to use a Maven plugin starting and stopping the mongo server before and after our integration tests. Add this plugin to the &lt;code&gt;&lt;plugins/&gt;&lt;/code&gt; section of your &lt;code&gt;pom.xml&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;plugin&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;com.github.joelittlejohn.embedmongo&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;embedmongo-maven-plugin&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;0.2.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;executions&lt;/span&gt;&gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;execution&lt;/span&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;id&lt;/span&gt;&gt;&lt;/span&gt;start&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;id&lt;/span&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;goals&lt;/span&gt;&gt;&lt;/span&gt;
              &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;goal&lt;/span&gt;&gt;&lt;/span&gt;start&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;goal&lt;/span&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;goals&lt;/span&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;configuration&lt;/span&gt;&gt;&lt;/span&gt;
              &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;port&lt;/span&gt;&gt;&lt;/span&gt;37017&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;port&lt;/span&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;configuration&lt;/span&gt;&gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;execution&lt;/span&gt;&gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;execution&lt;/span&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;id&lt;/span&gt;&gt;&lt;/span&gt;stop&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;id&lt;/span&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;goals&lt;/span&gt;&gt;&lt;/span&gt;
              &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;goal&lt;/span&gt;&gt;&lt;/span&gt;stop&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;goal&lt;/span&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;goals&lt;/span&gt;&gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;execution&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;executions&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;plugin&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;  

&lt;p&gt;Notice the port we use here (37017), we will use this port later.&lt;/p&gt;
&lt;h2 id=&quot;enough-xml-for-today&quot;&gt;Enough XML for today&lt;/h2&gt;
&lt;p&gt;Now that we have updated our &lt;code&gt;pom.xml&lt;/code&gt; file, it’s time to change our verticle. The first thing to do is to replace the jdbc client by the mongo client:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;mongo = MongoClient.createShared(vertx, config());&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This client is configured with the configuration given to the verticle (more on this below).&lt;/p&gt;
&lt;p&gt;Once done, we need to change how we start the application. With the mongo client, no need to acquire a connection, it handles this internally. So our startup sequence is a bit more simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;createSomeData(
        (nothing) -&gt; startWebApp(
            (http) -&gt; completeStartup(http, fut)
        ), fut);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As in the previous post, we need to insert some predefined data if the database is empty:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;createSomeData&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Handler&lt;AsyncResult&lt;Void&gt;&gt; next, Future&lt;Void&gt; fut)&lt;/span&gt; &lt;/span&gt;{
    Whisky bowmore = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Whisky(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bowmore 15 Years Laimrig&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Scotland, Islay&quot;&lt;/span&gt;);
    Whisky talisker = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Whisky(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Talisker 57° North&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Scotland, Island&quot;&lt;/span&gt;);
    System.out.println(bowmore.toJson());
    &lt;span class=&quot;hljs-comment&quot;&gt;// Do we have data in the collection ?&lt;/span&gt;
    mongo.count(COLLECTION, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject(), count -&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (count.succeeded()) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (count.result() == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {
          &lt;span class=&quot;hljs-comment&quot;&gt;// no whiskies, insert data&lt;/span&gt;
          mongo.insert(COLLECTION, bowmore.toJson(), ar -&gt; {
            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.failed()) {
              fut.fail(ar.cause());
            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
              mongo.insert(COLLECTION, talisker.toJson(), ar2 -&gt; {
                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar2.failed()) {
                  fut.failed();
                } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
                  next.handle(Future.&lt;Void&gt;succeededFuture());
                }
              });
            }
          });
        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
          next.handle(Future.&lt;Void&gt;succeededFuture());
        }
      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;hljs-comment&quot;&gt;// report the error&lt;/span&gt;
        fut.fail(count.cause());
      }
    });
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To detect whether or not the database already contains some data, we retrieve the number of &lt;em&gt;documents&lt;/em&gt; from the &lt;code&gt;whiskies&lt;/code&gt; collection. This is done with : &lt;code&gt;mongo.count(COLLECTION, new JsonObject(), count -&gt; {})&lt;/code&gt;. The second parameter is the query. In our case, we want to count all documents. This is done using &lt;code&gt;new JsonObject()&lt;/code&gt; that would create a query accepting all documents from the collection (it’s equivalent to a &lt;code&gt;SELECT * FROM ...&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Also notice the &lt;code&gt;insert&lt;/code&gt; calls. Documents are passed as JSON object, so to insert an object, just serialize it to JSON and use &lt;code&gt;mongo.insert(COLLECTION, json, completion handler)&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;mongo-ize-the-rest-handlers&quot;&gt;Mongo-ize the REST handlers&lt;/h2&gt;
&lt;p&gt;Now that the application boot sequence has been migrated to mongo, it’s time to update the code handling the REST requests.&lt;/p&gt;
&lt;p&gt;Let’s start by the &lt;code&gt;getAll&lt;/code&gt; method that returns all stored products. To implement this, we use the &lt;code&gt;find&lt;/code&gt; method. As we saw for the &lt;code&gt;count&lt;/code&gt; method, we pass an empty json object to describe a query accepting all documents:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext routingContext)&lt;/span&gt; &lt;/span&gt;{
    mongo.find(COLLECTION, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject(), results -&gt; {
      List&lt;JsonObject&gt; objects = results.result();
      List&lt;Whisky&gt; whiskies = objects.stream().map(Whisky::&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;).collect(Collectors.toList());
      routingContext.response()
          .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json; charset=utf-8&quot;&lt;/span&gt;)
          .end(Json.encodePrettily(whiskies));
    });
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The query results are passed as a list of JSON objects. From this list we can create our product instances, and fill the HTTP response with this set.&lt;/p&gt;
&lt;p&gt;To delete a specific document we need to select the document using its &lt;code&gt;id&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;deleteOne&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext routingContext)&lt;/span&gt; &lt;/span&gt;{
    String id = routingContext.request().getParam(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;);
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (id == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {
      routingContext.response().setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt;).end();
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      mongo.removeOne(COLLECTION, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject().put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;_id&quot;&lt;/span&gt;, id),
          ar -&gt; routingContext.response().setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;204&lt;/span&gt;).end());
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;new JsonObject().put(&quot;_id&quot;, id)&lt;/code&gt; describes a query selecting a single document (selected by its unique &lt;code&gt;id&lt;/code&gt;, so it’s the equivalent to &lt;code&gt;SELECT * WHERE id=...&lt;/code&gt;). Notice the &lt;code&gt;_id&lt;/code&gt; which is a mongo trick to select a document by id.&lt;/p&gt;
&lt;p&gt;Updating a document is a less trivial:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;updateOne&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext routingContext)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String id = routingContext.request().getParam(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;);
    JsonObject json = routingContext.getBodyAsJson();
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (id == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; || json == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {
      routingContext.response().setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt;).end();
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      mongo.update(COLLECTION,
          &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject().put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;_id&quot;&lt;/span&gt;, id), &lt;span class=&quot;hljs-comment&quot;&gt;// Select a unique document&lt;/span&gt;
          &lt;span class=&quot;hljs-comment&quot;&gt;// The update syntax: {$set, the json object containing the fields to update}&lt;/span&gt;
          &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject()
              .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;$set&quot;&lt;/span&gt;, json),
          v -&gt; {
            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (v.failed()) {
              routingContext.response().setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;404&lt;/span&gt;).end();
            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
              routingContext.response()
                  .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json; charset=utf-8&quot;&lt;/span&gt;)
                  .end(Json.encodePrettily(
                  &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Whisky(id, json.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;),
                    json.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;origin&quot;&lt;/span&gt;))));
            }
          });
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we can see, the &lt;code&gt;update&lt;/code&gt; method takes two JSON objects as parameter:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The first one denotes the query (here we select a single document using its id).&lt;/li&gt;
&lt;li&gt;The second object expresses the change to apply to the selected document. It uses a mongo syntax. In our case, we update the document using the &lt;code&gt;$set&lt;/code&gt; operator.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;Replace document &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; In this code we update the document and replace only a set of fields. You can also replace the whole document using &lt;code&gt;mongo.replace(...)&lt;/code&gt;.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;I definitely recommend to have a look to the MongoDB documentation, especially:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.mongodb.org/manual/tutorial/query-documents/&quot; title=&quot;MongoDB Query Documentation&quot;&gt;Query syntax documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.mongodb.org/manual/tutorial/modify-documents/&quot; title=&quot;MongoDB Update Documentation&quot;&gt;Update syntax documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;time-for-configuration&quot;&gt;Time for configuration&lt;/h2&gt;
&lt;p&gt;Well, the code is migrated, but we still need to update the configuration. With JDBC we passed the JDBC url and the driver class in the configuration. With mongo, we need to configure the &lt;code&gt;connection_string&lt;/code&gt; - the &lt;code&gt;mongo://&lt;/code&gt; url on which the application is connected, and &lt;code&gt;db_name&lt;/code&gt; - a name for the data source.&lt;/p&gt;
&lt;p&gt;Let’s start by the unit test. Edit the &lt;code&gt;MyFirstVerticleTest&lt;/code&gt; file and add the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; MongodProcess MONGO;
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; MONGO_PORT = &lt;span class=&quot;hljs-number&quot;&gt;12345&lt;/span&gt;;
    &lt;span class=&quot;hljs-annotation&quot;&gt;@BeforeClass&lt;/span&gt;
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{
      MongodStarter starter = MongodStarter.getDefaultInstance();
      IMongodConfig mongodConfig = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MongodConfigBuilder()
          .version(Version.Main.PRODUCTION)
          .net(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Net(MONGO_PORT, Network.localhostIsIPv6()))
          .build();
      MongodExecutable mongodExecutable =
            starter.prepare(mongodConfig);
     MONGO = mongodExecutable.start();
    }

    &lt;span class=&quot;hljs-annotation&quot;&gt;@AfterClass&lt;/span&gt;
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{  MONGO.stop(); }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before our tests, we start (programmatically) a mongo database on the port 12345. When all our tests have been executed, we shutdown the database.&lt;/p&gt;
&lt;p&gt;So now that the mongo server is managed, we need to to give the right configuration to our verticle. Update the &lt;code&gt;DeploymentOption&lt;/code&gt; instance with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;DeploymentOptions options = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DeploymentOptions()
        .setConfig(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject()
            .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http.port&quot;&lt;/span&gt;, port)
            .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;db_name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;whiskies-test&quot;&lt;/span&gt;)
            .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;connection_string&quot;&lt;/span&gt;,
                &lt;span class=&quot;hljs-string&quot;&gt;&quot;mongodb://localhost:&quot;&lt;/span&gt; + MONGO_PORT)
    );&lt;/code&gt;&lt;/pre&gt;  

&lt;p&gt;That’s all for the unit tests.&lt;/p&gt;
&lt;p&gt;For the integration-test, we are using an externalized json file. Edit the &lt;code&gt;src/test/resources/my-it-config.json&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;{
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;http.port&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-variable&quot;&gt;${http.port}&lt;/span&gt;,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;db_name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;whiskies-it&quot;&lt;/span&gt;,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;connection_string&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;mongodb://localhost:37017&quot;&lt;/span&gt;
    }&lt;/code&gt;&lt;/pre&gt;  

&lt;p&gt;Notice the port we are using for the mongo server. This port was configured in the &lt;code&gt;pom.xml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Last but not least, we still have a configuration file to edit: the configuration you use to launch the application in &lt;code&gt;production&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;{
      &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;http.port&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;8082&lt;/span&gt;&lt;/span&gt;,
      &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;db_name&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;whiskies&quot;&lt;/span&gt;&lt;/span&gt;,
      &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;connection_string&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;mongodb://localhost:27017&quot;&lt;/span&gt;
    &lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here you would need to edit the &lt;code&gt;localhost:27017&lt;/code&gt; with the right url for your mongo server.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;Some changes in the integration tests &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; Because mongo document id are String and not integer, we have to slightly change document selection in the integration test.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&quot;time-for-a-run&quot;&gt;Time for a run&lt;/h2&gt;
&lt;p&gt;It’s time to package and run the application and check that everything works as expected. Let’s package the application using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;mvn clean &lt;span class=&quot;hljs-built_in&quot;&gt;verify&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then to launch it, start your mongo server and launch:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;java -jar target/&lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;first&lt;/span&gt;-app-&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;-SNAPSHOT-fat.jar \
  -conf src/main/conf/&lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt;-&lt;span class=&quot;hljs-type&quot;&gt;application&lt;/span&gt;-conf.json&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are, like me, using docker / docker-machine for almost everything, edit the configuration file to refer to the right host (localhost for docker, the docker-machine ip if you use docker-machine) and then launch:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;docker &lt;span class=&quot;hljs-command&quot;&gt;run&lt;/span&gt; -d -p &lt;span class=&quot;hljs-number&quot;&gt;27017&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;27017&lt;/span&gt; mongo
java -jar target/&lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;first&lt;/span&gt;-app-&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;-SNAPSHOT-fat.jar \
  -conf src/main/conf/&lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt;-&lt;span class=&quot;hljs-type&quot;&gt;application&lt;/span&gt;-conf.json
&lt;span class=&quot;hljs-comment&quot;&gt;# or&lt;/span&gt;
java -jar target/&lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;first&lt;/span&gt;-app-&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;-SNAPSHOT-fat.jar \
  -conf src/main/conf/&lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt;-&lt;span class=&quot;hljs-type&quot;&gt;application&lt;/span&gt;-conf-docker-machine.json&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/intro-series/whisky-mongo.png&quot; alt=&quot;The application live and running&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;that-s-all-folks-&quot;&gt;That’s all folks !&lt;/h2&gt;
&lt;p&gt;We are reaching the end of this post. We saw how you can use the vert-mongo-client to access asynchronously data stored inside a mongo database as well as inserting/updating this data. Now you have the choice between JDBC or Mongo. In addition, vert.x provides a client for Redis.&lt;/p&gt;
&lt;p&gt;Next time, we will see how the verticle class can be split in two verticles in order to better organize your code. The interaction between the two verticles will uses &lt;em&gt;services&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Stay tuned  &amp; Happy coding !&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 30 Nov 2015 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/combine-vert-x-and-mongo-to-build-a-giant</link>
          <guid isPermaLink="true">https://vertx.io/blog/combine-vert-x-and-mongo-to-build-a-giant</guid>
          <author>
            <name>cescoffier</name>
            <uri>http://github.com/cescoffier</uri>
          </author>
        </item>
      
        <item>
          <title>Vert.x ES6 back to the future</title>
          <description>
      &lt;article&gt;&lt;p&gt;On &lt;a href=&quot;http://backtothefuture.wikia.com/wiki/2015&quot;&gt;October 21th, 2015&lt;/a&gt; we all rejoiced with the return from the past of
Marty McFly with his flying car and so on, however in the Vert.x world we were quite sad that the JavaScript support we
have was still using a technology released in &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#Versions&quot;&gt;December 2009&lt;/a&gt;. The
support for ES5 is not something that we Vert.x team controls but something that is inherited from running on top of
&lt;a href=&quot;http://openjdk.java.net/projects/nashorn/&quot;&gt;Nashorn&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With all these nostalgic thoughts on my mind I’ve decided to bring us back to the future and by future I mean, lets
 start using a modern JavaScript, or more correctly, lets start using &lt;a href=&quot;http://es6-features.org/&quot;&gt;ECMAScript 6&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It turned out to be quite simple to achieve this so I’ll pick the hello world example and write it in ES6 just to show
how you can port your code to ES6 and still use the current Vert.x APIs. Note that Vert.x internals still are ES5 and
have not been touched or modified to support any of ES6 features.&lt;/p&gt;
&lt;h2 id=&quot;main&quot;&gt;main&lt;/h2&gt;
&lt;p&gt;Traditionally your &lt;code&gt;main.js&lt;/code&gt; file would reside in the root of your module (this is where &lt;code&gt;NPM&lt;/code&gt; will look for it by
default); however as we are going to transpile to &lt;code&gt;ES5&lt;/code&gt; you’ll want to put your index file in &lt;code&gt;/src/main.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, because we are transpiling to &lt;code&gt;ES5&lt;/code&gt;, your &lt;code&gt;package.json&lt;/code&gt;‘s main block should point to the transpiled &lt;code&gt;index.js&lt;/code&gt;
file in the &lt;code&gt;/lib&lt;/code&gt; directory.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;vertx-es6&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;version&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;private&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,

  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;main&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;lib/main.js&quot;&lt;/span&gt;&lt;/span&gt;,

  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;scripts&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;{
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;build&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;rm -Rf lib &amp;&amp; ./node_modules/.bin/babel --out-dir lib src&quot;&lt;/span&gt;&lt;/span&gt;,
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;start&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;./node_modules/.bin/vertx run lib/main.js&quot;&lt;/span&gt;
  &lt;/span&gt;}&lt;/span&gt;,

  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;dependencies&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;{
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;vertx3-full&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;3.1.0&quot;&lt;/span&gt;&lt;/span&gt;,
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;babel-cli&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;6.2.0&quot;&lt;/span&gt;&lt;/span&gt;,
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;babel-preset-es2015&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;6.1.18&quot;&lt;/span&gt;
  &lt;/span&gt;}
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the main idea is to invoke the transpiler (Babel) when we are building our project, and run it using the
generated files. This is slightly equivalent to a compilation process you would have using compiled language.&lt;/p&gt;
&lt;h2 id=&quot;-npmignore&quot;&gt;.npmignore&lt;/h2&gt;
&lt;p&gt;If you’re planning to deploy your package to npm either local or private you should be aware that npm will exclude
anything listed on your &lt;code&gt;.gitignore&lt;/code&gt; since we should ignore the generated code from git it need to inform npm to ignore
that rule and keep the &lt;code&gt;lib&lt;/code&gt; directory. The &lt;code&gt;.gitignore&lt;/code&gt; should be something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;/&lt;span class=&quot;hljs-keyword&quot;&gt;lib&lt;/span&gt;
/node_modules&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the &lt;code&gt;.npmignore&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;/.gitignore&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;hello-fat-arrows-and-let-keywords&quot;&gt;Hello fat arrows and let keywords&lt;/h2&gt;
&lt;p&gt;So all the heavy work has been done, in order to create our hello world we just need to code some &lt;code&gt;ES6&lt;/code&gt; in our
&lt;code&gt;src/main.js&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; Router = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;vertx-web-js/router&quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; server = vertx.createHttpServer();

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; router = Router.router(vertx);

router.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;).handler((ctx) =&gt; {

    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; response = ctx.response();
    response.putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;);

    response.end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello ES6 World!&quot;&lt;/span&gt;);
});

server.requestHandler(router.accept).listen(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see we’re using fat arrows instead of writing a function closure and scoped variables using &lt;code&gt;let&lt;/code&gt; keyword. If
you now compile your project:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;npm &lt;span class=&quot;hljs-command&quot;&gt;run&lt;/span&gt; build&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then start it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;npm&lt;/span&gt; start&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You have your first back to the future &lt;code&gt;ES6&lt;/code&gt; verticle!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Wed, 25 Nov 2015 01:00:00 +0100</pubDate>
          <link>https://vertx.io/blog/vert-x-es6-back-to-the-future</link>
          <guid isPermaLink="true">https://vertx.io/blog/vert-x-es6-back-to-the-future</guid>
          <author>
            <name>pmlopes</name>
            <uri>http://github.com/pmlopes</uri>
          </author>
        </item>
      
        <item>
          <title>Using the asynchronous SQL client</title>
          <description>
      &lt;article&gt;&lt;p&gt;Finally, back… This post is the fifth post of the introduction to vert.x blog series, after a not-that-small break. In this post we are going to see how we can use JDBC in a vert.x application, and this, using the asynchronous API provided by the &lt;a href=&quot;http://vertx.io/docs/vertx-jdbc-client/java/&quot;&gt;vertx-jdbc-client&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;previously-in-the-introduction-to-vert-x-series&quot;&gt;Previously in the introduction to vert.x series&lt;/h2&gt;
&lt;p&gt;As it was quite some time since the last post, let’s start by refreshing our mind about the four previous posts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;a href=&quot;https://vertx.io/blog/my-first-vert-x-3-application/&quot;&gt;first post&lt;/a&gt; has described how to build a vert.x application with Maven and execute unit tests.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://vertx.io/blog/vert-x-application-configuration/&quot;&gt;second post&lt;/a&gt; has described how this application can become configurable.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://vertx.io/blog/some-rest-with-vert-x/&quot;&gt;third post&lt;/a&gt; has introduced &lt;a href=&quot;http://vertx.io/docs/vertx-web/java/&quot;&gt;vertx-web&lt;/a&gt;, and a small collection management application has been developed. This application offers a REST API used by a HTML/JavaScript frontend.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://vertx.io/blog/unit-and-integration-tests/&quot;&gt;previous post&lt;/a&gt; has presented how you can run integration tests to ensure the behavior of your application.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this post, back to code. The current application uses an in-memory map to store the products. It’s time to use a database. In this post we are going to use &lt;a href=&quot;http://hsqldb.org/&quot;&gt;HSQL&lt;/a&gt;, but you can use any database providing a JDBC driver. Interactions with the database will be asynchronous and made using the &lt;a href=&quot;http://vertx.io/docs/vertx-jdbc-client/java/&quot;&gt;vertx-jdbc-client&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code of this post are available on this Github &lt;a href=&quot;https://github.com/cescoffier/my-vertx-first-app&quot;&gt;project&lt;/a&gt;, in the &lt;a href=&quot;https://github.com/cescoffier/my-vertx-first-app/tree/post-5&quot;&gt;post-5 branch&lt;/a&gt; branch.&lt;/p&gt;
&lt;h2 id=&quot;asynchronous-&quot;&gt;Asynchronous?&lt;/h2&gt;
&lt;p&gt;One of the vert.x characteristics is being asynchronous. With an asynchronous API, you don’t wait for a result, but you are notified when this result is ready. Just to illustrate this, let’s take a very simple example.&lt;/p&gt;
&lt;p&gt;Let’s imagine an &lt;code&gt;add&lt;/code&gt; method. Traditionally, you would use it like this: &lt;code&gt;int r = add(1, 1)&lt;/code&gt;. This is a synchronous API as you are waiting for the result. An asynchronous version of this API would be: &lt;code&gt;add(1, 1, r -&gt; { /* do something with the result */ })&lt;/code&gt;. In this version, you pass a &lt;code&gt;Handler&lt;/code&gt; called when the result has been computed. The method does not return anything, and could be implemented as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; b, Handler&lt;Integer&gt; resultHandler)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; r = a + b;
    resultHandler.handle(r);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just to avoid misconceptions, asynchronous API are not about threads. As we can see in the &lt;code&gt;add&lt;/code&gt; example, there are no threads involved.&lt;/p&gt;
&lt;h2 id=&quot;jdbc-yes-but-asynchronous&quot;&gt;JDBC yes, but asynchronous&lt;/h2&gt;
&lt;p&gt;So, now that we have seen some basics about asynchronous API, let’s have a look to the vertx-jdbc-client. This component lets us interact with a database through a JDBC driver. These interactions are asynchronous, so when you were doing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; sql &lt;span class=&quot;hljs-subst&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM Products&quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;ResultSet&lt;/span&gt; rs &lt;span class=&quot;hljs-subst&quot;&gt;=&lt;/span&gt; stmt&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;/span&gt;executeQuery(sql);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;it will be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;connection.query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM Products&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; -&gt; {
        // &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; something &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; the &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This model is more efficient as it avoids waiting for the result. You are notified when the result is available.&lt;/p&gt;
&lt;p&gt;Let’s now modify our application to use a database to store our products.&lt;/p&gt;
&lt;h2 id=&quot;some-maven-dependencies&quot;&gt;Some maven dependencies&lt;/h2&gt;
&lt;p&gt;The first things we need to do it to declare two new Maven dependencies in our &lt;code&gt;pom.xml&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.vertx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;vertx-jdbc-client&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;3.1.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;org.hsqldb&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;hsqldb&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;2.3.3&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first dependency provides the vertx-jdbc-client, while the second one provide the HSQL JDBC driver. If you want to use another database, change this dependency. You will also need to change the JDBC url and JDBC driver class name later.&lt;/p&gt;
&lt;h2 id=&quot;initializing-the-jdbc-client&quot;&gt;Initializing the JDBC client&lt;/h2&gt;
&lt;p&gt;Now that we have added these dependencies, it’s time to create our JDBC client:&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;MyFirstVerticle&lt;/code&gt; class, declare a new field &lt;code&gt;JDBCClient jdbc;&lt;/code&gt;, and add the following line at the beginning of the &lt;code&gt;start&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-setting&quot;&gt;jdbc = &lt;span class=&quot;hljs-value&quot;&gt;JDBCClient.createShared(vertx, config(), &lt;span class=&quot;hljs-string&quot;&gt;&quot;My-Whisky-Collection&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates an instance of JDBC client, configured with the configuration provided to the verticle. To work correctly this configuration needs to provide:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;url&lt;/em&gt; - the JDBC url such as &lt;code&gt;jdbc:hsqldb:mem:db?shutdown=true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;_driver&lt;em&gt;class&lt;/em&gt; - the JDBC driver class such as &lt;code&gt;org.hsqldb.jdbcDriver&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ok, we have the client, we need a connection to the database. This is achieved using the &lt;code&gt;jdbc.getConnection&lt;/code&gt; that take a &lt;code&gt;Handler&lt;AsyncResult&lt;SQLConnection&gt;&gt;&lt;/code&gt; as parameter. Let’s have a deeper look to this type. It’s a &lt;code&gt;Handler&lt;/code&gt;, so it is called when the result is ready. This result is an instance of &lt;code&gt;AsyncResult&lt;SQLConnection&gt;&lt;/code&gt;. &lt;code&gt;AsyncResult&lt;/code&gt; is a structure provided by vert.x that lets us know if the operation was completed successfully or failed. In case of success, it provides the result, here an instance of &lt;code&gt;SQLConnection&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you receive an instance of &lt;code&gt;AsyncResult&lt;/code&gt;, your code generally looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.failed()) {
  &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.err.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;The operation has failed...: &quot;&lt;/span&gt;
      + ar.cause().getMessage());
} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
  // &lt;span class=&quot;hljs-type&quot;&gt;Use&lt;/span&gt; the &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;:
  &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; = ar.&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;();
 }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, let’s go back to our &lt;code&gt;SQLConnection&lt;/code&gt;. We need to retrieve it, and then start the rest of the application. This changes how we start the application, as it will become asynchronous. So, if we divide our startup sequence into small chunks it would be something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;startBackend(
 &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;(connection)&lt;/span&gt; -&gt;&lt;/span&gt; createSomeData(connection,
     &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;(nothing)&lt;/span&gt; -&gt;&lt;/span&gt; startWebApp(
         &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;(http)&lt;/span&gt; -&gt;&lt;/span&gt; completeStartup(http, fut)
     ), fut
 ), fut);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;startBackend&lt;/code&gt; - retrieves a &lt;code&gt;SQLConnection&lt;/code&gt; and then calls the next step&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createSomeData&lt;/code&gt; - initializes the database and inserts some data. When done, it calls the next step&lt;/li&gt;
&lt;li&gt;&lt;code&gt;startWebApp&lt;/code&gt; - starts our web application&lt;/li&gt;
&lt;li&gt;&lt;code&gt;completeStartup&lt;/code&gt; - finalizes our start sequence&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;fut&lt;/code&gt; is the completion future passed by vert.x that let us report when we are started, or if an issue has been encountered while starting.&lt;/p&gt;
&lt;p&gt;Let’s have a look to &lt;code&gt;startBackend&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;private &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; startBackend(&lt;span class=&quot;hljs-type&quot;&gt;Handler&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;AsyncResult&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;SQLConnection&lt;/span&gt;&gt;&gt; next, &lt;span class=&quot;hljs-type&quot;&gt;Future&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;&gt; fut) {
    jdbc.getConnection(ar -&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.failed()) {
        fut.fail(ar.cause());
      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        next.handle(&lt;span class=&quot;hljs-type&quot;&gt;Future&lt;/span&gt;.succeededFuture(ar.&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;()));
      }
    });
  }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method retrieves a &lt;code&gt;SQLConnection&lt;/code&gt;, check whether this operation succeeded. If so, it calls the next step. In case of failure, it reports it.&lt;/p&gt;
&lt;p&gt;The other methods follow the same pattern: 1) check if the last operation has succeeded, 2) do the task, 3) call the next step.&lt;/p&gt;
&lt;h3 id=&quot;a-bit-of-sql-&quot;&gt;A bit of SQL…&lt;/h3&gt;
&lt;p&gt;Our client is ready, let’s now write some SQL statements. Let’s start by the &lt;code&gt;createSomeData&lt;/code&gt; method that is part of the startup sequence:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;private &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; createSomeData(&lt;span class=&quot;hljs-type&quot;&gt;AsyncResult&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;SQLConnection&lt;/span&gt;&gt; &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;,
    &lt;span class=&quot;hljs-type&quot;&gt;Handler&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;AsyncResult&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;&gt;&gt; next, &lt;span class=&quot;hljs-type&quot;&gt;Future&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;&gt; fut) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;.failed()) {
      fut.fail(&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;.cause());
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;hljs-type&quot;&gt;SQLConnection&lt;/span&gt; connection = &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;.&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;();
      connection.execute(
          &lt;span class=&quot;hljs-string&quot;&gt;&quot;CREATE TABLE IF NOT EXISTS Whisky (id INTEGER IDENTITY, name varchar(100), &quot;&lt;/span&gt; +
          &lt;span class=&quot;hljs-string&quot;&gt;&quot;origin varchar(100))&quot;&lt;/span&gt;,
          ar -&gt; {
            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.failed()) {
              fut.fail(ar.cause());
              connection.close();
              &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
            }
            connection.query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM Whisky&quot;&lt;/span&gt;, select -&gt; {
              &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (select.failed()) {
                fut.fail(ar.cause());
                connection.close();
                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
              }
              &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (select.&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;().getNumRows() == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {
                insert(
                    new &lt;span class=&quot;hljs-type&quot;&gt;Whisky&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bowmore 15 Years Laimrig&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Scotland, Islay&quot;&lt;/span&gt;),
                    connection,
                    (v) -&gt; insert(new &lt;span class=&quot;hljs-type&quot;&gt;Whisky&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Talisker 57° North&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Scotland, Island&quot;&lt;/span&gt;),
                        connection,
                        (r) -&gt; {
                          next.handle(&lt;span class=&quot;hljs-type&quot;&gt;Future&lt;/span&gt;.&lt;&lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;&gt;succeededFuture());
                          connection.close();
                        }));                                                    
              } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
                next.handle(&lt;span class=&quot;hljs-type&quot;&gt;Future&lt;/span&gt;.&lt;&lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;&gt;succeededFuture());
                connection.close();
              }
            });
          });
    }
  }&lt;/code&gt;&lt;/pre&gt;
This method checks that the `SQLConnection` is available and then start executing some SQL statements. First, it creates the tables if there are not there yet. As you can see, the method called is structured as follows:

&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;connection.execute(
    SQL statement,
    &lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;handler&lt;/span&gt; called &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; the statement has been executed
)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The handler receives an &lt;code&gt;AsyncResult&lt;Void&gt;&lt;/code&gt;, &lt;em&gt;i.e.&lt;/em&gt; a notification of the completion without an actual result.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;Closing connection&lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; Don’t forget to close the SQL connection when you are done. The connection will be given back to the connection pool and be reused.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;In the code of this handler, we check whether or not the statement has been executed correctly, and if so we check to see if the table already contains some data, if not, it inserts data using the &lt;code&gt;insert&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;private &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; insert(&lt;span class=&quot;hljs-type&quot;&gt;Whisky&lt;/span&gt; whisky, &lt;span class=&quot;hljs-type&quot;&gt;SQLConnection&lt;/span&gt; connection, &lt;span class=&quot;hljs-type&quot;&gt;Handler&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;AsyncResult&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;Whisky&lt;/span&gt;&gt;&gt; next) {
  &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; sql = &lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO Whisky (name, origin) VALUES ?, ?&quot;&lt;/span&gt;;
  connection.updateWithParams(sql,
      new &lt;span class=&quot;hljs-type&quot;&gt;JsonArray&lt;/span&gt;().add(whisky.getName()).add(whisky.getOrigin()),
      (ar) -&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.failed()) {
          next.handle(&lt;span class=&quot;hljs-type&quot;&gt;Future&lt;/span&gt;.failedFuture(ar.cause()));
          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
        }
        &lt;span class=&quot;hljs-type&quot;&gt;UpdateResult&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; = ar.&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;();
        // &lt;span class=&quot;hljs-type&quot;&gt;Build&lt;/span&gt; a new whisky instance &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; the generated id.
        &lt;span class=&quot;hljs-type&quot;&gt;Whisky&lt;/span&gt; w = new &lt;span class=&quot;hljs-type&quot;&gt;Whisky&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;.getKeys().getInteger(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), whisky.getName(), whisky.getOrigin());
        next.handle(&lt;span class=&quot;hljs-type&quot;&gt;Future&lt;/span&gt;.succeededFuture(w));
      });
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method uses the &lt;code&gt;updateWithParams&lt;/code&gt; method with an &lt;em&gt;INSERT&lt;/em&gt; statement, and pass values. This approach avoids SQL injection. Once the the statement has been executed, we creates a new &lt;code&gt;Whisky&lt;/code&gt; object with the created (auto-generated) id.&lt;/p&gt;
&lt;h2 id=&quot;some-rest-with-a-pinch-of-sql&quot;&gt;Some REST with a pinch of SQL&lt;/h2&gt;
&lt;p&gt;The method described  above is part of our start sequence. But what about the method invoked by our REST API. Let’s have a look to the &lt;code&gt;getAll&lt;/code&gt; method. This method is called by the web front-end to retrieve all stored products:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;private &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; getAll(&lt;span class=&quot;hljs-type&quot;&gt;RoutingContext&lt;/span&gt; routingContext) {
    jdbc.getConnection(ar -&gt; {
      &lt;span class=&quot;hljs-type&quot;&gt;SQLConnection&lt;/span&gt; connection = ar.&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;();
      connection.query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM Whisky&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; -&gt; {
        &lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt;&lt;&lt;span class=&quot;hljs-type&quot;&gt;Whisky&lt;/span&gt;&gt; whiskies = &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;.&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;().getRows().stream().map(&lt;span class=&quot;hljs-type&quot;&gt;Whisky&lt;/span&gt;::new).collect(&lt;span class=&quot;hljs-type&quot;&gt;Collectors&lt;/span&gt;.toList());
        routingContext.response()
            .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json; charset=utf-8&quot;&lt;/span&gt;)
            .&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Json&lt;/span&gt;.encodePrettily(whiskies));
        connection.close(); // &lt;span class=&quot;hljs-type&quot;&gt;Close&lt;/span&gt; the connection        
      });
    });
  }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method gets a &lt;code&gt;SQLConnection&lt;/code&gt;, and then issue a query. Once the result has been retrieved it writes the HTTP response as before. The &lt;code&gt;getOne&lt;/code&gt;, &lt;code&gt;deleteOne&lt;/code&gt;, &lt;code&gt;updateOne&lt;/code&gt; and &lt;code&gt;addOne&lt;/code&gt; methods follow the same pattern. Notice that the connection can be closed after the response has been written.&lt;/p&gt;
&lt;p&gt;Let’s have a look to the result provided to the handler passed to the &lt;code&gt;query&lt;/code&gt; method. It gets a &lt;code&gt;ResultSet&lt;/code&gt;, which contains the query result. Each row is a &lt;code&gt;JsonObject&lt;/code&gt;, so if your data object has a constructor taking a &lt;code&gt;JsonObject&lt;/code&gt; as unique argument, creating there objects is straightforward.&lt;/p&gt;
&lt;h2 id=&quot;test-test-and-test-again&quot;&gt;Test, test, and test again&lt;/h2&gt;
&lt;p&gt;We need to slightly update our tests to configure the &lt;code&gt;JDBCClient&lt;/code&gt;. In the &lt;code&gt;MyFirstVertilceTest&lt;/code&gt; class, change the &lt;code&gt;DeploymentOption&lt;/code&gt; object created in the &lt;code&gt;setUp&lt;/code&gt; method to be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;DeploymentOptions &lt;span class=&quot;hljs-keyword&quot;&gt;options&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DeploymentOptions()
        .setConfig(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject()
            .&lt;span class=&quot;hljs-keyword&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http.port&quot;&lt;/span&gt;, port)
            .&lt;span class=&quot;hljs-keyword&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;url&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbc:hsqldb:mem:test?shutdown=true&quot;&lt;/span&gt;)
            .&lt;span class=&quot;hljs-keyword&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;driver_class&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;org.hsqldb.jdbcDriver&quot;&lt;/span&gt;)
        );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to the &lt;code&gt;http.port&lt;/code&gt;, we also put the JDBC url and the class of the JDBC driver. We use an in-memory database for tests.&lt;/p&gt;
&lt;p&gt;The same modification needs to be done in the &lt;code&gt;src/test/resources/my-it-config.json&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;http.port&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-variable&quot;&gt;${http.port}&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;url&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbc:hsqldb:mem:it-test?shutdown=true&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;driver_class&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;org.hsqldb.jdbcDriver&quot;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;src/main/conf/my-application-conf.json&lt;/code&gt; file also needs to be updated, not for the tests, but to run the application:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;{
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;http.port&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;8082&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;url&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbc:hsqldb:file:db/whiskies&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;driver_class&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;org.hsqldb.jdbcDriver&quot;&lt;/span&gt;
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The JDBC url is a bit different in this last file, as we store the database on the file system.&lt;/p&gt;
&lt;h2 id=&quot;show-time-&quot;&gt;Show time!&lt;/h2&gt;
&lt;p&gt;Let’s now build our application:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mvn clean package&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As we didn’t change the API (neither the public java one nor the REST), test should run smoothly.&lt;/p&gt;
&lt;p&gt;Then launch the application with:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;java -jar target/my-first-app-1.0-SNAPSHOT-fat.jar -conf src/main/conf/my-application-conf.json&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Open your browser to &lt;code&gt;http://localhost:8082/assets/index.html&lt;/code&gt;, and you should see the application using the database. This time the products are stored in a database persisted on the file system. So, if we stop and restart the application, the data is restored.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post, we saw how you can use JDBC database with vert.x, and thus without too much burden. You may have been surprised by the asynchronous development model, but once you start using it, it’s hard to come back.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&quot;http://vertx.io/blog/combine-vert-x-and-mongo-to-build-a-giant/&quot;&gt;next post&lt;/a&gt;, we see how the same application can use mongoDB instead of HSQL.&lt;/p&gt;
&lt;p&gt;Stay tuned, and happy coding !&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 19 Oct 2015 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/using-the-asynchronous-sql-client</link>
          <guid isPermaLink="true">https://vertx.io/blog/using-the-asynchronous-sql-client</guid>
          <author>
            <name>cescoffier</name>
            <uri>http://github.com/cescoffier</uri>
          </author>
        </item>
      
        <item>
          <title>Vert.x 3.1.0 is released !</title>
          <description>
      &lt;article&gt;&lt;p&gt;I’m pleased to announce the release of Vert.x 3.1!&lt;/p&gt;
&lt;p&gt;Some of the highlights of this release include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://vertx.io/docs/vertx-sync/java/&quot;&gt;Vertx-sync&lt;/a&gt; is a set of utilities that allow you to perform asynchronous
operations and receive events in a synchronous way, but without blocking kernel threads.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://vertx.io/docs/vertx-stomp/java/&quot;&gt;Vertx-stomp&lt;/a&gt; is an implementation of a STOMP server and client.
You can use the STOMP server with other clients and use the STOMP client with other servers.
The server and the client supports the version 1.0, 1.1 and 1.2 of the STOMP protocol.
The STOMP server can also be used as a bridge with the
vert.x event bus.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://vertx.io/docs/vertx-shell/java/&quot;&gt;Vertx-shell&lt;/a&gt; is a command line interface for the Vert.x runtime available from
regular terminals using different protocols.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Re-implementation of the Starter class and related functionality. And now redeploy is back!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Full release notes can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.1-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.1-Release-Notes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Breaking changes here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.1.0---Breaking-changes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.1.0---Breaking-changes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NPM for the event-bus client here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many thanks to all the committers and community whose contributions made this possible.&lt;/p&gt;
&lt;p&gt;A special thanks to the full-time team - Clement, Julien and Paulo who put in a lot of work to get this out :)&lt;/p&gt;
&lt;p&gt;Next stop is Vert.x 3.2 which we hope to have out before Christmas.&lt;/p&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.1.0%22&quot;&gt;Maven Central&lt;/a&gt;
 and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.1.0/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Thu, 08 Oct 2015 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/vert-x-3-1-0-is-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/vert-x-3-1-0-is-released</guid>
          <author>
            <name>purplefox</name>
            <uri>http://github.com/purplefox</uri>
          </author>
        </item>
      
        <item>
          <title>Contract Driven REST Services with Vert.x3</title>
          <description>
      &lt;article&gt;&lt;p&gt;We see a new trend in development where we are shifting from developing applications to develop APIs. More and more we see services being offered as REST APIs that we are allowed to consume and we already see this trend from the big names in the industry, e.g.: &lt;a href=&quot;https://developers.facebook.com/&quot;&gt;Facebook&lt;/a&gt;, &lt;a href=&quot;https://www.mediawiki.org/wiki/API:Main_page&quot;&gt;Wikipedia&lt;/a&gt;, &lt;a href=&quot;https://developer.amazon.com/public/apis&quot;&gt;Amazon&lt;/a&gt;, &lt;a href=&quot;https://dev.twitter.com/overview/documentation&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;https://developers.google.com/apis-explorer/#p/&quot;&gt;Google&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/dev/api&quot;&gt;Reddit&lt;/a&gt; they all offer APIs.&lt;/p&gt;
&lt;p&gt;Of course making an REST API using Vert.x is quite simple, just use &lt;a href=&quot;http://vertx.io/docs/#web&quot;&gt;Vert.x Web&lt;/a&gt; and you can start writing your API in seconds, however an API without documentation is not an API since no developer will know how to use it. However this is one of the most sensitive issues to tackle in software development, nobody likes to write documentation. However, in the REST age where REST-based web-services are ubiquitous, documentation for public web-services is a necessity. There are a lot of tools out there, two of the most popular are without a doubt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://swagger.io&quot;&gt;Swagger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://raml.org&quot;&gt;RAML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both frameworks have a large ecosystem of tools and tooling around but they tackle the documentation from two different perspectives. While Swagger is purely a documentation tool it tackles the problem from bottom up and RAML does document top down. They both rely on a document (&lt;code&gt;JSON&lt;/code&gt; for Swagger, &lt;code&gt;YAML&lt;/code&gt; for RAML).&lt;/p&gt;
&lt;p&gt;I’ll now go over building a simple Hello World API, document it and test it. For this example I’ll choose RAML since it feels more natural to the way we code with Vert.x Web.&lt;/p&gt;
&lt;h2 id=&quot;define-the-hello-world-api&quot;&gt;Define the Hello World API&lt;/h2&gt;
&lt;p&gt;We need a contract and as with any other development we need some specification, You can learn about RAML in its &lt;a href=&quot;http://raml.org&quot;&gt;website&lt;/a&gt; and quickly see how easy it is to get started. So we start with the following specification:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#%RAML &lt;span class=&quot;hljs-number&quot;&gt;0.8&lt;/span&gt;
&lt;span class=&quot;hljs-string&quot;&gt;title:&lt;/span&gt; Hello world REST API
&lt;span class=&quot;hljs-string&quot;&gt;baseUri:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;http:&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8080/&lt;/span&gt;
&lt;span class=&quot;hljs-string&quot;&gt;version:&lt;/span&gt; v1
/&lt;span class=&quot;hljs-string&quot;&gt;hello:&lt;/span&gt;
&lt;span class=&quot;hljs-label&quot;&gt;  get:&lt;/span&gt;
&lt;span class=&quot;hljs-label&quot;&gt;    responses:&lt;/span&gt;
&lt;span class=&quot;hljs-label&quot;&gt;      200:&lt;/span&gt;
&lt;span class=&quot;hljs-label&quot;&gt;        body:&lt;/span&gt;
          application/&lt;span class=&quot;hljs-string&quot;&gt;json:&lt;/span&gt;
&lt;span class=&quot;hljs-label&quot;&gt;            schema:&lt;/span&gt; |
              { &lt;span class=&quot;hljs-string&quot;&gt;&quot;$schema&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://json-schema.org/schema&quot;&lt;/span&gt;,
                &lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt;,
                &lt;span class=&quot;hljs-string&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World Greeting&quot;&lt;/span&gt;,
                &lt;span class=&quot;hljs-string&quot;&gt;&quot;properties&quot;&lt;/span&gt;: {
                  &lt;span class=&quot;hljs-string&quot;&gt;&quot;greeting&quot;&lt;/span&gt;:  { &lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;string&quot;&lt;/span&gt; }
                },
                &lt;span class=&quot;hljs-string&quot;&gt;&quot;required&quot;&lt;/span&gt;: [ &lt;span class=&quot;hljs-string&quot;&gt;&quot;greeting&quot;&lt;/span&gt; ]
              }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So if you didn’t understood why I named RAML as a top down documentation tool, I think it becomes clear now. So there are some basic definition on the top of the file like, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;baseUri&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt; which should be self explanatory.&lt;/p&gt;
&lt;p&gt;And then we start with the API documentation, so we specify that at the &lt;code&gt;URL&lt;/code&gt; &lt;code&gt;/hello&lt;/code&gt; using the HTTP verb &lt;code&gt;GET&lt;/code&gt; you are expected to get a response with status code &lt;code&gt;200&lt;/code&gt; and the body of the response should have content type &lt;code&gt;application/json&lt;/code&gt;. This is a very minimal document, one could go over and specify the &lt;a href=&quot;http://json-schema.org/&quot;&gt;&lt;code&gt;json schema&lt;/code&gt;&lt;/a&gt; for the response, input values, etc…, however lets just keep it simple for this example.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;IDE ? &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; if you do not like to write yaml in your editor you can always use the &lt;a href=&quot;http://raml.org/projects.html&quot;&gt;API Designer&lt;/a&gt; which gives you instant feedback on your API document and provides a testing platform&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;.&lt;/p&gt;
&lt;h2 id=&quot;implement-the-api&quot;&gt;Implement the API&lt;/h2&gt;
&lt;p&gt;So you got your contract, time to implement it, this is a very simple API so I’ll jump to the code immediately:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AbstractVerticle&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    Router router = Router.router(vertx);

    router.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/hello&quot;&lt;/span&gt;).handler(rc -&gt; {
      rc.response()
          .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;)
          .end(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject().put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;greeting&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;).encode());
    });

    vertx.createHttpServer().requestHandler(router::accept).listen(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see the code resembles the contract document, when there is a &lt;code&gt;GET&lt;/code&gt; request to &lt;code&gt;/hello&lt;/code&gt; we send to the client a empty &lt;code&gt;JSON&lt;/code&gt; document &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;are-we-done-&quot;&gt;Are we done?&lt;/h2&gt;
&lt;p&gt;The answer is &lt;strong&gt;NO!!!&lt;/strong&gt; how can we be sure that our implementation does comply to the contract? We need to test. As I wrote before there is no specific support for Vert.x from RAML or other tools however in this case it is not a problem we can still test our code without having the need to implement a test framework from the ground up.&lt;/p&gt;
&lt;h2 id=&quot;testing-our-contract&quot;&gt;Testing our contract&lt;/h2&gt;
&lt;p&gt;The initial step is to setup a test, this should be trivial we are using Java (although we could test any of Vert.x
supported languages using the same technique). We create a &lt;a href=&quot;http://junit.org/&quot;&gt;JUnit&lt;/a&gt; unit test.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;content&#39;&gt;JUnit ? ! For this example I will be using JUnit instead of Vert.x Test mostly to let you know that Vert.x isn’t an opinionated framework, so you are free to choose the tool that best fits you.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;APITest&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-annotation&quot;&gt;@BeforeClass&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bootApp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    Runner.run(App.class);
  }

  &lt;span class=&quot;hljs-annotation&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;testHelloEndpoint&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So at this moment you have a simple test, I’ll share the code of the runner class (basically it just instantiates a
&lt;code&gt;Vertx&lt;/code&gt; instance and load the &lt;code&gt;verticle&lt;/code&gt; we just implemented above) and has a empty test &lt;code&gt;testHelloEndpoint&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;load-the-api-definition-into-the-test&quot;&gt;Load the API definition into the test&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;APITest&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; RamlDefinition api = RamlLoaders.fromClasspath()
        .load(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/hello.raml&quot;&lt;/span&gt;)
        .assumingBaseUri(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://localhost:8080/&quot;&lt;/span&gt;);

  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; CheckingWebTarget checking;

  ...
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the first step is to load the &lt;code&gt;API&lt;/code&gt; definition into our test and have a reference to a &lt;code&gt;CheckingWebTarget&lt;/code&gt; object. The checking object is where you can perform assertions, but to do this we need some client make REST calls in order to test.&lt;/p&gt;
&lt;h3 id=&quot;create-a-rest-client&quot;&gt;Create a REST client&lt;/h3&gt;
&lt;p&gt;There are many options for this, you could use &lt;code&gt;JAX-RS&lt;/code&gt;, &lt;code&gt;RestAssured&lt;/code&gt;, &lt;code&gt;RestEasy&lt;/code&gt;, etc… so I’ll pick &lt;code&gt;RestEasy&lt;/code&gt; for now:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;APITest&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; RamlDefinition api = RamlLoaders.fromClasspath()
      .load(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/hello.raml&quot;&lt;/span&gt;)
      .assumingBaseUri(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://localhost:8080/&quot;&lt;/span&gt;);

  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; ResteasyClient client = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ResteasyClientBuilder().build();
  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; CheckingWebTarget checking;

  &lt;span class=&quot;hljs-annotation&quot;&gt;@BeforeClass&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bootApp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    Runner.run(App.class);
  }

  &lt;span class=&quot;hljs-annotation&quot;&gt;@Before&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;createTarget&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    checking = api.createWebTarget(client.target(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;));
  }

  ...
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;implement-the-test&quot;&gt;Implement the test&lt;/h3&gt;
&lt;p&gt;All of the boilerplate code is in place and if you look at the previous section you will see that it wasn’t that bad, just a few lines and you loaded the RAML contract, created a REST client and started up your application and all this under ~10 lines of code.&lt;/p&gt;
&lt;p&gt;So lets finish and implement the verification of the contract:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;APITest&lt;/span&gt; &lt;/span&gt;{
  ...

  &lt;span class=&quot;hljs-annotation&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;testHelloEndpoint&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    checking.path(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/hello&quot;&lt;/span&gt;).request().get();
    Assert.assertThat(checking.getLastReport(), RamlMatchers.hasNoViolations());
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you run your tests, you will see:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;13:09:28.200 [main] DEBUG o.a.h.i.conn.DefaultClientConnection - Sending request: GET /hello HTTP/1.1
13:09:28.201 [&lt;span class=&quot;hljs-link_label&quot;&gt;main&lt;/span&gt;] DEBUG org.apache.http.wire -  &gt;&gt; &quot;GET /hello HTTP/1.1[&lt;span class=&quot;hljs-link_label&quot;&gt;\r&lt;/span&gt;][&lt;span class=&quot;hljs-link_reference&quot;&gt;\n&lt;/span&gt;]&quot;
13:09:28.202 [&lt;span class=&quot;hljs-link_label&quot;&gt;main&lt;/span&gt;] DEBUG org.apache.http.wire -  &gt;&gt; &quot;Accept-Encoding: gzip, deflate[&lt;span class=&quot;hljs-link_label&quot;&gt;\r&lt;/span&gt;][&lt;span class=&quot;hljs-link_reference&quot;&gt;\n&lt;/span&gt;]&quot;
13:09:28.202 [&lt;span class=&quot;hljs-link_label&quot;&gt;main&lt;/span&gt;] DEBUG org.apache.http.wire -  &gt;&gt; &quot;Host: localhost:8080[&lt;span class=&quot;hljs-link_label&quot;&gt;\r&lt;/span&gt;][&lt;span class=&quot;hljs-link_reference&quot;&gt;\n&lt;/span&gt;]&quot;
13:09:28.202 [&lt;span class=&quot;hljs-link_label&quot;&gt;main&lt;/span&gt;] DEBUG org.apache.http.wire -  &gt;&gt; &quot;Connection: Keep-Alive[&lt;span class=&quot;hljs-link_label&quot;&gt;\r&lt;/span&gt;][&lt;span class=&quot;hljs-link_reference&quot;&gt;\n&lt;/span&gt;]&quot;
13:09:28.202 [&lt;span class=&quot;hljs-link_label&quot;&gt;main&lt;/span&gt;] DEBUG org.apache.http.wire -  &gt;&gt; &quot;[&lt;span class=&quot;hljs-link_label&quot;&gt;\r&lt;/span&gt;][&lt;span class=&quot;hljs-link_reference&quot;&gt;\n&lt;/span&gt;]&quot;
13:09:28.202 [main] DEBUG org.apache.http.headers - &gt;&gt; GET /hello HTTP/1.1
13:09:28.202 [main] DEBUG org.apache.http.headers - &gt;&gt; Accept-Encoding: gzip, deflate
13:09:28.203 [main] DEBUG org.apache.http.headers - &gt;&gt; Host: localhost:8080
13:09:28.203 [main] DEBUG org.apache.http.headers - &gt;&gt; Connection: Keep-Alive
13:09:28.412 [&lt;span class=&quot;hljs-link_label&quot;&gt;main&lt;/span&gt;] DEBUG org.apache.http.wire -  &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt; &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;HTTP&lt;/span&gt;/&lt;span class=&quot;hljs-attribute&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;OK&lt;/span&gt;[\&lt;span class=&quot;hljs-attribute&quot;&gt;r&lt;/span&gt;][\&lt;span class=&quot;hljs-attribute&quot;&gt;n&lt;/span&gt;]&quot;
&lt;span class=&quot;hljs-attribute&quot;&gt;13:09:28.413&lt;/span&gt; [&lt;span class=&quot;hljs-attribute&quot;&gt;main&lt;/span&gt;] &lt;span class=&quot;hljs-attribute&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;org.apache.http.wire&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;-&lt;/span&gt;  &lt;&lt; &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;content-type:&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;application&lt;/span&gt;/&lt;span class=&quot;hljs-attribute&quot;&gt;json&lt;/span&gt;[\&lt;span class=&quot;hljs-attribute&quot;&gt;r&lt;/span&gt;][\&lt;span class=&quot;hljs-attribute&quot;&gt;n&lt;/span&gt;]&quot;
&lt;span class=&quot;hljs-attribute&quot;&gt;13:09:28.413&lt;/span&gt; [&lt;span class=&quot;hljs-attribute&quot;&gt;main&lt;/span&gt;] &lt;span class=&quot;hljs-attribute&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;org.apache.http.wire&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;-&lt;/span&gt;  &lt;&lt; &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;Content-Length:&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;2&lt;/span&gt;[\&lt;span class=&quot;hljs-attribute&quot;&gt;r&lt;/span&gt;][\&lt;span class=&quot;hljs-attribute&quot;&gt;n&lt;/span&gt;]&quot;
&lt;span class=&quot;hljs-attribute&quot;&gt;13:09:28.413&lt;/span&gt; [&lt;span class=&quot;hljs-attribute&quot;&gt;main&lt;/span&gt;] &lt;span class=&quot;hljs-attribute&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;org.apache.http.wire&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;-&lt;/span&gt;  &lt;&lt; &quot;[\&lt;span class=&quot;hljs-attribute&quot;&gt;r&lt;/span&gt;][\&lt;span class=&quot;hljs-attribute&quot;&gt;n&lt;/span&gt;]&quot;
&lt;span class=&quot;hljs-attribute&quot;&gt;13:09:28.414&lt;/span&gt; [&lt;span class=&quot;hljs-attribute&quot;&gt;main&lt;/span&gt;] &lt;span class=&quot;hljs-attribute&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;o.a.h.i.conn.DefaultClientConnection&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;Receiving&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;response:&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;HTTP&lt;/span&gt;/&lt;span class=&quot;hljs-attribute&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;OK&lt;/span&gt;
&lt;span class=&quot;hljs-attribute&quot;&gt;13:09:28.414&lt;/span&gt; [&lt;span class=&quot;hljs-attribute&quot;&gt;main&lt;/span&gt;] &lt;span class=&quot;hljs-attribute&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;org.apache.http.headers&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;-&lt;/span&gt; &lt;&lt; &lt;span class=&quot;hljs-attribute&quot;&gt;HTTP&lt;/span&gt;/&lt;span class=&quot;hljs-attribute&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;OK&lt;/span&gt;
&lt;span class=&quot;hljs-attribute&quot;&gt;13:09:28.415&lt;/span&gt; [&lt;span class=&quot;hljs-attribute&quot;&gt;main&lt;/span&gt;] &lt;span class=&quot;hljs-attribute&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;org.apache.http.headers&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;-&lt;/span&gt; &lt;&lt; &lt;span class=&quot;hljs-attribute&quot;&gt;content-type:&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;application&lt;/span&gt;/&lt;span class=&quot;hljs-attribute&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;hljs-attribute&quot;&gt;13:09:28.415&lt;/span&gt; [&lt;span class=&quot;hljs-attribute&quot;&gt;main&lt;/span&gt;] &lt;span class=&quot;hljs-attribute&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;org.apache.http.headers&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;-&lt;/span&gt; &lt;&lt; &lt;span class=&quot;hljs-attribute&quot;&gt;Content-Length:&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;hljs-attribute&quot;&gt;13:09:28.429&lt;/span&gt; [&lt;span class=&quot;hljs-attribute&quot;&gt;main&lt;/span&gt;] &lt;span class=&quot;hljs-attribute&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;org.apache.http.wire&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;-&lt;/span&gt;  &lt;&lt; &quot;{}&quot;
&lt;span class=&quot;hljs-attribute&quot;&gt;Tests&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;run:&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attribute&quot;&gt;Failures:&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-attribute&quot;&gt;Errors:&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-attribute&quot;&gt;Skipped:&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-attribute&quot;&gt;Time&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;elapsed:&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;1.076&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;sec&lt;/span&gt;

&lt;span class=&quot;hljs-attribute&quot;&gt;Results&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;hljs-attribute&quot;&gt;Tests&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;run:&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attribute&quot;&gt;Failures:&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-attribute&quot;&gt;Errors:&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-attribute&quot;&gt;Skipped:&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we are done, we now have a API that follow the contract, you can now keep developing your API and implementation and have a test driven approach to be sure that the contract is not broken.&lt;/p&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;Until now you have learn how to integrate RAML into Vert.x and CI, however the users of your API will not be able to know much about the API yet since its documentation is not publicly available. So lets publish online the documentation of your API, of course if your API is private you do not need to follow these steps.&lt;/p&gt;
&lt;p&gt;In order to do this all we need it to include in our application the &lt;a href=&quot;https://github.com/mulesoft/api-console&quot;&gt;RAML console&lt;/a&gt;, the fastest way to do this is just download a &lt;a href=&quot;https://github.com/mulesoft/api-console/releases&quot;&gt;release&lt;/a&gt; to &lt;code&gt;src/main/resouces/webroot&lt;/code&gt; and in the original application [Vert.x Router] we add a Static Content Handler to serve the console files. Your application source code should look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AbstractVerticle&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    Router router = Router.router(vertx);

    router.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/hello&quot;&lt;/span&gt;).handler(rc -&gt; {
      rc.response()
          .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;)
          .end(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject().put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;greeting&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;).encode());
    });

    &lt;span class=&quot;hljs-comment&quot;&gt;// optionally enable the web console so users can play with your API&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;// online from their web browsers&lt;/span&gt;
    router.route().handler(StaticHandler.create());

    vertx.createHttpServer().requestHandler(router::accept).listen(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you start you application open a browser pointing at the &lt;a href=&quot;http://localhost:8080?raml=/api/hello.raml&quot;&gt;console&lt;/a&gt;. Once you do that you should be presented with something similar to this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blog/vertx3-contract-driven-rest-services/raml-console.png&quot; alt=&quot;apiconsole&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;article-source-code&quot;&gt;Article source code&lt;/h2&gt;
&lt;p&gt;You can get the full source code for this article &lt;a href=&quot;https://github.com/pmlopes/vert-x3-experiments/tree/experiments/raml&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Thu, 17 Sep 2015 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/contract-driven-rest-services-with-vert-x3</link>
          <guid isPermaLink="true">https://vertx.io/blog/contract-driven-rest-services-with-vert-x3</guid>
          <author>
            <name>pmlopes</name>
            <uri>http://github.com/pmlopes</uri>
          </author>
        </item>
      
        <item>
          <title>Writing secure Vert.x Web apps</title>
          <description>
      &lt;article&gt;&lt;p&gt;This is a starting guide for securing vert.x web applications. It is by no means a comprehensive guide on web application security such as &lt;a href=&quot;https://www.owasp.org&quot;&gt;OWASP&lt;/a&gt;. Standard rules and practices apply to vert.x apps as if they would to any other web framework.&lt;/p&gt;
&lt;p&gt;The post will cover the items that always seem to come up on forums.&lt;/p&gt;
&lt;h2 id=&quot;don-t-run-as-root&quot;&gt;Don’t run as root&lt;/h2&gt;
&lt;p&gt;It is a common practise that your devops team member will constantly say, one shall run a service with the least amount of privileges necessary and no more. Although this might sound like folklore to less experienced developers that hit an issue when trying to run on privileged ports 80, 443, running as root solves it quickly but open a door to bigger problems. Lets look at this code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AbstractVerticle&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{

    Router router = Router.router(vertx);

    router.route().handler(StaticHandler.create(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;));

    vertx.createHttpServer().requestHandler(router::accept).listen(&lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When started with the &lt;code&gt;CWD&lt;/code&gt; set to &lt;code&gt;/&lt;/code&gt; (&lt;code&gt;java -Dvertx.cwd=/ ...&lt;/code&gt;) you just created a simple file server for all your server storage. Now imagine that you want to start this application you will hit the error:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;Aug &lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;02&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt; PM io&lt;span class=&quot;hljs-class&quot;&gt;.vertx&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.core&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.http&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.impl&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.HttpServerImpl&lt;/span&gt;
SEVERE: java&lt;span class=&quot;hljs-class&quot;&gt;.net&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.SocketException&lt;/span&gt;: Permission denied&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So if you do now run as &lt;code&gt;root&lt;/code&gt; it will start, however in your browser now try to navigate to: &lt;code&gt;http://localhost/etc/shadow&lt;/code&gt; congratulations you just exposed your server &lt;code&gt;logins&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;code&gt;passwords&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;There are several ways to run as a under privileged user, you can use &lt;code&gt;iptables&lt;/code&gt; to forward requests to higher ports, use &lt;code&gt;authbind&lt;/code&gt;, run behind a proxy like &lt;code&gt;ngnix&lt;/code&gt;, etc…&lt;/p&gt;
&lt;h2 id=&quot;sessions&quot;&gt;Sessions&lt;/h2&gt;
&lt;p&gt;Many applications are going to deal with user sessions at some point.&lt;/p&gt;
&lt;p&gt;Session cookies should have the &lt;code&gt;SECURE&lt;/code&gt; and &lt;code&gt;HTTPOnly&lt;/code&gt; flags set. This ensures that they can only be sent over &lt;code&gt;HTTPS&lt;/code&gt; (you are using &lt;code&gt;HTTPS&lt;/code&gt; right?) and there is no script access to the cookie client side:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;Router router = Router.router(vertx);

    router.route().handler(CookieHandler.create());
    router.route().handler(SessionHandler
        .create(LocalSessionStore.create(vertx))
        .setCookieHttpOnlyFlag(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;)
        .setCookieSecureFlag(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;)
    );

    router.route().handler(routingContext -&gt; {

      Session session = routingContext.session();

      Integer cnt = session.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hitcount&quot;&lt;/span&gt;);
      cnt = (cnt == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; : cnt) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;

      session.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hitcount&quot;&lt;/span&gt;, cnt);

      routingContext.response().end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hitcount: &quot;&lt;/span&gt; + cnt);
    });

    vertx.createHttpServer().requestHandler(router::accept).listen(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in this case when inspecting your browser you should see:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blog/vertx3-secure-webapps/nocookie.png&quot; alt=&quot;nocookie&quot;&gt;&lt;/p&gt;
&lt;p&gt;Of course if you do not do that any script on your browser has the capability of reading, sniffing hijacking or tampering your sessions.&lt;/p&gt;
&lt;h2 id=&quot;security-headers&quot;&gt;Security Headers&lt;/h2&gt;
&lt;p&gt;There are plenty of security headers that help improve security with just a couple of lines of code. There is no need to explain them here since there are good &lt;a href=&quot;http://recxltd.blogspot.nl/2012/03/seven-web-server-http-headers-that.html&quot;&gt;articles&lt;/a&gt; online that will probably do it better than me.&lt;/p&gt;
&lt;p&gt;Here is how one could implement a couple of them:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AbstractVerticle&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{

    Router router = Router.router(vertx);
    router.route().handler(ctx -&gt; {
      ctx.response()
          &lt;span class=&quot;hljs-comment&quot;&gt;// do not allow proxies to cache the data&lt;/span&gt;
          .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Cache-Control&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;no-store, no-cache&quot;&lt;/span&gt;)
          &lt;span class=&quot;hljs-comment&quot;&gt;// prevents Internet Explorer from MIME - sniffing a&lt;/span&gt;
          &lt;span class=&quot;hljs-comment&quot;&gt;// response away from the declared content-type&lt;/span&gt;
          .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X-Content-Type-Options&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;nosniff&quot;&lt;/span&gt;)
          &lt;span class=&quot;hljs-comment&quot;&gt;// Strict HTTPS (for about ~6Months)&lt;/span&gt;
          .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Strict-Transport-Security&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;max-age=&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;15768000&lt;/span&gt;)
          &lt;span class=&quot;hljs-comment&quot;&gt;// IE8+ do not allow opening of attachments in the context of this resource&lt;/span&gt;
          .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X-Download-Options&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;noopen&quot;&lt;/span&gt;)
          &lt;span class=&quot;hljs-comment&quot;&gt;// enable XSS for IE&lt;/span&gt;
          .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X-XSS-Protection&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1; mode=block&quot;&lt;/span&gt;)
          &lt;span class=&quot;hljs-comment&quot;&gt;// deny frames&lt;/span&gt;
          .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X-FRAME-OPTIONS&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;DENY&quot;&lt;/span&gt;);
    });

    vertx.createHttpServer().requestHandler(router::accept).listen(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;cross-site-request-forgery-csrf-protection&quot;&gt;Cross-Site Request Forgery (CSRF) Protection&lt;/h2&gt;
&lt;p&gt;Vert.x web provides CSRF protection using an included handler. To enable CSRF protections you need to add it to your router as you would add any other handler:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AbstractVerticle&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{

    Router router = Router.router(vertx);

    router.route().handler(CookieHandler.create());
    router.route().handler(SessionHandler
        .create(LocalSessionStore.create(vertx))
        .setCookieSecureFlag(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;)
    );
    router.route().handler(CSRFHandler.create(&lt;span class=&quot;hljs-string&quot;&gt;&quot;not a good secret&quot;&lt;/span&gt;));

    router.route().handler(ctx -&gt; {
      ...
    });&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The handler adds a CSRF token to requests which mutate state. In order change the state a (&lt;code&gt;XSRF-TOKEN&lt;/code&gt;) cookie is set with a unique token, that is expected to be sent back in a (&lt;code&gt;X-XSRF-TOKEN&lt;/code&gt;) header.&lt;/p&gt;
&lt;h2 id=&quot;limit-uploads&quot;&gt;Limit uploads&lt;/h2&gt;
&lt;p&gt;When dealing with uploads &lt;strong&gt;always&lt;/strong&gt; define a upper bound, otherwise you will be vulnerable to &lt;code&gt;DDoS&lt;/code&gt; attacks. For example lets say that you have the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AbstractVerticle&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{

    Router router = Router.router(vertx);

    router.route().handler(BodyHandler.create());

    router.route().handler(ctx -&gt; {
      ...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now a bad intentioned person could generate a random file with 1GB of trash:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;dd &lt;span class=&quot;hljs-variable&quot;&gt;if=&lt;/span&gt;/dev/urandom &lt;span class=&quot;hljs-variable&quot;&gt;of=&lt;/span&gt;ddos &lt;span class=&quot;hljs-variable&quot;&gt;bs=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;G &lt;span class=&quot;hljs-variable&quot;&gt;count=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then upload it to your server:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;curl --data-binary &lt;span class=&quot;hljs-string&quot;&gt;&quot;@ddos&quot;&lt;/span&gt; -H &lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-Type: application/octet-stream&quot;&lt;/span&gt; -X POST &lt;span class=&quot;hljs-string&quot;&gt;http:&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8080/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your application will happily try to handle this until one of 2 things happens, it will run out of disk space or memory. In order to mitigate these kind of attacks always specify the maximum allowed upload size:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AbstractVerticle&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; KB = &lt;span class=&quot;hljs-number&quot;&gt;1024&lt;/span&gt;;
  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; MB = &lt;span class=&quot;hljs-number&quot;&gt;1024&lt;/span&gt; * KB;

  &lt;span class=&quot;hljs-annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{

    Router router = Router.router(vertx);
    router.route().handler(BodyHandler.create().setBodyLimit(&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt; * MB));&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;final-words&quot;&gt;Final Words&lt;/h2&gt;
&lt;p&gt;Although this is just a small list of things you should remember when implementing your application there are more comprehensive checklists to check:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project&quot;&gt;OWASP Top Ten Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Preventing_SQL_Injection_in_Java&quot;&gt;Preventing SQL Injection in Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Testing_for_NoSQL_injection&quot;&gt;Testing for NoSQL injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 14 Sep 2015 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/writing-secure-vert-x-web-apps</link>
          <guid isPermaLink="true">https://vertx.io/blog/writing-secure-vert-x-web-apps</guid>
          <author>
            <name>pmlopes</name>
            <uri>http://github.com/pmlopes</uri>
          </author>
        </item>
      
        <item>
          <title>Vert.x3 real time web apps</title>
          <description>
      &lt;article&gt;&lt;p&gt;One of the interesting features of Vert.x is the &lt;a href=&quot;http://sockjs.org&quot;&gt;SockJS&lt;/a&gt; event bus bridge. This piece of software
allows external applications to communicate with Vert.x event bus using Websockets and if your browser does not
support it then it gracefully degrades to pooling AJAX calls.&lt;/p&gt;
&lt;p&gt;WebSockets bring a new level of interaction to the web, they really bring real time to web applications due to the
fact that its communication model is bi-directional in contrast to the traditional HTTP model where a client can
initiate a data request to a server but not the other way around.&lt;/p&gt;
&lt;p&gt;In this small post I will demonstrate how you can create a simple collaborative drawing app. The idea is simple, all
users that open the app will be be presented with a empty canvas and what they draw or is drawn on other canvas is
shared in real time on their screen.&lt;/p&gt;
&lt;p&gt;For the sake of simplicity and making this post light there is no security involved so, everyone is free to listen to
what is being drawn, however the external application has limited read write access to a single address on Vert.x
event bus, ensuring that other services running on the cluster will not be exposed.&lt;/p&gt;
&lt;p&gt;This is what you should expect to see:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://vertx.io/assets/blog/vertx3-realtime-webapps/screencast.gif&quot; alt=&quot;Screencast&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;bootstrap-a-project&quot;&gt;Bootstrap a project&lt;/h2&gt;
&lt;p&gt;If you followed the previous &lt;a href=&quot;https://vertx.io/blog/my-first-vert-x-3-application/index.html&quot;&gt;series&lt;/a&gt; on Vert.x development, you saw
that Java and Maven were the main topic, since Vert.x is polyglot I will focus on JavaScript and
&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;NPM&lt;/a&gt; as my programming language and package management tool.&lt;/p&gt;
&lt;p&gt;With NPM start by creating a &lt;code&gt;package.json&lt;/code&gt;, in order to do this we should run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;npm init&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will present a selection of questions and in the end you should have a basic &lt;code&gt;package.json&lt;/code&gt; file. This
configuration is very basic so you need to add a &lt;a href=&quot;https://www.npmjs.com/package/vertx3-full&quot;&gt;dependency&lt;/a&gt; to Vert.x so
you can run the application. You can add it to the &lt;code&gt;dependencies&lt;/code&gt; property and it should look more or less like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;draw&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;private&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;vertx3-full&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;3.0.0-1&quot;&lt;/span&gt;
  },
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;start&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;vertx run server.js&quot;&lt;/span&gt;
  },
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;server.js&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;: {},
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;author&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;license&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;ISC&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;A Real Time Drawing App&quot;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you do not know why there is the dependency on &lt;code&gt;vertx3-full&lt;/code&gt; or why the added &lt;code&gt;scripts&lt;/code&gt; property please check the
&lt;a href=&quot;https://vertx.io/blog/vert-x3-says-hello-to-npm-users/index.html&quot;&gt;older&lt;/a&gt; blog post about it.&lt;/p&gt;
&lt;h2 id=&quot;project-structure&quot;&gt;Project Structure&lt;/h2&gt;
&lt;p&gt;This post has no preference over project structure, so if you do not agree with the structure used here feel free to
use what you feel best. For this example I will keep it to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;├── package&lt;span class=&quot;hljs-class&quot;&gt;.json&lt;/span&gt;
├── server&lt;span class=&quot;hljs-class&quot;&gt;.js&lt;/span&gt;
└── webroot
  ├── assets
  │   └── js
  │     ├── script&lt;span class=&quot;hljs-class&quot;&gt;.js&lt;/span&gt;
  │     └── vertxbus&lt;span class=&quot;hljs-class&quot;&gt;.js&lt;/span&gt;
  └── index&lt;span class=&quot;hljs-class&quot;&gt;.html&lt;/span&gt;

&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; directories, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; files&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can imagine &lt;code&gt;server.js&lt;/code&gt; will be our Vert.x application and everything under &lt;code&gt;webroot&lt;/code&gt; will be the client
application.&lt;/p&gt;
&lt;p&gt;The client application is not really Vert.x specific and could in theory be used by any other framework so I will go
lightly over its code.&lt;/p&gt;
&lt;h3 id=&quot;client-application&quot;&gt;Client Application&lt;/h3&gt;
&lt;p&gt;Our application main entry point is as one can expect &lt;code&gt;index.html&lt;/code&gt;. In the index file define the following HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs html&quot;&gt;&lt;span class=&quot;hljs-doctype&quot;&gt;&lt;!DOCTYPE html&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;html&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;head&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;/&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;title&lt;/span&gt;&gt;&lt;/span&gt;Real time drawing App&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;title&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;&lt;!--[if lt IE 9]&gt;
  &lt;script src=&quot;http://html5shiv.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;head&lt;/span&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;body&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;paper&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;1900&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;1000&quot;&lt;/span&gt;&gt;&lt;/span&gt;
  Your browser needs to support canvas for this to work!
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;canvas&lt;/span&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;&lt;!-- JavaScript includes. --&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;http://code.jquery.com/jquery-1.8.0.min.js&quot;&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;//cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js&quot;&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&#39;assets/js/vertxbus.js&#39;&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;assets/js/script.js&quot;&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;body&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;html&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As I previously wrote, the idea is to keep it as simple as possible so it is all about having a canvas element and a
application main script &lt;code&gt;script.js&lt;/code&gt;. All the rest are files served by CDNs that provide common web application
libraries such as &lt;code&gt;jQuery&lt;/code&gt;, &lt;code&gt;HTML5&lt;/code&gt; shim for older browsers, &lt;code&gt;SockJS&lt;/code&gt; client and &lt;code&gt;vertxbus&lt;/code&gt; bridge.&lt;/p&gt;
&lt;p&gt;The main code is on &lt;code&gt;script.js&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;$(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-comment&quot;&gt;// This demo depends on the canvas element&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!(&lt;span class=&quot;hljs-string&quot;&gt;&#39;getContext&#39;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;hljs-string&quot;&gt;&#39;canvas&#39;&lt;/span&gt;))) {
    alert(&lt;span class=&quot;hljs-string&quot;&gt;&#39;Sorry, it looks like your browser does not support canvas!&#39;&lt;/span&gt;);
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;
  }

  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; doc = $(&lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;),
    canvas = $(&lt;span class=&quot;hljs-string&quot;&gt;&#39;#paper&#39;&lt;/span&gt;),
    ctx = canvas[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].getContext(&lt;span class=&quot;hljs-string&quot;&gt;&#39;2d&#39;&lt;/span&gt;);

  &lt;span class=&quot;hljs-comment&quot;&gt;// Generate an unique ID&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; id = &lt;span class=&quot;hljs-built_in&quot;&gt;Math&lt;/span&gt;.round($.now() * &lt;span class=&quot;hljs-built_in&quot;&gt;Math&lt;/span&gt;.random());

  &lt;span class=&quot;hljs-comment&quot;&gt;// A flag for drawing activity&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; drawing = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;

  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; clients = {};
  &lt;span class=&quot;hljs-comment&quot;&gt;// create a event bus bridge to the server that served this file&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; eb = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; vertx.EventBus(
      &lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;.location.protocol + &lt;span class=&quot;hljs-string&quot;&gt;&#39;//&#39;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;.location.hostname + &lt;span class=&quot;hljs-string&quot;&gt;&#39;:&#39;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;.location.port + &lt;span class=&quot;hljs-string&quot;&gt;&#39;/eventbus&#39;&lt;/span&gt;);

  eb.onopen = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-comment&quot;&gt;// listen to draw events&lt;/span&gt;
    eb.registerHandler(&lt;span class=&quot;hljs-string&quot;&gt;&#39;draw&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(data)&lt;/span&gt; &lt;/span&gt;{
      &lt;span class=&quot;hljs-comment&quot;&gt;// Is the user drawing?&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (data.drawing &amp;&amp; clients[data.id]) {

        &lt;span class=&quot;hljs-comment&quot;&gt;// Draw a line on the canvas. clients[data.id] holds&lt;/span&gt;
        &lt;span class=&quot;hljs-comment&quot;&gt;// the previous position of this user&#39;s mouse pointer&lt;/span&gt;

        drawLine(clients[data.id].x, clients[data.id].y, data.x, data.y);
      }

      &lt;span class=&quot;hljs-comment&quot;&gt;// Saving the current client state&lt;/span&gt;
      clients[data.id] = data;
      clients[data.id].updated = $.now();
    });
  };

  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; prev = {};

  canvas.on(&lt;span class=&quot;hljs-string&quot;&gt;&#39;mousedown&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(e)&lt;/span&gt; &lt;/span&gt;{
    e.preventDefault();
    drawing = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;
    prev.x = e.pageX;
    prev.y = e.pageY;
  });

  doc.bind(&lt;span class=&quot;hljs-string&quot;&gt;&#39;mouseup mouseleave&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    drawing = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;
  });

  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; lastEmit = $.now();

  doc.on(&lt;span class=&quot;hljs-string&quot;&gt;&#39;mousemove&#39;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(e)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ($.now() - lastEmit &gt; &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;) {
      eb.publish(&lt;span class=&quot;hljs-string&quot;&gt;&#39;draw&#39;&lt;/span&gt;, {
        &lt;span class=&quot;hljs-string&quot;&gt;&#39;x&#39;&lt;/span&gt;: e.pageX,
        &lt;span class=&quot;hljs-string&quot;&gt;&#39;y&#39;&lt;/span&gt;: e.pageY,
        &lt;span class=&quot;hljs-string&quot;&gt;&#39;drawing&#39;&lt;/span&gt;: drawing,
        &lt;span class=&quot;hljs-string&quot;&gt;&#39;id&#39;&lt;/span&gt;: id
      });
      lastEmit = $.now();
    }

    &lt;span class=&quot;hljs-comment&quot;&gt;// Draw a line for the current user&#39;s movement, as it is&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;// not received in the eventbus&lt;/span&gt;

    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (drawing) {

      drawLine(prev.x, prev.y, e.pageX, e.pageY);

      prev.x = e.pageX;
      prev.y = e.pageY;
    }
  });

  &lt;span class=&quot;hljs-comment&quot;&gt;// Remove inactive clients after 10 seconds of inactivity&lt;/span&gt;
  setInterval(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{

    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ident &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; clients) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (clients.hasOwnProperty(ident)) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ($.now() - clients[ident].updated &gt; &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;) {
          &lt;span class=&quot;hljs-comment&quot;&gt;// Last update was more than 10 seconds ago.&lt;/span&gt;
          &lt;span class=&quot;hljs-comment&quot;&gt;// This user has probably closed the page&lt;/span&gt;
          &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; clients[ident];
        }
      }
    }

  }, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;);

  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;drawLine&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(fromx, fromy, tox, toy)&lt;/span&gt; &lt;/span&gt;{
    ctx.moveTo(fromx, fromy);
    ctx.lineTo(tox, toy);
    ctx.stroke();
  }

});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most important part in this code is all the code related to &lt;code&gt;eb&lt;/code&gt;. The variable &lt;code&gt;eb&lt;/code&gt; is our bridge to the event
bus, Start by creating a bridge using the &lt;code&gt;vertx.EventBus&lt;/code&gt; object and define where to connect, using the details
of the current window location.&lt;/p&gt;
&lt;p&gt;Then add a &lt;code&gt;onopen&lt;/code&gt; listener that will subscribe to the address &lt;code&gt;draw&lt;/code&gt; on the event bus so it can listen to all
messages regarding drawing and perform the drawing actions. Since listening is not enough I also add a mouse listener
to the document so when it moves it publishes events to the &lt;code&gt;draw&lt;/code&gt; address.&lt;/p&gt;
&lt;p&gt;Note that I am using &lt;code&gt;publish&lt;/code&gt; and not &lt;code&gt;send&lt;/code&gt;, the reason should be obvious, I want everyone to know this users mouse
movements, I am not interested on sending the events to just a single user. You can see now that if you want to have
a drawing app in a one on one user basis then instead of &lt;code&gt;publish()&lt;/code&gt; you should use &lt;code&gt;send()&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;server-application&quot;&gt;Server Application&lt;/h3&gt;
&lt;p&gt;The server code is quite straight forward, all you need is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; Router = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;vertx-web-js/router&quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; SockJSHandler = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;vertx-web-js/sock_js_handler&quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; StaticHandler = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;vertx-web-js/static_handler&quot;&lt;/span&gt;);

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; router = Router.router(vertx);

&lt;span class=&quot;hljs-comment&quot;&gt;// Allow outbound traffic to the draw address&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; options = {
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;outboundPermitteds&quot;&lt;/span&gt; : [{&lt;span class=&quot;hljs-string&quot;&gt;&quot;address&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;draw&quot;&lt;/span&gt;}],
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;inboundPermitteds&quot;&lt;/span&gt; :  [{&lt;span class=&quot;hljs-string&quot;&gt;&quot;address&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;draw&quot;&lt;/span&gt;}]
};

router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/eventbus/*&quot;&lt;/span&gt;).handler(SockJSHandler.create(vertx).bridge(options).handle);

&lt;span class=&quot;hljs-comment&quot;&gt;// Serve the static resources&lt;/span&gt;
router.route().handler(StaticHandler.create().handle);

vertx.createHttpServer().requestHandler(router.accept).listen(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We start with the usual imports, we import a reference to the &lt;code&gt;Router&lt;/code&gt; object and a couple of helper handlers
&lt;code&gt;SockJSHandler&lt;/code&gt; and &lt;code&gt;StaticHandler&lt;/code&gt;. As their names should tell you one handler will be responsible to handle all
&lt;code&gt;SockJS&lt;/code&gt; data and the other all HTTP file serving requests.&lt;/p&gt;
&lt;p&gt;We then add then to a router and start a HTTP server that will handle all incoming request using the handler accept
function. Finally we listen on port &lt;code&gt;8080&lt;/code&gt; and we are ready.&lt;/p&gt;
&lt;p&gt;Note that there is a options object where a couple of properties are defined &lt;code&gt;outbound/inbound&lt;/code&gt; permitted addresses.
Without this configuration the external application will not be allowed to connect to the vert.x bus, in fact the
default configuration of the SockJSHandler is deny all. So you must specify explicitly which address are allowed to
receive messages from &lt;code&gt;SockJS&lt;/code&gt; and which ones are allowed to send/publish to &lt;code&gt;SockJS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now you can start your application, don’t forget to install the dependencies for the first time:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;npm install&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then run the application:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;npm start&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you now open 2 browser windows you will be able to draw nice pictures and see the drawing showing in “real time”
on the other window, if you then draw on the second you should get the mirror effect on the first window.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 31 Aug 2015 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/vert-x3-real-time-web-apps</link>
          <guid isPermaLink="true">https://vertx.io/blog/vert-x3-real-time-web-apps</guid>
          <author>
            <name>pmlopes</name>
            <uri>http://github.com/pmlopes</uri>
          </author>
        </item>
      
        <item>
          <title>Unit and Integration Tests</title>
          <description>
      &lt;article&gt;&lt;h2 id=&quot;previously-in-introduction-to-vert-x-&quot;&gt;Previously in “introduction to vert.x”&lt;/h2&gt;
&lt;p&gt;Let’s refresh our mind about what we developed so far in the &lt;em&gt;introduction to vert.x&lt;/em&gt; series. In &lt;a href=&quot;https://vertx.io/blog/my-first-vert-x-3-application/&quot;&gt;the first post&lt;/a&gt;, we developed a very simple Vert.x 3 application, and saw how this application can be tested, packaged and executed. In &lt;a href=&quot;https://vertx.io/blog/vert-x-application-configuration/&quot;&gt;the second post&lt;/a&gt;, we saw how this application became configurable and how we can use a random port in test, and use another configurable port in production. Finally, the &lt;a href=&quot;https://vertx.io/blog/some-rest-with-vert-x/&quot;&gt;previous post&lt;/a&gt; has shown how to use vertx-web and how to implement a small REST API. However, we forgot an important task. We didn’t test the API. In this post we will increase the confidence we have on this application by implementing unit and integration tests.&lt;/p&gt;
&lt;p&gt;The code of this post is available in the &lt;a href=&quot;https://github.com/cescoffier/my-vertx-first-app/tree/post-4&quot;&gt;post-4 branch&lt;/a&gt; of the &lt;a href=&quot;https://github.com/cescoffier/my-vertx-first-app&quot;&gt;project&lt;/a&gt;. The starting post, however is the code available in the &lt;a href=&quot;https://github.com/cescoffier/my-vertx-first-app/tree/post-3&quot;&gt;post-3 branch&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;tests-tests-tests-&quot;&gt;Tests, Tests, Tests…&lt;/h2&gt;
&lt;p&gt;This post is mainly about tests. We distinguish two types of tests: unit tests and integration tests. Both are equally important, but have different focus. Unit tests ensure that one &lt;em&gt;component&lt;/em&gt; of your application, generally a class in the Java world, behaves as expected. The application is not tested as a whole, but pieces by pieces. Integration tests are more &lt;em&gt;black box&lt;/em&gt; in the sense that the application is started and tested generally externally.&lt;/p&gt;
&lt;p&gt;In this post we are going to start with some more unit tests as a warm up session and then focus on integration tests. If you already implemented integration tests, you may be a bit scared, and it makes sense. But don’t worry, with Vert.x there are no hidden surprises.&lt;/p&gt;
&lt;h2 id=&quot;warmup-some-more-unit-tests&quot;&gt;Warmup: Some more unit tests&lt;/h2&gt;
&lt;p&gt;Let’s start slowly. Remember in the first post we have implemented a unit test with &lt;a href=&quot;http://vertx.io/docs/vertx-unit/java/&quot;&gt;vertx-unit&lt;/a&gt;.  The test we did is dead simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;we started the application before the test&lt;/li&gt;
&lt;li&gt;we checks that it replies “Hello”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Just to refresh your mind, let’s have a look at the &lt;a href=&quot;https://github.com/cescoffier/my-vertx-first-app/blob/post-4/src/test/java/io/vertx/blog/first/MyFirstVerticleTest.java&quot;&gt;code&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@Before&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(TestContext context)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{
  vertx = Vertx.vertx();
  ServerSocket socket = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ServerSocket(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);
  port = socket.getLocalPort();
  socket.close();
  DeploymentOptions options = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DeploymentOptions()
      .setConfig(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject().put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http.port&quot;&lt;/span&gt;, port)
      );
  vertx.deployVerticle(MyFirstVerticle.class.getName(), options, context.asyncAssertSuccess());
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;setUp&lt;/code&gt; method is invoked before each test (as instructed by the &lt;code&gt;@Before&lt;/code&gt; annotation). It, first, creates a new instance of Vert.x. Then, it gets a free port and then deploys our verticle with the right configuration. Thanks to the &lt;code&gt;context.asyncAssertSuccess()&lt;/code&gt; it waits until the successful deployment of the verticle.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;tearDown&lt;/code&gt; is straightforward and just closes the Vert.x instance. It automatically un-deploys the verticles:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@After&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;tearDown&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(TestContext context)&lt;/span&gt; &lt;/span&gt;{
  vertx.close(context.asyncAssertSuccess());
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, our single test is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;testMyApplication&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(TestContext context)&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Async async = context.async();
  vertx.createHttpClient().getNow(port, &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;, response -&gt; {
    response.handler(body -&gt; {
      context.assertTrue(body.toString().contains(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;));
      async.complete();
    });
  });
 }&lt;/code&gt;&lt;/pre&gt;
It is only checking that the application replies &quot;Hello&quot; when we emit a HTTP request on `/`.

Let&#39;s now try to implement some unit tests checkin that our web application and the REST API behave as expected. Let&#39;s start by checking that the `index.html` page is correctly served. This test is very similar to the previous one:

&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;checkThatTheIndexPageIsServed&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(TestContext context)&lt;/span&gt; &lt;/span&gt;{
  Async async = context.async();
  vertx.createHttpClient().getNow(port, &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/assets/index.html&quot;&lt;/span&gt;, response -&gt; {
    context.assertEquals(response.statusCode(), &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;);
    context.assertEquals(response.headers().get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html&quot;&lt;/span&gt;);
    response.bodyHandler(body -&gt; {
      context.assertTrue(body.toString().contains(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;title&gt;My Whisky Collection&lt;/title&gt;&quot;&lt;/span&gt;));
      async.complete();
    });
  });
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We retrieve the &lt;code&gt;index.html&lt;/code&gt; page and check:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;it’s there (status code 200)&lt;/li&gt;
&lt;li&gt;it’s a HTML page (content type set to “text/html”)&lt;/li&gt;
&lt;li&gt;it has the right title (“My Whisky Collection”)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;Retrieving content &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; As you can see, we can test the status code and the headers directly on the HTTP response, but ensure that the body is right, we need to retrieve it. This is done with a body handler that receives the complete body as parameter. Once the last check is made, we release the &lt;code&gt;async&lt;/code&gt; by calling &lt;code&gt;complete&lt;/code&gt;.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Ok, great, but this actually does not test our REST API. Let’s ensure that we can add a bottle to the collection. Unlike the previous tests, this one is using &lt;code&gt;post&lt;/code&gt; to &lt;em&gt;post&lt;/em&gt; data to the server:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;checkThatWeCanAdd&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(TestContext context)&lt;/span&gt; &lt;/span&gt;{
  Async async = context.async();
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String json = Json.encodePrettily(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Whisky(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jameson&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Ireland&quot;&lt;/span&gt;));
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String length = Integer.toString(json.length());
  vertx.createHttpClient().post(port, &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/whiskies&quot;&lt;/span&gt;)
      .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;)
      .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-length&quot;&lt;/span&gt;, length)
      .handler(response -&gt; {
        context.assertEquals(response.statusCode(), &lt;span class=&quot;hljs-number&quot;&gt;201&lt;/span&gt;);
        context.assertTrue(response.headers().get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;).contains(&lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;));
        response.bodyHandler(body -&gt; {
          &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Whisky whisky = Json.decodeValue(body.toString(), Whisky.class);
          context.assertEquals(whisky.getName(), &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jameson&quot;&lt;/span&gt;);
          context.assertEquals(whisky.getOrigin(), &lt;span class=&quot;hljs-string&quot;&gt;&quot;Ireland&quot;&lt;/span&gt;);
          context.assertNotNull(whisky.getId());
          async.complete();
        });
      })
      .write(json)
      .end();
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First we create the content we want to add. The server consumes JSON data, so we need a JSON string. You can either write your JSON document manually, or use the Vert.x method (&lt;code&gt;Json.encodePrettily&lt;/code&gt;) as done here. Once we have the content, we create a &lt;code&gt;post&lt;/code&gt; request. We need to configure some headers to be correctly read by the server. First, we say that we are sending JSON data and we also set the content length. We also attach a response handler very close to the checks made in the previous test. Notice that we can rebuild our object from the JSON document send by the server using the &lt;code&gt;JSON.decodeValue&lt;/code&gt; method. It’s very convenient as it avoids lots of boilerplate code.  At this point the request is not emitted, we need to write the data and call the &lt;code&gt;end()&lt;/code&gt; method. This is made using &lt;code&gt;.write(json).end();&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The order of the methods is important. You cannot &lt;em&gt;write&lt;/em&gt; data if you don’t have a response handler configured. Finally don’t forget to call &lt;code&gt;end&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, let’s try this. You can run the test using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mvn clean test&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We could continue writing more unit test like that, but it could become quite complex. Let’s see how we could continue our tests using integration tests.&lt;/p&gt;
&lt;h2 id=&quot;it-hurts&quot;&gt;IT hurts&lt;/h2&gt;
&lt;p&gt;Well, I think we need to make that clear, integration testing hurts. If you have experience in this area, can you remember how long did it take to setup everything correctly? I get new white hairs by just thinking about it. Why are integration tests more complicated? It’s basically because of the setup:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We must start the application in a &lt;em&gt;close to production&lt;/em&gt; way&lt;/li&gt;
&lt;li&gt;We must then run the tests (and configure them to hit the right application instance)&lt;/li&gt;
&lt;li&gt;We must stop the application&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That does not sound unconquerable like that, but if you need Linux, MacOS X and Windows support, it quickly get messy. There are plenty of great frameworks easing this such as &lt;a href=&quot;http://arquillian.org&quot;&gt;Arquillian&lt;/a&gt;, but let’s do it without any framework to understand how it works.&lt;/p&gt;
&lt;h2 id=&quot;we-need-a-battle-plan&quot;&gt;We need a battle plan&lt;/h2&gt;
&lt;p&gt;Before rushing into the complex configuration, let’s think a minute about the tasks:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1 - Reserve a free port&lt;/strong&gt;
We need to get a free port on which the application can &lt;em&gt;listen&lt;/em&gt;, and we need to inject this port in our integration tests.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2 - Generate the application configuration&lt;/strong&gt;
Once we have the free port, we need to write a JSON file configuring the application HTTP Port to this port.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3 - Start the application&lt;/strong&gt;
Sounds easy right? Well it’s not that simple as we need to launch our application in a background process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4 - Execute the integration tests&lt;/strong&gt;
Finally, the central part, run the tests. But before that we should implement some integration tests. Let’s come to that later.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5 - Stop the application&lt;/strong&gt;
Once the tests have been executed, regardless if there are failures or errors in the tests, we need to stop the application.&lt;/p&gt;
&lt;p&gt;There are multiple way to implement this plan. We are going to use a &lt;em&gt;generic&lt;/em&gt; way. It’s not necessarily the better, but can be applied almost everywhere. The approach is tight to Apache Maven. If you want to propose an alternative using Gradle or a different tool, I will be happy to add your way to the post.&lt;/p&gt;
&lt;h2 id=&quot;implement-the-plan&quot;&gt;Implement the plan&lt;/h2&gt;
&lt;p&gt;As said above, this section is Maven-centric, and most of the code goes in the &lt;a href=&quot;https://github.com/cescoffier/my-vertx-first-app/blob/post-4/pom.xml&quot;&gt;pom.xml&lt;/a&gt; file. If you never used the different Maven lifecycle phases, I recommend you to look at the &lt;a href=&quot;https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html&quot;&gt;introduction to the Maven lifecycle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We need to add and configure a couple of plugins. Open the &lt;code&gt;pom.xml&lt;/code&gt; file and in the &lt;code&gt;&lt;plugins&gt;&lt;/code&gt; section add:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;plugin&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;org.codehaus.mojo&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;build-helper-maven-plugin&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;1.9.1&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;executions&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;execution&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;id&lt;/span&gt;&gt;&lt;/span&gt;reserve-network-port&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;id&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;goals&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;goal&lt;/span&gt;&gt;&lt;/span&gt;reserve-network-port&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;goal&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;goals&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;phase&lt;/span&gt;&gt;&lt;/span&gt;process-sources&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;phase&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;configuration&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;portNames&lt;/span&gt;&gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;portName&lt;/span&gt;&gt;&lt;/span&gt;http.port&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;portName&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;portNames&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;configuration&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;execution&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;executions&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;plugin&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We use the &lt;code&gt;build-helper-maven-plugin&lt;/code&gt; (a plugin to know if you are often using Maven) to pick up a free port. Once found, the plugin assigns the &lt;code&gt;http.port&lt;/code&gt; variable to the picked port. We execute this plugin early in the build (during the &lt;code&gt;process-sources&lt;/code&gt; phase), so we can use the &lt;code&gt;http.port&lt;/code&gt; variable in the other plugin. This was for the first step.&lt;/p&gt;
&lt;p&gt;Two actions are required for the second step. First, in the &lt;code&gt;pom.xml&lt;/code&gt; file, just below the &lt;code&gt;&lt;build&gt;&lt;/code&gt; opening tag, add:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;testResources&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;testResource&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;directory&lt;/span&gt;&gt;&lt;/span&gt;src/test/resources&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;directory&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;filtering&lt;/span&gt;&gt;&lt;/span&gt;true&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;filtering&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;testResource&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;testResources&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This instructs Maven to &lt;em&gt;filter&lt;/em&gt; resources from the &lt;code&gt;src/test/resources&lt;/code&gt; directory. &lt;em&gt;Filter&lt;/em&gt; means replacing placeholders by actual values. That’s exactly what we need as we now have the &lt;code&gt;http.port&lt;/code&gt; variable. So create the &lt;code&gt;src/test/resources/my-it-config.json&lt;/code&gt; file with the following content:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;http.port&quot;&lt;/span&gt;: ${http.port}
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This configuration file is similar to the one we did in previous posts. The only difference is the &lt;code&gt;${http.port}&lt;/code&gt; which is the (default) Maven syntax for filtering. So, when Maven is going to process or file it will replace &lt;code&gt;${http.port}&lt;/code&gt; by the selected port. That’s all for the second step.&lt;/p&gt;
&lt;p&gt;The step 3 and 5 are a bit more tricky. We should start and stop the application. We are going to use the &lt;code&gt;maven-antrun-plugin&lt;/code&gt; to achieve this. In the &lt;code&gt;pom.xml&lt;/code&gt; file, below the &lt;code&gt;build-helper-maven-plugin&lt;/code&gt;, add:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;!-- We use the maven-antrun-plugin to start the application before the integration tests
and stop them afterward --&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;plugin&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;maven-antrun-plugin&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;1.8&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;executions&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;execution&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;id&lt;/span&gt;&gt;&lt;/span&gt;start-vertx-app&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;id&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;phase&lt;/span&gt;&gt;&lt;/span&gt;pre-integration-test&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;phase&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;goals&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;goal&lt;/span&gt;&gt;&lt;/span&gt;run&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;goal&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;goals&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;configuration&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;target&lt;/span&gt;&gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-comment&quot;&gt;&lt;!--
          Launch the application as in &#39;production&#39; using the fatjar.
          We pass the generated configuration, configuring the http port to the picked one
          --&gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;executable&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;${java.home}/bin/java&quot;&lt;/span&gt;
                &lt;span class=&quot;hljs-attribute&quot;&gt;dir&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;${project.build.directory}&quot;&lt;/span&gt;
                &lt;span class=&quot;hljs-attribute&quot;&gt;spawn&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;true&quot;&lt;/span&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;-jar&quot;&lt;/span&gt;/&gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;${project.artifactId}-${project.version}-fat.jar&quot;&lt;/span&gt;/&gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;-conf&quot;&lt;/span&gt;/&gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;${project.build.directory}/test-classes/my-it-config.json&quot;&lt;/span&gt;/&gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;exec&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;target&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;configuration&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;execution&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;execution&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;id&lt;/span&gt;&gt;&lt;/span&gt;stop-vertx-app&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;id&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;phase&lt;/span&gt;&gt;&lt;/span&gt;post-integration-test&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;phase&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;goals&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;goal&lt;/span&gt;&gt;&lt;/span&gt;run&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;goal&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;goals&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;configuration&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-comment&quot;&gt;&lt;!--
          Kill the started process.
          Finding the right process is a bit tricky. Windows command in in the windows profile (below)
          --&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;target&lt;/span&gt;&gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;executable&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;bash&quot;&lt;/span&gt;
                &lt;span class=&quot;hljs-attribute&quot;&gt;dir&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;${project.build.directory}&quot;&lt;/span&gt;
                &lt;span class=&quot;hljs-attribute&quot;&gt;spawn&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;false&quot;&lt;/span&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;-c&quot;&lt;/span&gt;/&gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;ps ax | grep -Ei &#39;[\-]DtestPort=${http.port}\s+\-jar\s+${project.artifactId}&#39; | awk &#39;NR==1{print $1}&#39; | xargs kill -SIGTERM&quot;&lt;/span&gt;/&gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;exec&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;target&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;configuration&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;execution&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;executions&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;plugin&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s a huge piece of XML, isn’t it ? We configure two executions of the plugin. The first one, happening in the &lt;code&gt;pre-integration-test&lt;/code&gt; phase, executes a set of bash command to start the application. It basically executes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;java -jar my-first-app-&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;-SNAPSHOT-fat.jar -conf .../my-it-config.json&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;Is the fatjar created ? &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; The fat jar embedding our application is created in the &lt;code&gt;package&lt;/code&gt; phase, preceding the &lt;code&gt;pre-integration-test&lt;/code&gt;, so yes, the fat jar is created.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;As mentioned above, we launch the application as we would in a production environment.&lt;/p&gt;
&lt;p&gt;Once, the integration tests are executed (step 4 we didn’t look at it yet), we need to stop the application (so in the the &lt;code&gt;post-integration-test&lt;/code&gt; phase).  To close the application, we are going to invoke some shell magic command to find our process in with the &lt;code&gt;ps&lt;/code&gt; command and send the &lt;code&gt;SIGTERM&lt;/code&gt; signal. It is equivalent to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;ps
.... -&gt; find your process id
kill your_process_id -SIGTERM&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;And Windows ? &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; I mentioned it above, we want Windows to be supported and these commands are not going to work on Windows. Don’t worry, Windows configuration is below….&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;We should now do the fourth step we (silently) skipped. To execute our integration tests, we use the &lt;code&gt;maven-failsafe-plugin&lt;/code&gt;. Add the following plugin configuration to your &lt;code&gt;pom.xml&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;plugin&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;maven-failsafe-plugin&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;2.18.1&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;executions&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;execution&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;goals&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;goal&lt;/span&gt;&gt;&lt;/span&gt;integration-test&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;goal&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;goal&lt;/span&gt;&gt;&lt;/span&gt;verify&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;goal&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;goals&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;configuration&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;systemProperties&lt;/span&gt;&gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;http.port&lt;/span&gt;&gt;&lt;/span&gt;${http.port}&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;http.port&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;systemProperties&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;configuration&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;execution&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;executions&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;plugin&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, we pass the &lt;code&gt;http.port&lt;/code&gt; property as a system variable, so our tests are able to connect on the right port.&lt;/p&gt;
&lt;p&gt;That’s all! Wow… Let’s try this (for windows users, you will need to be patient or to jump to the last section).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mvn clean verify&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We should not use &lt;code&gt;mvn integration-test&lt;/code&gt; because the application would still be running. The &lt;code&gt;verify&lt;/code&gt; phase is after the &lt;code&gt;post-integration-test&lt;/code&gt; phase and will analyse the integration-tests results. Build failures because of integration tests failed assertions are reported in this phase.&lt;/p&gt;
&lt;h2 id=&quot;hey-we-don-t-have-integration-tests-&quot;&gt;Hey, we don’t have integration tests !&lt;/h2&gt;
&lt;p&gt;And that’s right, we set up everything, but we don’t have a single integration test. To ease the implementation, let’s use two libraries: &lt;a href=&quot;http://joel-costigliola.github.io/assertj/&quot;&gt;AssertJ&lt;/a&gt; and &lt;a href=&quot;https://github.com/jayway/rest-assured&quot;&gt;Rest-Assured&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;AssertJ proposes a set of assertions that you can chain and use fluently. Rest Assured is a framework to test REST API.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;pom.xml&lt;/code&gt; file, add the two following dependencies just before &lt;code&gt;&lt;/dependencies&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;com.jayway.restassured&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;rest-assured&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;2.4.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;scope&lt;/span&gt;&gt;&lt;/span&gt;test&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;scope&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;org.assertj&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;assertj-core&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;2.0.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;scope&lt;/span&gt;&gt;&lt;/span&gt;test&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;scope&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, create the &lt;code&gt;src/test/java/io/vertx/blog/first/MyRestIT.java&lt;/code&gt; file. Unlike unit test, integration test ends with &lt;code&gt;IT&lt;/code&gt;. It’s a convention from the Failsafe plugin to distinguish unit (starting or ending with &lt;em&gt;Test&lt;/em&gt;) from integration tests (starting or ending with &lt;em&gt;IT&lt;/em&gt;). In the created file add:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; io.vertx.blog.first;

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.jayway.restassured.RestAssured;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.junit.AfterClass;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.junit.BeforeClass;

&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyRestIT&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-annotation&quot;&gt;@BeforeClass&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;configureRestAssured&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    RestAssured.baseURI = &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://localhost&quot;&lt;/span&gt;;
    RestAssured.port = Integer.getInteger(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http.port&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;);
  }

  &lt;span class=&quot;hljs-annotation&quot;&gt;@AfterClass&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;unconfigureRestAssured&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    RestAssured.reset();
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The methods annotated with &lt;code&gt;@BeforeClass&lt;/code&gt; and &lt;code&gt;@AfterClass&lt;/code&gt; are invoked once before / after all tests of the class. Here, we just retrieve the http port (passed as a system property) and we configure REST Assured.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;Am I ready to serve ? &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; You may need to wait in the &lt;code&gt;configureRestAssured&lt;/code&gt; method that the HTTP server has been started. We recommend the &lt;a href=&quot;https://github.com/jayway/awaitility&quot;&gt;awaitility&lt;/a&gt; test framework to check that the request can be served. It would fail the test if the server does not start.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;It’s now time to implement a real test. Let’s check we can retrieve an individual product:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;checkThatWeCanRetrieveIndividualProduct&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-comment&quot;&gt;// Get the list of bottles, ensure it&#39;s a success and extract the first id.&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; id = get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/whiskies&quot;&lt;/span&gt;).then()
      .assertThat()
      .statusCode(&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;)
      .extract()
      .jsonPath().getInt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;find { it.name==&#39;Bowmore 15 Years Laimrig&#39; }.id&quot;&lt;/span&gt;);
  &lt;span class=&quot;hljs-comment&quot;&gt;// Now get the individual resource and check the content&lt;/span&gt;
  get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/whiskies/&quot;&lt;/span&gt; + id).then()
      .assertThat()
      .statusCode(&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;)
      .body(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;, equalTo(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bowmore 15 Years Laimrig&quot;&lt;/span&gt;))
      .body(&lt;span class=&quot;hljs-string&quot;&gt;&quot;origin&quot;&lt;/span&gt;, equalTo(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Scotland, Islay&quot;&lt;/span&gt;))
      .body(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;, equalTo(id));
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here you can appreciate the power and expressiveness of Rest Assured. We retrieve the list of product, ensure the response is correct, and extract the &lt;em&gt;id&lt;/em&gt; of a specific bottle using a JSON (Groovy) Path expression.&lt;/p&gt;
&lt;p&gt;Then, we try to retrieve the metadata of this individual product, and check the result.&lt;/p&gt;
&lt;p&gt;Let’s now implement a more sophisticated scenario. Let’s add and delete a product:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;checkWeCanAddAndDeleteAProduct&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-comment&quot;&gt;// Create a new bottle and retrieve the result (as a Whisky instance).&lt;/span&gt;
  Whisky whisky = given()
      .body(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{\&quot;name\&quot;:\&quot;Jameson\&quot;, \&quot;origin\&quot;:\&quot;Ireland\&quot;}&quot;&lt;/span&gt;).request().post(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/whiskies&quot;&lt;/span&gt;).thenReturn().as(Whisky.class);
  assertThat(whisky.getName()).isEqualToIgnoringCase(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jameson&quot;&lt;/span&gt;);
  assertThat(whisky.getOrigin()).isEqualToIgnoringCase(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Ireland&quot;&lt;/span&gt;);
  assertThat(whisky.getId()).isNotZero();
  &lt;span class=&quot;hljs-comment&quot;&gt;// Check that it has created an individual resource, and check the content.&lt;/span&gt;
  get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/whiskies/&quot;&lt;/span&gt; + whisky.getId()).then()
      .assertThat()
      .statusCode(&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;)
      .body(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;, equalTo(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jameson&quot;&lt;/span&gt;))
      .body(&lt;span class=&quot;hljs-string&quot;&gt;&quot;origin&quot;&lt;/span&gt;, equalTo(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Ireland&quot;&lt;/span&gt;))
      .body(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;, equalTo(whisky.getId()));
  &lt;span class=&quot;hljs-comment&quot;&gt;// Delete the bottle&lt;/span&gt;
  delete(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/whiskies/&quot;&lt;/span&gt; + whisky.getId()).then().assertThat().statusCode(&lt;span class=&quot;hljs-number&quot;&gt;204&lt;/span&gt;);
  &lt;span class=&quot;hljs-comment&quot;&gt;// Check that the resource is not available anymore&lt;/span&gt;
  get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/whiskies/&quot;&lt;/span&gt; + whisky.getId()).then()
      .assertThat()
      .statusCode(&lt;span class=&quot;hljs-number&quot;&gt;404&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;
So, now we have integration tests let&#39;s try:

&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mvn clean verify&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple no? Well, simple once the setup is done right… You can continue implementing other integration tests to be sure that everything behave as you expect.&lt;/p&gt;
&lt;h2 id=&quot;dear-windows-users-&quot;&gt;Dear Windows users…&lt;/h2&gt;
&lt;p&gt;This section is the bonus part for Windows user, or people wanting to run their integration tests on Windows machine too. The command we execute to stop the application is not going to work on Windows. Luckily, it’s possible to extend the &lt;code&gt;pom.xml&lt;/code&gt; with a profile executed on Windows.&lt;/p&gt;
&lt;p&gt;In your &lt;code&gt;pom.xml&lt;/code&gt;, just after &lt;code&gt;&lt;/build&gt;&lt;/code&gt;, add:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;profiles&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;&lt;!-- A profile for windows as the stop command is different --&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;profile&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;id&lt;/span&gt;&gt;&lt;/span&gt;windows&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;id&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;activation&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;os&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;family&lt;/span&gt;&gt;&lt;/span&gt;windows&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;family&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;os&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;activation&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;build&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;plugins&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;plugin&lt;/span&gt;&gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;maven-antrun-plugin&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;1.8&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;executions&lt;/span&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;execution&lt;/span&gt;&gt;&lt;/span&gt;
              &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;id&lt;/span&gt;&gt;&lt;/span&gt;stop-vertx-app&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;id&lt;/span&gt;&gt;&lt;/span&gt;
              &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;phase&lt;/span&gt;&gt;&lt;/span&gt;post-integration-test&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;phase&lt;/span&gt;&gt;&lt;/span&gt;
              &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;goals&lt;/span&gt;&gt;&lt;/span&gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;goal&lt;/span&gt;&gt;&lt;/span&gt;run&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;goal&lt;/span&gt;&gt;&lt;/span&gt;
              &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;goals&lt;/span&gt;&gt;&lt;/span&gt;
              &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;configuration&lt;/span&gt;&gt;&lt;/span&gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;target&lt;/span&gt;&gt;&lt;/span&gt;
                  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;executable&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;wmic&quot;&lt;/span&gt;
                      &lt;span class=&quot;hljs-attribute&quot;&gt;dir&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;${project.build.directory}&quot;&lt;/span&gt;
                      &lt;span class=&quot;hljs-attribute&quot;&gt;spawn&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;false&quot;&lt;/span&gt;&gt;&lt;/span&gt;
                    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;process&quot;&lt;/span&gt;/&gt;&lt;/span&gt;
                    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;where&quot;&lt;/span&gt;/&gt;&lt;/span&gt;
                    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;CommandLine like &#39;%${project.artifactId}%&#39; and not name=&#39;wmic.exe&#39;&quot;&lt;/span&gt;/&gt;&lt;/span&gt;
                    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;delete&quot;&lt;/span&gt;/&gt;&lt;/span&gt;
                  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;exec&lt;/span&gt;&gt;&lt;/span&gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;target&lt;/span&gt;&gt;&lt;/span&gt;
              &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;configuration&lt;/span&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;execution&lt;/span&gt;&gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;executions&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;plugin&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;plugins&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;build&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;profile&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;profiles&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This profile replaces the actions described above to stop the application with a version working on windows. The profile is automatically enabled on Windows. As on others operating systems, execute with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mvn clean verify&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Wow, what a trip ! We are done… In this post we have seen how we can gain confidence in Vert.x applications by implementing both unit and integration tests. Unit tests, thanks to vert.x unit, are able to check the asynchronous aspect of Vert.x application, but could be complex for large scenarios. Thanks to Rest Assured and AssertJ, integration tests are dead simple to write… but the setup is not straightforward. This post have shown how it can be configured easily. Obviously, you could also use AssertJ and Rest Assured in your unit tests.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&quot;http://vertx.io/blog/using-the-asynchronous-sql-client/&quot;&gt;next post&lt;/a&gt;, we replace the &lt;em&gt;in memory&lt;/em&gt; backend with a database, and use asynchronous integration with this database.&lt;/p&gt;
&lt;p&gt;Stay Tuned &amp; Happy Coding !&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 03 Aug 2015 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/unit-and-integration-tests</link>
          <guid isPermaLink="true">https://vertx.io/blog/unit-and-integration-tests</guid>
          <author>
            <name>cescoffier</name>
            <uri>http://github.com/cescoffier</uri>
          </author>
        </item>
      
        <item>
          <title>Some Rest with Vert.x</title>
          <description>
      &lt;article&gt;&lt;h2 id=&quot;previously-in-this-blog-series&quot;&gt;Previously in this blog series&lt;/h2&gt;
&lt;p&gt;This post is part of the &lt;em&gt;Introduction to Vert.x&lt;/em&gt; series. So, let’s have a quick look about the content of the previous posts. In &lt;a href=&quot;https://vertx.io/blog/my-first-vert-x-3-application/&quot;&gt;the first post&lt;/a&gt;, we developed a very simple Vert.x 3 application, and saw how this application can be tested, packaged and executed. In &lt;a href=&quot;https://vertx.io/blog/vert-x-application-configuration/&quot;&gt;the last post&lt;/a&gt;, we saw how this application became configurable and how we can use a random port in test.&lt;/p&gt;
&lt;p&gt;Well, nothing fancy… Let’s go a bit further this time and develop a &lt;em&gt;CRUD-ish&lt;/em&gt; application. So an application exposing an HTML page interacting with the backend using a REST API. The level of &lt;em&gt;RESTfullness&lt;/em&gt; of the API is not the topic of this post, I let you decide as it’s a very slippery topic.&lt;/p&gt;
&lt;p&gt;So, in other words we are going to see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vert.x Web - a framework that let you create Web applications easily using Vert.x&lt;/li&gt;
&lt;li&gt;How to expose static resources&lt;/li&gt;
&lt;li&gt;How to develop a REST API&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code developed in this post is available on the &lt;a href=&quot;https://github.com/cescoffier/my-vertx-first-app/tree/post-3&quot;&gt;post-3&lt;/a&gt; branch of this &lt;a href=&quot;https://github.com/cescoffier/my-vertx-first-app&quot;&gt;Github&lt;/a&gt; project. We are going to start from the  &lt;a href=&quot;https://github.com/cescoffier/my-vertx-first-app/tree/post-2&quot;&gt;post-2&lt;/a&gt; codebase.&lt;/p&gt;
&lt;p&gt;So, let’s start.&lt;/p&gt;
&lt;h2 id=&quot;vert-x-web&quot;&gt;Vert.x Web&lt;/h2&gt;
&lt;p&gt;As you may have notices in the previous posts, dealing with complex HTTP application using only Vert.x Core would be kind of cumbersome. That’s the main reason behind &lt;a href=&quot;http://vertx.io/docs/vertx-web/java/&quot;&gt;Vert.x Web&lt;/a&gt;. It makes the development of Vert.x base web applications really easy, without changing the philosophy.&lt;/p&gt;
&lt;p&gt;To use Vert.x Web, you need to update the &lt;code&gt;pom.xml&lt;/code&gt; file to add the following dependency:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.vertx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;vertx-web&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;3.0.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s the only thing you need to use Vert.x Web. Sweet, no ?&lt;/p&gt;
&lt;p&gt;Let’s now use it. Remember, in the previous post, when we requested &lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt;, we reply a nice &lt;em&gt;Hello World&lt;/em&gt; message. Let’s do the same with Vert.x Web.  Open the &lt;code&gt;io.vertx.blog.first.MyFirstVerticle&lt;/code&gt; class and change the &lt;code&gt;start&lt;/code&gt; method to be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Future&lt;Void&gt; fut)&lt;/span&gt; &lt;/span&gt;{
 &lt;span class=&quot;hljs-comment&quot;&gt;// Create a router object.&lt;/span&gt;
 Router router = Router.router(vertx);

 &lt;span class=&quot;hljs-comment&quot;&gt;// Bind &quot;/&quot; to our hello message - so we are still compatible.&lt;/span&gt;
 router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;).handler(routingContext -&gt; {
   HttpServerResponse response = routingContext.response();
   response
       .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html&quot;&lt;/span&gt;)
       .end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;h1&gt;Hello from my first Vert.x 3 application&lt;/h1&gt;&quot;&lt;/span&gt;);
 });

 &lt;span class=&quot;hljs-comment&quot;&gt;// Create the HTTP server and pass the &quot;accept&quot; method to the request handler.&lt;/span&gt;
 vertx
     .createHttpServer()
     .requestHandler(router::accept)
     .listen(
         &lt;span class=&quot;hljs-comment&quot;&gt;// Retrieve the port from the configuration,&lt;/span&gt;
         &lt;span class=&quot;hljs-comment&quot;&gt;// default to 8080.&lt;/span&gt;
         config().getInteger(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http.port&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;),
         result -&gt; {
           &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (result.succeeded()) {
             fut.complete();
           } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
             fut.fail(result.cause());
           }
         }
     );
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may be surprise by the length of this snippet (in comparison to the previous code). But as we are going to see, it will make our app on steroids, just be patient.&lt;/p&gt;
&lt;p&gt;As you can see, we start by creating a &lt;code&gt;Router&lt;/code&gt; object. The router is the cornerstone of Vert.x Web. This object is responsible for dispatching the HTTP requests to the right &lt;em&gt;handler&lt;/em&gt;. Two other concepts are very important in Vert.x Web:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Routes - which let you define how request are dispatched&lt;/li&gt;
&lt;li&gt;Handlers - which are the actual action processing the requests and writing the result. Handlers can be chained.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you understand these 3 concepts, you have understood everything in Vert.x Web.&lt;/p&gt;
&lt;p&gt;Let’s focus on this code first:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;).handler(routingContext -&gt; {
  HttpServerResponse response = routingContext.response();
  response
      .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html&quot;&lt;/span&gt;)
      .end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;h1&gt;Hello from my first Vert.x 3 application&lt;/h1&gt;&quot;&lt;/span&gt;);
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It &lt;em&gt;routes&lt;/em&gt; requests arriving on “/“ to the given &lt;em&gt;handler&lt;/em&gt;. Handlers receive a &lt;code&gt;RoutingContext&lt;/code&gt; object. This handler is quite similar to the code we had before, and it’s quite normal as it manipulates the same type of object: &lt;code&gt;HttpServerResponse&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s now have a look to the rest of the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;vertx
    .createHttpServer()
    .requestHandler(router::accept)
    .listen(
        &lt;span class=&quot;hljs-comment&quot;&gt;// Retrieve the port from the configuration,&lt;/span&gt;
        &lt;span class=&quot;hljs-comment&quot;&gt;// default to 8080.&lt;/span&gt;
        config().getInteger(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http.port&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;),
        result -&gt; {
          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (result.succeeded()) {
            fut.complete();
          } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
            fut.fail(result.cause());
          }
        }
    );
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s basically the same code as before, except that we change the request handler. We pass &lt;code&gt;router::accept&lt;/code&gt; to the handler. You may not be familiar with this notation. It’s a reference to a method (here the method &lt;code&gt;accept&lt;/code&gt; from the &lt;code&gt;router&lt;/code&gt; object). In other worlds, it instructs vert.x to call the &lt;code&gt;accept&lt;/code&gt; method of the &lt;code&gt;router&lt;/code&gt; when it receives a request.&lt;/p&gt;
&lt;p&gt;Let’s try to see if this work:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mvn clean package
java -jar target/my-first-app-&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;-SNAPSHOT-fat.jar&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By opening &lt;code&gt;http://localhost:8080&lt;/code&gt; in your browser you should see the &lt;em&gt;Hello&lt;/em&gt; message. As we didn’t change the behavior of the application, our tests are still valid.&lt;/p&gt;
&lt;h2 id=&quot;exposing-static-resources&quot;&gt;Exposing static resources&lt;/h2&gt;
&lt;p&gt;Ok, so we have a first application using vert.x web. Let’s see some of the benefits. Let’s start with serving static resources, such as an &lt;code&gt;index.html&lt;/code&gt; page. Before we go further, I should start with a disclaimer: “the HTML page we are going to see here is ugly like hell : I’m not a UI guy”. I should also add that there are probably plenty of better ways to implement this and a myriad of frameworks I should try, but that’s not the point. I tried to keep things simple and just relying on JQuery and Twitter Bootstrap, so if you know a bit of JavaScript you can understand and edit the page.&lt;/p&gt;
&lt;p&gt;Let’s create the HTML page that will be the entry point of our application. Create an &lt;code&gt;index.html&lt;/code&gt; page in &lt;code&gt;src/main/resources/assets&lt;/code&gt; with the content from &lt;a href=&quot;https://github.com/cescoffier/my-vertx-first-app/blob/post-3/src/main/resources/assets/index.html&quot;&gt;here&lt;/a&gt;. As it’s just a HTML page with a bit of JavaScript, we won’t detail the file here. If you have questions, just post comments.&lt;/p&gt;
&lt;p&gt;Basically, the page is a simple &lt;em&gt;CRUD&lt;/em&gt; UI to manage my collection of &lt;em&gt;not-yet-finished&lt;/em&gt; bottles of Whisky. It was made in a generic way, so you can transpose it to your own collection. The list of product is displayed in the main table. You can create a new product, edit one or delete one. These actions are relying on a REST API (that we are going to implement) through AJAX calls. That’s all.&lt;/p&gt;
&lt;p&gt;Once this page is created, edit the &lt;code&gt;io.vertx.blog.first.MyFirstVerticle&lt;/code&gt; class and change the &lt;code&gt;start&lt;/code&gt; method to be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Future&lt;Void&gt; fut)&lt;/span&gt; &lt;/span&gt;{
 Router router = Router.router(vertx);
 router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;).handler(routingContext -&gt; {
   HttpServerResponse response = routingContext.response();
   response
       .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html&quot;&lt;/span&gt;)
       .end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;h1&gt;Hello from my first Vert.x 3 application&lt;/h1&gt;&quot;&lt;/span&gt;);
 });

 &lt;span class=&quot;hljs-comment&quot;&gt;// Serve static resources from the /assets directory&lt;/span&gt;
 router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/assets/*&quot;&lt;/span&gt;).handler(StaticHandler.create(&lt;span class=&quot;hljs-string&quot;&gt;&quot;assets&quot;&lt;/span&gt;));

 vertx
     .createHttpServer()
     .requestHandler(router::accept)
     .listen(
         &lt;span class=&quot;hljs-comment&quot;&gt;// Retrieve the port from the configuration,&lt;/span&gt;
         &lt;span class=&quot;hljs-comment&quot;&gt;// default to 8080.&lt;/span&gt;
         config().getInteger(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http.port&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;),
         result -&gt; {
           &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (result.succeeded()) {
             fut.complete();
           } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
             fut.fail(result.cause());
           }
         }
     );
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only difference with the previous code is the &lt;code&gt;router.route(&quot;/assets/*&quot;).handler(StaticHandler.create(&quot;assets&quot;));&lt;/code&gt; line. So, what does this line mean? It’s actually quite simple. It &lt;em&gt;routes&lt;/em&gt; requests on “/assets/*” to resources stored in the “assets” directory. So our &lt;code&gt;index.html&lt;/code&gt; page is going to be served using &lt;code&gt;http://localhost:8080/assets/index.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Before testing this, let’s take a few seconds on the handler creation. All processing actions in Vert.x web are implemented as &lt;em&gt;handler&lt;/em&gt;. To create a handler you always call the &lt;code&gt;create&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;So, I’m sure you are impatient to see our beautiful HTML page. Let’s build and run the application:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mvn clean package
java -jar target/my-first-app-&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;-SNAPSHOT-fat.jar&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, open your browser to &lt;code&gt;http://localhost:8080/assets/index.html&lt;/code&gt;. Here it is… Ugly right? I told you.&lt;/p&gt;
&lt;p&gt;As you may notice too… the table is empty, this is because we didn’t implement the REST API yet. Let’s do that now.&lt;/p&gt;
&lt;h2 id=&quot;rest-api-with-vert-x-web&quot;&gt;REST API with Vert.x Web&lt;/h2&gt;
&lt;p&gt;Vert.x Web makes the implementation of REST API really easy, as it basically &lt;em&gt;routes&lt;/em&gt; your URL to the right handler. The API is very simple, and will be structured as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET /api/whiskies&lt;/code&gt; =&gt; get all bottles (&lt;code&gt;getAll&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET /api/whiskies/:id&lt;/code&gt; =&gt; get the bottle with the corresponding id (&lt;code&gt;getOne&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST /api/whiskies&lt;/code&gt; =&gt; add a new bottle (&lt;code&gt;addOne&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUT /api/whiskies/:id&lt;/code&gt; =&gt; update a bottle (&lt;code&gt;updateOne&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELETE /api/whiskies/id&lt;/code&gt; =&gt; delete a bottle (&lt;code&gt;deleteOne&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;we-need-some-data-&quot;&gt;We need some data…&lt;/h3&gt;
&lt;p&gt;But before going further, let’s create our &lt;em&gt;data&lt;/em&gt; object. Create the &lt;code&gt;src/main/java/io/vertx/blog/first/Whisky.java&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; io.vertx.blog.first;

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.atomic.AtomicInteger;

&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Whisky&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; AtomicInteger COUNTER = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; AtomicInteger();

  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; id;

  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String name;

  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String origin;

  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Whisky&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String name, String origin)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.id = COUNTER.getAndIncrement();
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.name = name;
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.origin = origin;
  }

  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Whisky&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.id = COUNTER.getAndIncrement();
  }

  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; name;
  }

  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;getOrigin&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; origin;
  }

  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; id;
  }

  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String name)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.name = name;
  }

  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setOrigin&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String origin)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.origin = origin;
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s a very simple &lt;em&gt;bean&lt;/em&gt; class (so with getters and setters). We choose this format because Vert.x is relying on &lt;a href=&quot;http://wiki.fasterxml.com/JacksonHome&quot;&gt;Jackson&lt;/a&gt; to handle the JSON format. Jackson automates the serialization and deserialization of &lt;em&gt;bean&lt;/em&gt; classes, making our code much simpler.&lt;/p&gt;
&lt;p&gt;Now, let’s create a couple of bottles. In the &lt;code&gt;MyFirstVerticle&lt;/code&gt; class, add the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Store our product&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Map&lt;Integer, Whisky&gt; products = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; LinkedHashMap&lt;&gt;();
&lt;span class=&quot;hljs-comment&quot;&gt;// Create some product&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;createSomeData&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
  Whisky bowmore = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Whisky(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bowmore 15 Years Laimrig&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Scotland, Islay&quot;&lt;/span&gt;);
  products.put(bowmore.getId(), bowmore);
  Whisky talisker = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Whisky(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Talisker 57° North&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Scotland, Island&quot;&lt;/span&gt;);
  products.put(talisker.getId(), talisker);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, in the &lt;code&gt;start&lt;/code&gt; method, call the &lt;code&gt;createSomeData&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Future&lt;Void&gt; fut)&lt;/span&gt; &lt;/span&gt;{

  createSomeData();

  &lt;span class=&quot;hljs-comment&quot;&gt;// Create a router object.&lt;/span&gt;
  Router router = Router.router(vertx);

  &lt;span class=&quot;hljs-comment&quot;&gt;// Rest of the method&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you have noticed, we don’t really have a &lt;em&gt;backend&lt;/em&gt; here, it’s just a (in-memory) map. Adding a backend will be covered by another post.&lt;/p&gt;
&lt;h3 id=&quot;get-our-products&quot;&gt;Get our products&lt;/h3&gt;
&lt;p&gt;Enough decoration, let’s implement the REST API. We are going to start with &lt;code&gt;GET /api/whiskies&lt;/code&gt;. It returns the list of bottles in a JSON Array.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;start&lt;/code&gt; method, add this line just below the static handler line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;router.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/whiskies&quot;&lt;/span&gt;).handler(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;::getAll);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This line instructs the &lt;code&gt;router&lt;/code&gt; to handle the &lt;code&gt;GET&lt;/code&gt; requests on “/api/whiskies” by calling the &lt;code&gt;getAll&lt;/code&gt; method. We could have inlined the handler code, but for clarity reasons let’s create another  method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext routingContext)&lt;/span&gt; &lt;/span&gt;{
  routingContext.response()
      .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json; charset=utf-8&quot;&lt;/span&gt;)
      .end(Json.encodePrettily(products.values()));
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As every &lt;em&gt;handler&lt;/em&gt; our method receives a &lt;code&gt;RoutingContext&lt;/code&gt;. It populates the &lt;code&gt;response&lt;/code&gt; by setting the &lt;code&gt;content-type&lt;/code&gt; and the actual content. Because our content may contain &lt;em&gt;weird&lt;/em&gt; characters, we force the charset to UTF-8. To create the actual content, no need to compute the JSON string ourself. Vert.x lets us use the &lt;code&gt;Json&lt;/code&gt; API. So &lt;code&gt;Json.encodePrettily(products.values())&lt;/code&gt; computes the JSON string representing the set of bottles.&lt;/p&gt;
&lt;p&gt;We could have used &lt;code&gt;Json.encodePrettily(products)&lt;/code&gt;, but to make the JavaScript code simpler, we just return the set of bottles and not an object containing &lt;code&gt;ID =&gt; Bottle&lt;/code&gt; entries.&lt;/p&gt;
&lt;p&gt;With this in place, we should be able to retrieve the set of bottle from our HTML page. Let’s try it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mvn clean package
java -jar target/my-first-app-&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;-SNAPSHOT-fat.jar&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then open the HTML page in your browser (&lt;code&gt;http://localhost:8080/assets/index.html&lt;/code&gt;), and should should see:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://vertx.io/assets/blog/intro-series/post-3-My_Whisky_Collection.png&quot; class=&quot;img-responsive&quot;&gt;&lt;/p&gt;
&lt;p&gt;I’m sure you are curious, and want to actually see what is returned by our REST API. Let’s open a browser to &lt;code&gt;http://localhost:8080/api/whiskies&lt;/code&gt;. You should get:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;[ {
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;id&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bowmore 15 Years Laimrig&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;origin&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Scotland, Islay&quot;&lt;/span&gt;
&lt;/span&gt;}, {
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;id&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Talisker 57° North&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;origin&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Scotland, Island&quot;&lt;/span&gt;
&lt;/span&gt;} ]&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;create-a-product&quot;&gt;Create a product&lt;/h2&gt;
&lt;p&gt;Now we can retrieve the set of bottles, let’s create a new one. Unlike the previous REST API endpoint, this one need to read the request’s body. For performance reason, it should be explicitly enabled. Don’t be scared… it’s just a handler.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;start&lt;/code&gt; method, add these lines just below the line ending by &lt;code&gt;getAll&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/whiskies*&quot;&lt;/span&gt;).handler(BodyHandler.create());
router.post(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/whiskies&quot;&lt;/span&gt;).handler(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;::addOne);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line enables the reading of the request body for all routes under “/api/whiskies”. We could have enabled it globally with &lt;code&gt;router.route().handler(BodyHandler.create())&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The second line maps &lt;code&gt;POST&lt;/code&gt; requests on &lt;code&gt;/api/whiskies&lt;/code&gt; to the &lt;code&gt;addOne&lt;/code&gt; method. Let’s create this method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;addOne&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext routingContext)&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Whisky whisky = Json.decodeValue(routingContext.getBodyAsString(),
      Whisky.class);
  products.put(whisky.getId(), whisky);
  routingContext.response()
      .setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;201&lt;/span&gt;)
      .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json; charset=utf-8&quot;&lt;/span&gt;)
      .end(Json.encodePrettily(whisky));
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The method starts by retrieving the &lt;code&gt;Whisky&lt;/code&gt; object from the request body. It just reads the body into a String and passes it to the &lt;code&gt;Json.decodeValue&lt;/code&gt; method. Once created it adds it to the &lt;em&gt;backend&lt;/em&gt; map and returns the created bottle as JSON.&lt;/p&gt;
&lt;p&gt;Let’s try this. Rebuild and restart the application with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;mvn clean package
java -jar target/&lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;first&lt;/span&gt;-app-&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;-SNAPSHOT-fat.jar&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, refresh the HTML page and click on the &lt;code&gt;Add a new bottle&lt;/code&gt; button. Enter the data such as: “Jameson” as name and “Ireland” as origin (purists would have noticed that this is actually a Whiskey and not a Whisky). The bottle should be added to the table.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;Status 201 ? &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; As you can see, we have set the response status to &lt;code&gt;201&lt;/code&gt;. It means &lt;code&gt;CREATED&lt;/code&gt;, and is the generally used in REST API that create an entity. By default vert.x web is setting the status to &lt;code&gt;200&lt;/code&gt; meaning &lt;code&gt;OK&lt;/code&gt;.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3 id=&quot;finishing-a-bottle&quot;&gt;Finishing a bottle&lt;/h3&gt;
&lt;p&gt;Well, bottles do not last forever, so we should be able to delete a bottle. In the &lt;code&gt;start&lt;/code&gt; method, add this line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;router.delete(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/whiskies/:id&quot;&lt;/span&gt;).handler(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;::deleteOne);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the URL, we define a &lt;em&gt;path parameter&lt;/em&gt; &lt;code&gt;:id&lt;/code&gt;. So, when handling a matching request, Vert.x extracts the path segment corresponding to the parameter and let us access it in the handler method. For instance, &lt;code&gt;/api/whiskies/0&lt;/code&gt; maps &lt;code&gt;id&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s see how the parameter can be used in the handler method. Create the &lt;code&gt;deleteOne&lt;/code&gt; method as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;deleteOne&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext routingContext)&lt;/span&gt; &lt;/span&gt;{
  String id = routingContext.request().getParam(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;);
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (id == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {
    routingContext.response().setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt;).end();
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    Integer idAsInteger = Integer.valueOf(id);
    products.remove(idAsInteger);
  }
  routingContext.response().setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;204&lt;/span&gt;).end();
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;em&gt;path parameter&lt;/em&gt; is retrieved using &lt;code&gt;routingContext.request().getParam(&quot;id&quot;)&lt;/code&gt;.  It checks whether it’s &lt;code&gt;null&lt;/code&gt; (not set), and in this case returns a &lt;code&gt;Bad Request&lt;/code&gt; response (status code 400). Otherwise, it removes it from the &lt;em&gt;backend&lt;/em&gt; map.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#39;admonition-block note&#39;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#39;admonition-icon&#39;&gt;&lt;i class=&#39;admonition-icon fa fa-comment&#39;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&#39;content&#39;&gt;&lt;span class=&#39;title&#39;&gt;Status 204 ? &lt;/span&gt;&lt;br/&gt;&lt;span class=&#39;content&#39;&gt; As you can see, we have set the response status to &lt;code&gt;204 - NO CONTENT&lt;/code&gt;. Response to the HTTP Verb &lt;code&gt;delete&lt;/code&gt; have generally no content.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3 id=&quot;the-other-methods&quot;&gt;The other methods&lt;/h3&gt;
&lt;p&gt;We won’t detail &lt;code&gt;getOne&lt;/code&gt; and &lt;code&gt;updateOne&lt;/code&gt; as the implementations are straightforward and very similar. Their implementations are available on &lt;a href=&quot;https://github.com/cescoffier/my-vertx-first-app/blob/post-3/src/main/java/io/vertx/blog/first/MyFirstVerticle.java&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;cheers-&quot;&gt;Cheers !&lt;/h3&gt;
&lt;p&gt;It’s time to conclude this post. We have seen how Vert.x Web lets you implement a REST API easily and how it can serve static resources. A bit more fancy than before, but still pretty easy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/blog/unit-and-integration-tests/&quot;&gt;In the next post&lt;/a&gt; we are going to improve our tests to cover the REST API.&lt;/p&gt;
&lt;p&gt;Say Tuned &amp; Happy Coding !&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 27 Jul 2015 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/some-rest-with-vert-x</link>
          <guid isPermaLink="true">https://vertx.io/blog/some-rest-with-vert-x</guid>
          <author>
            <name>cescoffier</name>
            <uri>http://github.com/cescoffier</uri>
          </author>
        </item>
      
        <item>
          <title>Vert.x Application Configuration</title>
          <description>
      &lt;article&gt;&lt;h2 id=&quot;previously-in-introduction-to-vert-x-&quot;&gt;Previously in ‘Introduction to Vert.x’&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&quot;https://vertx.io/blog/my-first-vert-x-3-application/&quot;&gt;this post&lt;/a&gt;, we developed a very simple Vert.x 3 application, and saw how this application can be tested, packaged and executed. That was nice, isn’t it ? Well, ok, that was only the beginning. In this post, we are going to enhance our application to support &lt;em&gt;external&lt;/em&gt; configuration.&lt;/p&gt;
&lt;p&gt;So just to remind you, we have an application starting a HTTP server on the port 8080 and replying a polite “Hello” message to all HTTP requests. The previous code is available &lt;a href=&quot;https://github.com/cescoffier/my-vertx-first-app/tree/post-1&quot;&gt;here&lt;/a&gt;. The code developed in this post is in the &lt;a href=&quot;https://github.com/cescoffier/my-vertx-first-app/tree/post-2&quot;&gt;post-2 branch&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;so-why-do-we-need-configuration-&quot;&gt;So, why do we need configuration?&lt;/h2&gt;
&lt;p&gt;That’s a good question. The application works right now, but well, let’s say you want to deploy it on a machine where the port 8080 is already taken. We would need to change the port in the application code and in the test, just for this machine. That would be sad. Fortunately, Vert.x applications are configurable.&lt;/p&gt;
&lt;p&gt;Vert.x configurations are using the JSON format, so don’t expect anything complicated. They can be passed to verticle either from the command line, or using an API. Let’s have a look.&lt;/p&gt;
&lt;h2 id=&quot;no-8080-anymore&quot;&gt;No ‘8080’ anymore&lt;/h2&gt;
&lt;p&gt;The first step is to modify the &lt;code&gt;io.vertx.blog.first.MyFirstVerticle&lt;/code&gt; class to not bind to the port 8080, but to read it from the configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Future&lt;Void&gt; fut)&lt;/span&gt; &lt;/span&gt;{
  vertx
      .createHttpServer()
      .requestHandler(r -&gt; {
        r.response().end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;h1&gt;Hello from my first &quot;&lt;/span&gt; +
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;Vert.x 3 application&lt;/h1&gt;&quot;&lt;/span&gt;);
      })
      .listen(
          &lt;span class=&quot;hljs-comment&quot;&gt;// Retrieve the port from the configuration,&lt;/span&gt;
          &lt;span class=&quot;hljs-comment&quot;&gt;// default to 8080.&lt;/span&gt;
          config().getInteger(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http.port&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;),
          result -&gt; {
            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (result.succeeded()) {
              fut.complete();
            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
              fut.fail(result.cause());
            }
          }
      );
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, the only difference with the previous version is &lt;code&gt;config().getInteger(&quot;http.port&quot;, 8080)&lt;/code&gt;. Here, our code is now requesting the configuration and check whether the &lt;em&gt;http.port&lt;/em&gt; property is set. If not, the port 8080 is used as fall-back. The retrieved configuration is a &lt;code&gt;JsonObject&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As we are using the port 8080 by default, you can still package our application and run it as before:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mvn clean package
java -jar target/my-first-app-&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;-SNAPSHOT-fat.jar&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple right ?&lt;/p&gt;
&lt;h2 id=&quot;api-based-configuration-random-port-for-the-tests&quot;&gt;API-based configuration - Random port for the tests&lt;/h2&gt;
&lt;p&gt;Now that the application is configurable, let’s try to provide a configuration. In our test, we are going to configure our application to use the port 8081. So, previously we were deploying our verticle with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;vertx.deployVerticle(MyFirstVerticle.class.getName(), context.asyncAssertSuccess());&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s now pass some &lt;em&gt;deployment options&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;port = &lt;span class=&quot;hljs-number&quot;&gt;8081&lt;/span&gt;;
DeploymentOptions options = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DeploymentOptions()
    .setConfig(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject().put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http.port&quot;&lt;/span&gt;, port)
);
vertx.deployVerticle(MyFirstVerticle.class.getName(), options, context.asyncAssertSuccess());&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;DeploymentOptions&lt;/code&gt; object lets us customize various parameters. In particular, it lets us inject the &lt;code&gt;JsonObject&lt;/code&gt; retrieved by the verticle when using the &lt;code&gt;config()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Obviously, the test connecting to the server needs to be slightly modified to use the right port (&lt;code&gt;port&lt;/code&gt; is a field):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;vertx.createHttpClient().getNow(port, &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;, response -&gt; {
  response.handler(body -&gt; {
    context.assertTrue(body.toString().contains(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;));
    async.complete();
  });
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, well, this does not really fix our issue. What happens when the port 8081 is used too. Let’s now pick a random port:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;ServerSocket socket = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ServerSocket(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);
port = socket.getLocalPort();
socket.close();

DeploymentOptions options = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DeploymentOptions()
    .setConfig(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject().put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http.port&quot;&lt;/span&gt;, port)
    );

vertx.deployVerticle(MyFirstVerticle.class.getName(), options, context.asyncAssertSuccess());&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, the idea is very simple. We open a &lt;em&gt;server socket&lt;/em&gt; that would pick a random port (that’s why we put 0 as parameter). We retrieve the used port and close the socket. Be aware that this method is &lt;strong&gt;not&lt;/strong&gt; perfect and may fail if the picked port becomes used between the &lt;code&gt;close&lt;/code&gt; method and the start of our HTTP server. However, it would work fine in the very high majority of the case.&lt;/p&gt;
&lt;p&gt;With this in place, our test is now using a random port. Execute them with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mvn clean test&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;external-configuration-let-s-run-on-another-port&quot;&gt;External configuration - Let’s run on another port&lt;/h2&gt;
&lt;p&gt;Ok, well random port is not what we want in &lt;em&gt;production&lt;/em&gt;. Could you imagine the face of your production team if you tell them that your application is picking a random port. It can actually be funny, but we should never mess with the production team.&lt;/p&gt;
&lt;p&gt;So for the actual execution of your application, let’s pass the configuration in an external file. The configuration is stored in a &lt;em&gt;json&lt;/em&gt; file.&lt;/p&gt;
&lt;p&gt;Create the &lt;code&gt;src/main/conf/my-application-conf.json&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;http.port&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;8082&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, to use this configuration just launch your application with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;java -jar target/my-first-app-&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;-SNAPSHOT-fat.jar -conf src/main/conf/my-application-conf.json&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open a browser on &lt;a href=&quot;http://localhost:8082&quot;&gt;http://localhost:8082&lt;/a&gt;, here it is !&lt;/p&gt;
&lt;p&gt;How does that work ? Remember, our &lt;em&gt;fat jar&lt;/em&gt; is using the &lt;code&gt;Starter&lt;/code&gt; class (provided by Vert.x) to launch our application. This class is reading the &lt;code&gt;-conf&lt;/code&gt; parameter and create the corresponding deployment options when deploying our verticle.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;After having developed your first Vert.x application, we have seen how this application is configurable, and this without adding any complexity to our application. &lt;a href=&quot;/blog/some-rest-with-vert-x/&quot;&gt;In the next post&lt;/a&gt;, we are going to see how we can use vertx-web to develop a small application serving static pages and a REST API. A bit more fancy, but still very simple.&lt;/p&gt;
&lt;p&gt;Happy Coding and &amp; Stay Tuned!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 20 Jul 2015 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/vert-x-application-configuration</link>
          <guid isPermaLink="true">https://vertx.io/blog/vert-x-application-configuration</guid>
          <author>
            <name>cescoffier</name>
            <uri>http://github.com/cescoffier</uri>
          </author>
        </item>
      
        <item>
          <title>My first Vert.x 3 Application</title>
          <description>
      &lt;article&gt;&lt;p&gt;Let’s say, you heard someone saying that Vert.x is &lt;em&gt;awesome&lt;/em&gt;. Ok great, but you may want to try it by yourself. Well, the next natural question is “where do I start ?”. This post is a good starting point. It shows how is built a very simple vert.x application (nothing fancy), how it is tested and how it is packaged and executed. So, everything you need to know before building your own groundbreaking application.&lt;/p&gt;
&lt;p&gt;The code developed in this post is available on &lt;a href=&quot;https://github.com/cescoffier/my-vertx-first-app&quot;&gt;github&lt;/a&gt;. This post is part of the &lt;em&gt;Introduction to Vert.x series&lt;/em&gt;. The code of this post in in the &lt;a href=&quot;https://github.com/cescoffier/my-vertx-first-app/tree/post-1&quot;&gt;post-1 branch&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;let-s-start-&quot;&gt;Let’s start !&lt;/h2&gt;
&lt;p&gt;First, let’s create a project. In this post, we use Apache Maven, but you can use Gradle or the build process tool you prefer. You could use the Maven jar archetype to create the structure, but basically, you just need a directory with:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a &lt;code&gt;src/main/java&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;src/test/java&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;pom.xml&lt;/code&gt; file&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, you would get something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;.
├── pom&lt;span class=&quot;hljs-class&quot;&gt;.xml&lt;/span&gt;
├── src
│   ├── main
│   │   └── java
│   └── test
│       └── java&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s create the &lt;code&gt;pom.xml&lt;/code&gt; file with the following content:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;
         &lt;span class=&quot;hljs-attribute&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
         &lt;span class=&quot;hljs-attribute&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0
                      http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;modelVersion&lt;/span&gt;&gt;&lt;/span&gt;4.0.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;modelVersion&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.vertx.blog&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;my-first-app&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;

  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependencies&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.vertx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;vertx-core&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;3.0.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependencies&lt;/span&gt;&gt;&lt;/span&gt;

  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;build&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;plugins&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;plugin&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;maven-compiler-plugin&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;3.3&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;configuration&lt;/span&gt;&gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;source&lt;/span&gt;&gt;&lt;/span&gt;1.8&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;source&lt;/span&gt;&gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;target&lt;/span&gt;&gt;&lt;/span&gt;1.8&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;target&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;configuration&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;plugin&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;plugins&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;build&lt;/span&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;project&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This &lt;code&gt;pom.xml&lt;/code&gt; file is pretty straightforward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it declares a dependency on &lt;code&gt;vertx-core&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;it configures the &lt;em&gt;maven-compiler-plugin&lt;/em&gt; to use Java 8.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This second point is important, Vert.x applications require Java 8.&lt;/p&gt;
&lt;h2 id=&quot;let-s-code-&quot;&gt;Let’s code !&lt;/h2&gt;
&lt;p&gt;Ok, now we have made the &lt;code&gt;pom.xml&lt;/code&gt; file. Let’s do some real coding… Create the &lt;code&gt;src/main/java/io/vertx/blog/first/MyFirstVerticle.java&lt;/code&gt; file with the following content:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; io.vertx.blog.first;

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.core.AbstractVerticle;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.core.Future;

&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyFirstVerticle&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AbstractVerticle&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Future&lt;Void&gt; fut)&lt;/span&gt; &lt;/span&gt;{
    vertx
        .createHttpServer()
        .requestHandler(r -&gt; {
          r.response().end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;h1&gt;Hello from my first &quot;&lt;/span&gt; +
              &lt;span class=&quot;hljs-string&quot;&gt;&quot;Vert.x 3 application&lt;/h1&gt;&quot;&lt;/span&gt;);
        })
        .listen(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;, result -&gt; {
          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (result.succeeded()) {
            fut.complete();
          } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
            fut.fail(result.cause());
          }
        });
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is actually our not fancy application. The class extends &lt;code&gt;AbstractVerticle&lt;/code&gt;. In the Vert.x world, a &lt;em&gt;verticle&lt;/em&gt; is a component. By extending &lt;code&gt;AbstractVerticle&lt;/code&gt;, our class gets access to the &lt;code&gt;vertx&lt;/code&gt; field.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;start&lt;/code&gt; method is called when the verticle is deployed. We could also implement a &lt;code&gt;stop&lt;/code&gt; method, but in this case Vert.x takes care of the garbage for us. The &lt;code&gt;start&lt;/code&gt; method receives a &lt;code&gt;Future&lt;/code&gt; object that will let us inform Vert.x when our start sequence is completed or report an error. One of the particularity of Vert.x is its asynchronous / non-blocking aspect. When our verticle is going to be deployed it won’t wait until the start method has been completed. So, the &lt;code&gt;Future&lt;/code&gt; parameter is important to notify of the completion.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;start&lt;/code&gt; method creates a HTTP server and attaches a request handler to it. The request handler is a lambda, passed in the &lt;code&gt;requestHandler&lt;/code&gt; method, called every time the server receives a request. Here, we just reply &lt;code&gt;Hello ...&lt;/code&gt; (nothing fancy I told you). Finally, the server is bound to the 8080 port. As this may fails (because the port may already be used), we pass another lambda expression checking whether or not the connection has succeeded. As mentioned above it calls either &lt;code&gt;fut.complete&lt;/code&gt; in case of success or &lt;code&gt;fut.fail&lt;/code&gt; to report an error.&lt;/p&gt;
&lt;p&gt;Let’s try to compile the application using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mvn clean compile&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fortunately, it should succeed.&lt;/p&gt;
&lt;p&gt;That’s all for the application.&lt;/p&gt;
&lt;h2 id=&quot;let-s-test&quot;&gt;Let’s test&lt;/h2&gt;
&lt;p&gt;Well, that’s good to have developed an application, but we can never be too careful, so let’s test it. The test uses JUnit and &lt;a href=&quot;http://vertx.io/docs/vertx-unit/java/&quot;&gt;vertx-unit&lt;/a&gt; - a framework delivered with vert.x to make the testing of vert.x application more natural.&lt;/p&gt;
&lt;p&gt;Open the &lt;code&gt;pom.xml&lt;/code&gt; file to add the two following dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;junit&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;junit&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;4.12&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;scope&lt;/span&gt;&gt;&lt;/span&gt;test&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;scope&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.vertx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;vertx-unit&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;3.0.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;scope&lt;/span&gt;&gt;&lt;/span&gt;test&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;scope&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create the &lt;code&gt;src/test/java/io/vertx/blog/first/MyFirstVerticleTest.java&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; io.vertx.blog.first;

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.core.Vertx;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.ext.unit.Async;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.ext.unit.TestContext;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.ext.unit.junit.VertxUnitRunner;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.junit.After;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.junit.Before;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.junit.Test;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.junit.runner.RunWith;

&lt;span class=&quot;hljs-annotation&quot;&gt;@RunWith&lt;/span&gt;(VertxUnitRunner.class)
&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyFirstVerticleTest&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Vertx vertx;

  &lt;span class=&quot;hljs-annotation&quot;&gt;@Before&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(TestContext context)&lt;/span&gt; &lt;/span&gt;{
    vertx = Vertx.vertx();
    vertx.deployVerticle(MyFirstVerticle.class.getName(),
        context.asyncAssertSuccess());
  }

  &lt;span class=&quot;hljs-annotation&quot;&gt;@After&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;tearDown&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(TestContext context)&lt;/span&gt; &lt;/span&gt;{
    vertx.close(context.asyncAssertSuccess());
  }

  &lt;span class=&quot;hljs-annotation&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;testMyApplication&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(TestContext context)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Async async = context.async();

    vertx.createHttpClient().getNow(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;,
     response -&gt; {
      response.handler(body -&gt; {
        context.assertTrue(body.toString().contains(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;));
        async.complete();
      });
    });
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a JUnit test for our verticle. The test uses vertx-unit, so we use a custom runner. vert.x-unit makes easy to test asynchronous interactions, which are the basis of vert.x applications.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;setUp&lt;/code&gt; method, we creates an instance of &lt;code&gt;Vertx&lt;/code&gt; and deploy our verticle. You may have noticed that unlike the traditional JUnit &lt;code&gt;@Before&lt;/code&gt; method, it receives a &lt;code&gt;TestContext&lt;/code&gt;. This object lets us control the asynchronous aspect of our test. For instance, when we deploy our verticle, it starts asynchronously, as most Vert.x interactions. We cannot check anything until it gets started correctly. So, as second argument of the &lt;code&gt;deployVerticle&lt;/code&gt; method, we pass a result handler: &lt;code&gt;context.asyncAssertSuccess()&lt;/code&gt;. It fails the test if the verticle does not start correctly. In addition it waits until the verticle has completed its start sequence. Remember, in our verticle, we call &lt;code&gt;fut.complete()&lt;/code&gt;. So it waits until this method is called, and in the case of a failures, fails the test.&lt;/p&gt;
&lt;p&gt;Well, the &lt;code&gt;tearDown&lt;/code&gt; method is straightforward, and just terminates the &lt;code&gt;vertx&lt;/code&gt; instance we created.&lt;/p&gt;
&lt;p&gt;Let’s now have a look to the test of our application: the &lt;code&gt;testMyApplication&lt;/code&gt; method. The test emits a request to our application and checks the result.  Emitting the request and receiving the response is asynchronous. So we need a way to control this. As the &lt;code&gt;setUp&lt;/code&gt; and &lt;code&gt;tearDown&lt;/code&gt; methods, the test method receives a &lt;code&gt;TestContext&lt;/code&gt;. From this object we creates an &lt;em&gt;async handle&lt;/em&gt; (&lt;code&gt;async&lt;/code&gt;) that lets us notify the test framework when the test has completed (using &lt;code&gt;async.complete()&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;So, once the &lt;em&gt;async handle&lt;/em&gt; is created, we create a HTTP client and emits a HTTP request handled by our application with the &lt;code&gt;getNow()&lt;/code&gt; method (&lt;code&gt;getNow&lt;/code&gt; is just a shortcut for &lt;code&gt;get(...).end()&lt;/code&gt;). The response is handled by a lambda. In this lambda we retrieves the response body by passing another lambda to the &lt;code&gt;handler&lt;/code&gt; method. The &lt;code&gt;body&lt;/code&gt; argument is the response body (as a &lt;code&gt;buffer&lt;/code&gt; object). We check that the body contains the &lt;code&gt;&quot;Hello&quot;&lt;/code&gt; String and declare the test complete.&lt;/p&gt;
&lt;p&gt;Let’s take a minute to mention the &lt;em&gt;assertions&lt;/em&gt;. Unlike in traditional JUnit tests, it uses &lt;code&gt;context.assert...&lt;/code&gt;. Indeed, if the assertion fails, it will interrupt the test immediately. So it’s pretty important to always uses these assertion methods because of the asynchronous aspect of the Vert.x application and so tests.&lt;/p&gt;
&lt;p&gt;Our test can be run from an IDE, or using Maven:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mvn clean test&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;packaging&quot;&gt;Packaging&lt;/h2&gt;
&lt;p&gt;So, let’s sum up. We have an application and a test. Well, let’s now package the application. In this post we package the application in a &lt;em&gt;fat jar&lt;/em&gt;. A &lt;em&gt;fat jar&lt;/em&gt; is a standalone executable Jar file containing all the dependencies required to run the application. This is a very convenient way to package Vert.x applications as it’s only one file. It also make them easy to execute.&lt;/p&gt;
&lt;p&gt;To create a &lt;em&gt;fat jar&lt;/em&gt;, edit the &lt;code&gt;pom.xml&lt;/code&gt; file and add the following snippet just before &lt;code&gt;&lt;/plugins&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;plugin&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;maven-shade-plugin&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;2.3&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;executions&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;execution&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;phase&lt;/span&gt;&gt;&lt;/span&gt;package&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;phase&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;goals&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;goal&lt;/span&gt;&gt;&lt;/span&gt;shade&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;goal&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;goals&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;configuration&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;transformers&lt;/span&gt;&gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;transformer&lt;/span&gt;
            &lt;span class=&quot;hljs-attribute&quot;&gt;implementation&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&lt;/span&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;manifestEntries&lt;/span&gt;&gt;&lt;/span&gt;
              &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;Main-Class&lt;/span&gt;&gt;&lt;/span&gt;io.vertx.core.Starter&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;Main-Class&lt;/span&gt;&gt;&lt;/span&gt;
              &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;Main-Verticle&lt;/span&gt;&gt;&lt;/span&gt;io.vertx.blog.first.MyFirstVerticle&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;Main-Verticle&lt;/span&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;manifestEntries&lt;/span&gt;&gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;transformer&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;transformers&lt;/span&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactSet&lt;/span&gt;/&gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;outputFile&lt;/span&gt;&gt;&lt;/span&gt;${project.build.directory}/${project.artifactId}-${project.version}-fat.jar&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;outputFile&lt;/span&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;configuration&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;execution&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;executions&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;plugin&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It uses the &lt;a href=&quot;https://maven.apache.org/plugins/maven-shade-plugin/&quot;&gt;maven-shade-plugin&lt;/a&gt; to create the &lt;code&gt;fat jar&lt;/code&gt;. In the &lt;code&gt;manifestEntries&lt;/code&gt; it indicates the name of our verticle. You may wonder from where comes the &lt;code&gt;Starter&lt;/code&gt; class. It’s actually a class from vert.x, that is going to create the &lt;code&gt;vertx&lt;/code&gt; instance and deploy our verticle.&lt;/p&gt;
&lt;p&gt;So, with this plugin configured, let’s launch:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mvn clean package&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is going to create &lt;code&gt;target/my-first-app-1.0-SNAPSHOT-fat.jar&lt;/code&gt; embedding our application along with all the dependencies (including vert.x itself).&lt;/p&gt;
&lt;h2 id=&quot;executing-our-application&quot;&gt;Executing our application&lt;/h2&gt;
&lt;p&gt;Well, it’s nice to have a &lt;em&gt;fat jar&lt;/em&gt;, but we want to see our application running! As said above, thanks to the &lt;em&gt;fat jar&lt;/em&gt; packaging, running Vert.x application is easy as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;java -jar target/my-first-app-&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;-SNAPSHOT-fat.jar&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, open a browser to &lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To stop the application, hit &lt;code&gt;CTRL+C&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This Vert.x 3 crash class has presented how you can develop a simple application using Vert.x 3, how to test it, package it and run it. So, you now know everything you need to build amazing system on top of Vert.x 3. Next time we will see how to &lt;a href=&quot;/blog/vert-x-application-configuration/&quot;&gt;configure our application&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding &amp; Stay tuned !&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Tue, 14 Jul 2015 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/my-first-vert-x-3-application</link>
          <guid isPermaLink="true">https://vertx.io/blog/my-first-vert-x-3-application</guid>
          <author>
            <name>cescoffier</name>
            <uri>http://github.com/cescoffier</uri>
          </author>
        </item>
      
        <item>
          <title>Vert.x3 says &quot;hello&quot; to NPM users</title>
          <description>
      &lt;article&gt;&lt;p&gt;In programming literature it has become the standard to create a hello world program as the first example. In this
article I’ll be demonstrating how &lt;code&gt;NPM&lt;/code&gt; users can quickly get started with &lt;code&gt;vert.x&lt;/code&gt;. You will see that it is not
that different and in fact it can be done using the tools you’re used to. Note that although we are using &lt;code&gt;NPM&lt;/code&gt; we are
not relying on &lt;code&gt;node.js&lt;/code&gt;, all &lt;code&gt;javascript&lt;/code&gt; code runs on the &lt;code&gt;JVM&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;hello-world-examples&quot;&gt;Hello World Examples&lt;/h2&gt;
&lt;p&gt;Here are four simple hello world examples. The comments in the code explain how the code works and the text around it
explain what it does and how to test it.&lt;/p&gt;
&lt;h2 id=&quot;hello-console&quot;&gt;Hello Console&lt;/h2&gt;
&lt;p&gt;This example is about as plain as it can get. It prints the words “&lt;code&gt;Hello World&lt;/code&gt;“ to the terminal. If you’re a
javascript developer you should be already used to &lt;code&gt;npm&lt;/code&gt; and know that you always start a project with the file
&lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;vertx3-hello-console&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;private&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;vertx3-min&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;3.0.0-1&quot;&lt;/span&gt;
  },
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;start&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;./node_modules/.bin/vertx run server.js&quot;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we have a dependency wich is obvious &lt;code&gt;vert.x&lt;/code&gt; now note that there are 3 flavours of this dependency:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-min&quot;&gt;min&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-base&quot;&gt;base&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-full&quot;&gt;full&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;According to your needs you can pick a different flavour, since for a simple hello world we only need the minimal that
is the one we add to the dependency property.&lt;/p&gt;
&lt;p&gt;Now we need to do a simple hello app, we will call this file “&lt;code&gt;server.js&lt;/code&gt;“:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Call the console.log function.&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can run this by executing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;npm install
npm start&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first command retrieve the vert.x stack while the seconds starts your program.&lt;/p&gt;
&lt;h2 id=&quot;hello-http&quot;&gt;Hello HTTP&lt;/h2&gt;
&lt;p&gt;I’d guess that while it’s not the only use case for &lt;code&gt;vert.x&lt;/code&gt;, most people are using it as a web application platform. So
the next example will be a simple HTTP server that responds to every request with the plain text message “&lt;code&gt;Hello World&lt;/code&gt;“
&lt;code&gt;server.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;vertx.createHttpServer()
  .requestHandler(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(req)&lt;/span&gt; &lt;/span&gt;{
    req.response()
      .putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;)
      .end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;);
}).listen(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can reuse the same &lt;code&gt;package.json&lt;/code&gt; we’ve just defined in the previous section and start the server with
&lt;code&gt;npm start&lt;/code&gt;. Once the server starts you can open a browser to &lt;code&gt;http://localhost:8080&lt;/code&gt; and enjoy the message.&lt;/p&gt;
&lt;h2 id=&quot;hello-tcp&quot;&gt;Hello TCP&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Vert.x&lt;/code&gt; also makes an excellent TCP server, and here is an example that responds to all TCP connections with the
message “Hello World” and then closes the connection &lt;code&gt;server.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; server = vertx.createNetServer();
server.connectHandler(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(socket)&lt;/span&gt; &lt;/span&gt;{
  socket.write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World!\n&quot;&lt;/span&gt;);
  socket.close();
});

server.listen(&lt;span class=&quot;hljs-number&quot;&gt;7000&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again reuse the previous &lt;code&gt;package.json&lt;/code&gt; and test it by doing &lt;code&gt;telnet localhost 7000&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;hello-web&quot;&gt;Hello Web&lt;/h2&gt;
&lt;p&gt;Often you won’t be using &lt;code&gt;vert.x&lt;/code&gt; built-in libraries because they are designed to be very low level. This makes &lt;code&gt;vert.x&lt;/code&gt;
quick, nimble, and easy to maintain, but if you are planning to build a complex application you want some productivity
and rely on a simple web framework. For this specific case there is &lt;code&gt;vert.x web&lt;/code&gt;,
&lt;a href=&quot;http://vertx.io/docs/#web&quot;&gt;a simple, yet productive framework&lt;/a&gt;, to build fast web application with routing, template
rendering, lots of middleware etc…usually not enough to get started on a real world application. This example shows an
HTTP server that responds with “Hello World” to all requests to “/“ and responds with a 404 error to everything else
&lt;code&gt;server.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; Router = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;vertx-web-js/router&quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; server = vertx.createHttpServer();

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; router = Router.router(vertx);

router.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;).handler(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(ctx)&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-comment&quot;&gt;// This handler will be called for &quot;/&quot; requests&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; response = ctx.response();
  response.putHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;);

  &lt;span class=&quot;hljs-comment&quot;&gt;// Write to the response and end it&lt;/span&gt;
  response.end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;);
});

server.requestHandler(router.accept).listen(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to test this, you will need to install the &lt;code&gt;vertx3-full&lt;/code&gt; stack. There are two ways to do this. You can either
install it globally &lt;code&gt;npm install -g vertx3-full&lt;/code&gt; or add it as a dependency to our &lt;code&gt;package.json&lt;/code&gt; as we have done before,
for example &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;vertx3-hello-web&quot;&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;private&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;vertx3-full&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;3.0.0-1&quot;&lt;/span&gt;
  },
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;start&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;./node_modules/.bin/vertx run server.js&quot;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it for now. Hopefully this will help you get started working with &lt;code&gt;vert.x&lt;/code&gt;!&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 13 Jul 2015 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/vert-x3-says-hello-to-npm-users</link>
          <guid isPermaLink="true">https://vertx.io/blog/vert-x3-says-hello-to-npm-users</guid>
          <author>
            <name>pmlopes</name>
            <uri>http://github.com/pmlopes</uri>
          </author>
        </item>
      
        <item>
          <title>Checklist for Migrating from Vert.x 2.1.x to Vert.x 3 - Part One</title>
          <description>
      &lt;article&gt;&lt;p&gt;This blog post presents feedbacks from a project migration using Vert.x 2 to Vert.x 3.&lt;/p&gt;
&lt;h2 id=&quot;we-are-in-the-process-of-converting-our-vert-x-2-1-5-application-to-vert-x-3-0-&quot;&gt;We are in the process of converting our Vert.x 2.1.5 application to Vert.x 3.0.&lt;/h2&gt;
&lt;p&gt;So while upgrading our application, I thought I should note down all the changes that we had to do in the process. Since Vert.x 3 is a major upgrade from the previous version, with so many changes.&lt;/p&gt;
&lt;p&gt;It requires re-thinking your current 2.x Vert.x application. There are new classes, new apis, and a new package structure that has greatly simplified things that we used to have to work around. Therefore in our upgrade it required us to refactor and remove any unnecessary &lt;em&gt;“hacks”&lt;/em&gt; that weren’t available in 2 that are now a part of Vert.x 3 that you really want and need to take advantage of. (I don’t mean there are hacks in 3.x, just that we had in our application with Vert.x 2.x)&lt;/p&gt;
&lt;p&gt;There are &lt;em&gt;Metrics&lt;/em&gt;, and &lt;em&gt;Clustered shared data&lt;/em&gt;, with locking and many more features that are amazing new additions. These are things we had to hack into our application with Vert.x 2.x. We added our own &lt;code&gt;MetricsRegistry&lt;/code&gt; from &lt;a href=&quot;https://dropwizard.github.io/metrics/3.1.0/getting-started/&quot;&gt;DropWizard&lt;/a&gt; which meant making our own &lt;code&gt;Main&lt;/code&gt; class that called Vert.x’s &lt;code&gt;Starter&lt;/code&gt; class after starting up the registry, but only in our &lt;em&gt;Devops&lt;/em&gt; server deploys, not our developer machines. And we had to build our own distributed locked of clustered data that also required writing a comprehensive distributed timers. (The timers got fixed with a better actor model). But now we can use what Vert.x gives us internally for those use cases.&lt;/p&gt;
&lt;p&gt;This blog post is part one, as I am sure there will be some new changes that we need to do that we haven’t gotten to yet. Which as we go, will post in part two. Also that this post is a work in progress in that whenever you are upgrading and refactoring your code, it doesn’t leave much time for taking detailed notes, or writing beautiful prose. I am a terrible writer even when I can fully concentrate on it. So the first draft will just be a list of my notes. These notes are not in any particular order, but some things like tests you might want to save for last. (Just DON’T delete your tests, tests are very important)&lt;/p&gt;
&lt;p&gt;One of the first things that Vert.x has changed is the whole &lt;em&gt;classloader&lt;/em&gt; setup. Read the Vert.x Docs for more information but basically, we have a flat &lt;em&gt;classloader&lt;/em&gt; system now. YAY! And one of the first things I noticed that is gone is the &lt;code&gt;Platform&lt;/code&gt; module.&lt;/p&gt;
&lt;h2 id=&quot;changes-we-have-made-&quot;&gt;Changes we have made.&lt;/h2&gt;
&lt;h3 id=&quot;dependency-changes&quot;&gt;Dependency changes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;So the first thing we did was to remove the &lt;code&gt;vert.x-platform&lt;/code&gt; dependency from our &lt;code&gt;pom&lt;/code&gt; file (Build dependency file of whatever build system you use) This also means that you will be removing any import statements from your code that has &lt;code&gt;.platform&lt;/code&gt;. Which leads us to the next point.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change all the imports for Vertx. from &lt;code&gt;org.vertx&lt;/code&gt; to &lt;code&gt;io.vertx&lt;/code&gt;. This could be a lot of work, as it is in every class you use Vert.x in. We had at least 250 locations to change here. Some classes have moved packages and “jars” that have them, so there will be some new jars to include as dependencies and different import statements for them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If using a language other than Java, change the dependency to &lt;code&gt;vertx-lang-&lt;&lt;language&gt;&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove any modules references that are using Vert.x 2.x stuff. You can get an odd error like
&lt;em&gt;The type org.vertx.java.core.json.JsonObject cannot be resolved. It is indirectly referenced from required .class files&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;testtools&lt;/code&gt; dependency is gone. There is now Vertx-unit. So all your previous tests need to be completely re-written in the new style. This can be really difficult and time consuming as the tests you already have written really do need to be re-written from scratch. But these tests are also the backbone in knowing if your code is working. So this could take months if you have a really full set of test suites already. Also note the list below is to convert your JUnit Integration tests. as vertx-unit first and foremost provides its own testing framework/suite but it also works in JUnit, and if you are using JUnit you need to do the following&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remove all the imports to &lt;code&gt;TestTools&lt;/code&gt;, including &lt;code&gt;VertxAssert&lt;/code&gt;. I would do a find/replace to replace all the &lt;code&gt;VertxAssert&lt;/code&gt; to &lt;code&gt;testContext&lt;/code&gt; for when you have to add &lt;code&gt;TestContext&lt;/code&gt; to all your &lt;code&gt;@Test&lt;/code&gt; methods. I recommend naming the parameter &lt;code&gt;testContext&lt;/code&gt;, just to put more context, into your context. Because if you just have &lt;code&gt;context&lt;/code&gt; as your parameter name, how do you know what context the context is? Sorry, that was too much fun. Basically, what I am saying is if you have say &lt;code&gt;Spring ApplicationContext&lt;/code&gt; in with your integration tests with Vert.x what does &lt;code&gt;context&lt;/code&gt; represent? Spring or Vert.x test context.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;@RunWith(VertxUnitRunner.class)&lt;/code&gt; above your test class&lt;/li&gt;
&lt;li&gt;Remove any &lt;code&gt;VertxAssert.testComplete()&lt;/code&gt; those are gone. It needs &lt;code&gt;TestContext.async().complete()&lt;/code&gt;. It is also important to understand what &lt;code&gt;async()&lt;/code&gt; means. When to call it, when to complete it. It also allows you to do multiple &lt;code&gt;async()&lt;/code&gt; calls and nested ones. I think I needed that when I had a test that was a longer use case of many messages being sent, but only after responses to other ones occurred. For instance, to do chat in our app, you have to connect, subscribe, friend someone, then you can send a chat message. So that is 4 total Vert.x Messages sent from the Test client. And you can subscribe until connect completed, and you can send or receive messages unless you are subscribed and have a friend. So we need to have a few &lt;code&gt;async()&lt;/code&gt; calls in that scenario.&lt;/li&gt;
&lt;li&gt;What is in your &lt;code&gt;start&lt;/code&gt; method override. Make that an &lt;code&gt;@Before&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;What is in your &lt;code&gt;stop&lt;/code&gt; method override. Make that an &lt;code&gt;@After&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If you have your assertions have custom message &lt;em&gt;strings&lt;/em&gt; to log out when they fail, that parameter is now at the end of the &lt;code&gt;assert&lt;/code&gt; method call. Yes, this one can be painful.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;build-changes&quot;&gt;Build Changes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Remove all &lt;em&gt;vertx maven plugin&lt;/em&gt; code to generate modules, instead create &lt;em&gt;fat&lt;/em&gt; jars, which requires adding the &lt;em&gt;Shade maven plugin&lt;/em&gt; to put all jar files into a big fat jar. The vertx-examples project has &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/master/maven-simplest&quot;&gt;simplest-maven&lt;/a&gt; which has the stuff to create the fat jar. &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/master/gradle-simplest&quot;&gt;simplest-gradle&lt;/a&gt; is the gradle equivalent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you were running your application with &lt;code&gt;runMod&lt;/code&gt; or something like that then you need to create a &lt;em&gt;fat&lt;/em&gt; jar, changing the build file as in &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/blob/master/maven-simplest/pom.xml&quot;&gt;this one&lt;/a&gt; and create a Main class like here &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/blob/master/maven-simplest/src/main/java/io/vertx/example/HelloWorldEmbedded.java&quot;&gt;this one&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;class-code-changes&quot;&gt;Class/Code Changes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Verticle&lt;/code&gt; is now an interface and not a class to extend, so using Groovy as an example you now extend &lt;code&gt;GroovyVerticle&lt;/code&gt;. In Java extend &lt;code&gt;AbstractVerticle&lt;/code&gt; instead.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is no &lt;code&gt;registerHandler&lt;/code&gt; on the eventBus anymore. So everywhere you do that has to change to create/call &lt;code&gt;consumer()&lt;/code&gt; and to unregister that handler, you have to have a reference to the &lt;code&gt;MessageConsumer&lt;/code&gt; that &lt;code&gt;consumer()&lt;/code&gt; call returns and call its &lt;code&gt;unregister&lt;/code&gt; method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;JsonObject.toMap()&lt;/code&gt; changed to &lt;code&gt;JsonObject.getMap()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;JsonObject&lt;/code&gt; also removed all the &lt;code&gt;putXXX&lt;/code&gt; methods with just one &lt;code&gt;put&lt;/code&gt; method with overloaded versions for different types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;JsonObjectMessage&lt;/code&gt; no longer exists. What replaces depends on what you are doing. Meaning, if it is an &lt;code&gt;async&lt;/code&gt; callback to a deploy, you will get a &lt;code&gt;Message&lt;/code&gt; instance back that has &lt;code&gt;succeeded()&lt;/code&gt; or &lt;code&gt;failed()&lt;/code&gt; methods as well as &lt;code&gt;body()&lt;/code&gt; to check any results. If it is a &lt;code&gt;Consumer&lt;/code&gt;, it is typically a straight forward
&lt;code&gt;JsonObject&lt;/code&gt;. If you are in Groovy it is also a &lt;code&gt;JsonObject&lt;/code&gt;, but the &lt;code&gt;body()&lt;/code&gt; is a &lt;code&gt;Map&lt;/code&gt; which you can use directly now, instead of having to convert from &lt;code&gt;JsonObject&lt;/code&gt; to &lt;code&gt;Map&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There isn’t a &lt;code&gt;container&lt;/code&gt; variable in &lt;code&gt;Verticles&lt;/code&gt; anymore for deploying verticles and also a config file. You need to use &lt;code&gt;vertx.getOrCreateContext().config()&lt;/code&gt; to get to it. I used that in the SockJS Example code below.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;SharedData&lt;/code&gt; no longer has shared sets. It has a &lt;code&gt;Map&lt;/code&gt; of &lt;code&gt;SharedData&lt;/code&gt;, so an entry in that &lt;code&gt;Map&lt;/code&gt; of shared data could be the name of the set as the key, and a &lt;code&gt;Set&lt;/code&gt; as the value. It actually gives you more flexibility of what you put into Shared data, so this is actually a big win for us.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Getting the &lt;code&gt;writeHandlerID&lt;/code&gt; from a Socket type, is now a method call instead of &lt;code&gt;.writeHandlerID&lt;/code&gt;, so &lt;code&gt;.writeHandlerID()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;SockJSSocket&lt;/code&gt; is in &lt;em&gt;vertx-web&lt;/em&gt; package now, so include it to get the class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There isn’t a &lt;code&gt;SockJSServer&lt;/code&gt; class anymore either. So you will create a &lt;code&gt;WebServer&lt;/code&gt;, a &lt;code&gt;Router&lt;/code&gt;
and set SSL (if you are using SSL on the WebServer) then create a &lt;code&gt;SockJSHandler&lt;/code&gt; to assign to the router via the &lt;code&gt;route()&lt;/code&gt; method and &lt;code&gt;handler()&lt;/code&gt; methods in the Router api.
Here is an example of our code. Although I haven’t tested it yet. ;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;hljs groovy&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyVerticle&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;GroovyVerticle&lt;/span&gt; {&lt;/span&gt;
  Router router

  &lt;span class=&quot;hljs-annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;hljs-typename&quot;&gt;void&lt;/span&gt; start() &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; Exception {
     router = Router.router(vertx)
     (Map&lt;String, Object&gt;) sslConfig =
        (Map&lt;String, Object&gt;)vertx.getOrCreateContext()
          .config().get(&lt;span class=&quot;hljs-string&quot;&gt;&#39;ssl&#39;&lt;/span&gt;)

     HttpServer sslHttpServer = vertx.createHttpServer(
&lt;span class=&quot;hljs-label&quot;&gt;         SSL:&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,
&lt;span class=&quot;hljs-label&quot;&gt;         keyStorePath:&lt;/span&gt; sslConfig.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;keystore&quot;&lt;/span&gt;),
&lt;span class=&quot;hljs-label&quot;&gt;         keyStorePassword:&lt;/span&gt; sslConfig.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;password&quot;&lt;/span&gt;))

     startWebApiServer(sslHttpServer)
  }

  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-typename&quot;&gt;void&lt;/span&gt; startWebApiServer(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; HttpServer httpServer) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; sockHandler = SockJSHandler.create(vertx, [:])
    sockHandler.socketHandler {
      SockJSSocket ws -&gt; sockJSConnectHandler(ws)
    }
    router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/hdpoker&quot;&lt;/span&gt;).handler(sockHandler)
    httpServer.requestHandler(router.&amp;accept)
    httpServer.listen()
  }

}&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;more-testing-change&quot;&gt;More testing change&lt;/h4&gt;
&lt;p&gt;Testing messages in Integration Tests. To tell the test method that this has async calls put
&lt;code&gt;Async async = testContext.async()&lt;/code&gt; as the first line in the test method. Yes, this is a little redundant from above, but I always forgot to put &lt;code&gt;async()&lt;/code&gt; calls in my integration tests and they would pass so quickly, without sending anything out, because it wasn’t waiting anymore&lt;/p&gt;
&lt;h3 id=&quot;runtime-changes&quot;&gt;Runtime changes&lt;/h3&gt;
&lt;p&gt;If you don’t use Vert.x built-in Logging and need to use slf4j, then remember that you should set a system property called &lt;code&gt;vertx.logger-delegate-factory-class-name&lt;/code&gt; with the name of a Java class which implements the interface &lt;code&gt;LoggerFactory&lt;/code&gt;. Vert.x provides pre-built implementations for Log4J and SLF4J with the class names &lt;code&gt;io.vertx.core.logging.Log4jLogDelegateFactory&lt;/code&gt; and &lt;code&gt;io.vertx.core.logging.SLF4JLogDelegateFactory&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;still-working&quot;&gt;Still working&lt;/h2&gt;
&lt;p&gt;Well, that is all I have for you folks so far. We are still not done, as we haven’t gotten our application running with real clients just yet. But we do have all our integration tests from before completely passing
so, if something does come up, it should be a small one (KNOCK ON WOOD)&lt;/p&gt;
&lt;p&gt;Please feel free to post on the Vert.x Google Group with any comments or suggestions on what to add to this blog post or for Part Two.&lt;/p&gt;
&lt;p&gt;Thanks&lt;/p&gt;
&lt;p&gt;Mark S&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Mon, 06 Jul 2015 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/checklist-for-migrating-from-vert-x-2-1-x-to-vert-x-3-part-one</link>
          <guid isPermaLink="true">https://vertx.io/blog/checklist-for-migrating-from-vert-x-2-1-x-to-vert-x-3-part-one</guid>
          <author>
            <name>bytor99999</name>
            <uri>http://github.com/bytor99999</uri>
          </author>
        </item>
      
        <item>
          <title>Vert.x3 and PostgreSQL JSON type</title>
          <description>
      &lt;article&gt;&lt;p&gt;One of the interesting features of NoSQL databases is their schema-less mode of operation. This feature is very useful
during project prototyping and early development since at early the stages of development of projects all data
structures are not clear or have been defined yet. The reason of this post is not to discuss about that subject, but to
show that sometimes you can also use NoSQL with a more traditional database engine like &lt;a href=&quot;http://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since version &lt;a href=&quot;http://www.postgresql.org/docs/9.3/static/datatype-json.html&quot;&gt;9.3&lt;/a&gt; there is support for JSON however with
version &lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/datatype-json.html&quot;&gt;9.4&lt;/a&gt; there is even better support with the new type
JSONB. I will now show how to use the basic JSON type in a simple REST application written with Vert.x3:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/pmlopes/47f7f02b0b102b5e68d8.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Now all you need to do is play with this REST service, for this you can use curl to create a sale:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;$ curl \
    -i \
    -H &lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-Type: application/json&quot;&lt;/span&gt; \
    -X POST \
    &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;{&quot;id&quot;: 1, &quot;customer_name&quot;: &quot;John&quot;, &quot;items&quot;: {&quot;description&quot;: &quot;milk&quot;, &quot;quantity&quot;: 4}}&#39;&lt;/span&gt; \
    http://localhost:&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;/sales

HTTP/&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;201&lt;/span&gt; Created
Content-Length: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if you want to read that new document:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;$ curl -i -H &lt;span class=&quot;hljs-string&quot;&gt;&quot;Accept: application/json&quot;&lt;/span&gt; -X GET http://localhost:&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;/sales/&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
HTTP/&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt; OK
content-type: application/json
Content-Length: &lt;span class=&quot;hljs-number&quot;&gt;75&lt;/span&gt;

{&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;customer_name&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;items&quot;&lt;/span&gt;:{&lt;span class=&quot;hljs-string&quot;&gt;&quot;description&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;milk&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;quantity&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}}&lt;/code&gt;&lt;/pre&gt;&lt;/article&gt;
      </description>
          <pubDate>Fri, 03 Jul 2015 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/vert-x3-and-postgresql-json-type</link>
          <guid isPermaLink="true">https://vertx.io/blog/vert-x3-and-postgresql-json-type</guid>
          <author>
            <name>pmlopes</name>
            <uri>http://github.com/pmlopes</uri>
          </author>
        </item>
      
        <item>
          <title>Vert.x 3 init.d Script</title>
          <description>
      &lt;article&gt;&lt;p&gt;Let’s say you have a Vert.x 3 application you want to install on a Linux server. But you want the &lt;em&gt;old school&lt;/em&gt; way (I mean not the Docker way &amp;#9786;). So, in other words, you need an &lt;em&gt;init.d&lt;/em&gt; script. This post proposes an &lt;em&gt;init.d&lt;/em&gt; script that you can use to start/stop/restart a Vert.x 3 application.&lt;/p&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;The proposed script assumes your application is packaged as a &lt;em&gt;fat jar&lt;/em&gt;. So, your application is going to be launched using &lt;code&gt;java -jar your-fat-jar ...&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;the-script&quot;&gt;The script&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;init.d&lt;/em&gt; scripts have to reply to a set of &lt;em&gt;commands&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;start&lt;/code&gt; : starts the application (if not yet started)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stop&lt;/code&gt; : stops the application (if started)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;status&lt;/code&gt; : let you know if the application is started or not&lt;/li&gt;
&lt;li&gt;&lt;code&gt;restart&lt;/code&gt; : restart the application&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These &lt;em&gt;commands&lt;/em&gt; are invoked using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;service my-service-script start
service my-service-script stop
service my-service-script status
service my-service-script restart&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In general, service scripts are hooked in the boot and shutdown sequences to start and stop automatically during the system starts and stops.&lt;/p&gt;
&lt;p&gt;So, enough talks, let’s look at the script:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/cescoffier/ccc8b391787e93f4e6e0.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;using-the-script&quot;&gt;Using the script&lt;/h2&gt;
&lt;p&gt;First download the script from the &lt;a href=&quot;https://gist.githubusercontent.com/cescoffier/ccc8b391787e93f4e6e0/raw/my-vertx-application&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You need to set a couple of variables located at the beginning of the file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# The directory in which your application is installed&lt;/span&gt;
&lt;span class=&quot;hljs-variable&quot;&gt;APPLICATION_DIR=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;/opt/my-vertx-app&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;# The fat jar containing your application&lt;/span&gt;
&lt;span class=&quot;hljs-variable&quot;&gt;APPLICATION_JAR=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;maven-verticle-3.0.0-fat.jar&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;# The application argument such as -cluster -cluster-host ...&lt;/span&gt;
&lt;span class=&quot;hljs-variable&quot;&gt;APPLICATION_ARGS=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;# vert.x options and system properties (-Dfoo=bar).&lt;/span&gt;
&lt;span class=&quot;hljs-variable&quot;&gt;VERTX_OPTS=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;# The path to the Java command to use to launch the application (must be java 8+)&lt;/span&gt;
&lt;span class=&quot;hljs-variable&quot;&gt;JAVA=&lt;/span&gt;/opt/java/java/bin/java&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The rest of the script can stay as it is, but feel free to adapt it to your needs. Once you have set these variables based on your environment, move the file to &lt;code&gt;/etc/init.d&lt;/code&gt; and set it as executable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sudo&lt;/span&gt; mv my-vertx-application /etc/init.d
&lt;span class=&quot;hljs-built_in&quot;&gt;sudo&lt;/span&gt; chmod +x my-vertx-application&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, you should be able to start your application using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sudo&lt;/span&gt; service my-vertx-application start&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Depending to your operating system, adding the hooks to the boot and shutdown sequence differs. For instance on Ubuntu you need to use the &lt;code&gt;update-rc.d&lt;/code&gt; command while on CentOS &lt;code&gt;chkconfig&lt;/code&gt; is used&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That’s all, enjoy !&lt;/strong&gt;&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Thu, 02 Jul 2015 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/vert-x-3-init-d-script</link>
          <guid isPermaLink="true">https://vertx.io/blog/vert-x-3-init-d-script</guid>
          <author>
            <name>cescoffier</name>
            <uri>http://github.com/cescoffier</uri>
          </author>
        </item>
      
        <item>
          <title>Vert.x3 Web easy as Pi</title>
          <description>
      &lt;article&gt;&lt;p&gt;&lt;a href=&quot;http://vertx.io/docs/#web&quot;&gt;Vert.x Web&lt;/a&gt; distinguishes itself from traditional application servers like JavaEE by just
being a simple extension toolkit to &lt;a href=&quot;http://vertx.io/docs/#core&quot;&gt;Vert.x&lt;/a&gt;, which makes it quite lightweight and small but
nevertheless very powerful.&lt;/p&gt;
&lt;p&gt;One can create simple applications targeting &lt;em&gt;small&lt;/em&gt; devices such as Raspberry Pi without having to write much code but
still very fast as it is expected from any Vert.x application.&lt;/p&gt;
&lt;p&gt;Let’s for example think of making a &lt;a href=&quot;https://github.com/pmlopes/vert-x3-experiments/archive/experiments/rpi-cpuload.zip&quot;&gt;realtime cpu load visualization web app&lt;/a&gt;.
For this example we need a few things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/management/OperatingSystemMXBean.html&quot;&gt;MXBean&lt;/a&gt; to collect CPU load&lt;/li&gt;
&lt;li&gt;a &lt;a href=&quot;http://vertx.io/docs/vertx-core/java/#_writing_http_servers_and_clients&quot;&gt;HTTP server&lt;/a&gt; (to serve the static resources and host our app)&lt;/li&gt;
&lt;li&gt;a &lt;a href=&quot;http://vertx.io/docs/vertx-web/java/#_sockjs&quot;&gt;SockJS server&lt;/a&gt; to provide realtime updates&lt;/li&gt;
&lt;li&gt;a SockJS to &lt;a href=&quot;http://vertx.io/docs/vertx-web/java/#_sockjs_event_bus_bridge&quot;&gt;EventBus bridge&lt;/a&gt; to pass messages around&lt;/li&gt;
&lt;li&gt;some &lt;a href=&quot;http://d3js.org/&quot;&gt;visualization&lt;/a&gt; JS library&lt;/li&gt;
&lt;li&gt;a bit of coding&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To bootstrap this project we start by creating the &lt;a href=&quot;https://github.com/pmlopes/vert-x3-experiments/blob/experiments/rpi-cpuload/pom.xml&quot;&gt;pom.xml&lt;/a&gt;
file. A good start is always to consult the &lt;a href=&quot;https://github.com/vert-x3/vertx-examples&quot;&gt;examples&lt;/a&gt;,
and you should end up with something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;...
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.vertx.blog&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;rpi&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;1.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependencies&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.vertx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;vertx-core&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;3.0.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;

  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;io.vertx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;vertx-web&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;3.0.0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependencies&lt;/span&gt;&gt;&lt;/span&gt;
...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this moment you can start coding the application using the standard maven source &lt;code&gt;src/main/java&lt;/code&gt; and resource
&lt;code&gt;src/main/resouces&lt;/code&gt; locations. And add a the class &lt;a href=&quot;https://github.com/pmlopes/vert-x3-experiments/blob/experiments/rpi-cpuload/src/main/java/io/vertx/blog/RPiVerticle.java&quot;&gt;io.vertx.blog.RpiVerticle&lt;/a&gt;
to the project:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;RPiVerticle&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AbstractVerticle&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; OperatingSystemMXBean osMBean;

  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
      osMBean = ManagementFactory.newPlatformMXBeanProxy(ManagementFactory.getPlatformMBeanServer(),
          ManagementFactory.OPERATING_SYSTEM_MXBEAN_NAME, OperatingSystemMXBean.class);
    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; RuntimeException(e);
    }
  }

  &lt;span class=&quot;hljs-annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{

    Router router = Router.router(vertx);

    router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/eventbus/*&quot;&lt;/span&gt;).handler(SockJSHandler.create(vertx)
        .bridge(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BridgeOptions().addOutboundPermitted(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; PermittedOptions().setAddress(&lt;span class=&quot;hljs-string&quot;&gt;&quot;load&quot;&lt;/span&gt;))));

    router.route().handler(StaticHandler.create());

    vertx.createHttpServer().requestHandler(router::accept).listen(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;);

    vertx.setPeriodic(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, t -&gt; vertx.eventBus().publish(&lt;span class=&quot;hljs-string&quot;&gt;&quot;load&quot;&lt;/span&gt;,
        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject()
            .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;creatTime&quot;&lt;/span&gt;, System.currentTimeMillis())
            .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;cpuTime&quot;&lt;/span&gt;, osMBean.getSystemLoadAverage())));
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So let’s go through the code, first in the static constructor we initialize the &lt;code&gt;MXBean&lt;/code&gt; that will allow us to collect
the current &lt;code&gt;System Load Average&lt;/code&gt;, then on the &lt;code&gt;start&lt;/code&gt; method we create a &lt;code&gt;Vert.x Web Router&lt;/code&gt; and define that for all
requests starting with &lt;code&gt;/eventbus&lt;/code&gt; should be handled by the SockJS server, which we then bridge to the Vert.x
&lt;code&gt;EventBus&lt;/code&gt; and allow outbound messages addressed to the &lt;code&gt;load&lt;/code&gt; address.&lt;/p&gt;
&lt;p&gt;Since our application is a web application we will also server some static content with the &lt;code&gt;StaticHandler&lt;/code&gt; and we
finally start a &lt;code&gt;HTTP server&lt;/code&gt; listening on port &lt;code&gt;8080&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So now all we are missing is a way to push real time data to the client so we end up creating a &lt;code&gt;Periodic&lt;/code&gt; task that
repeats every 1000 milliseconds and sends some &lt;code&gt;JSON&lt;/code&gt; payload to the address &lt;code&gt;&quot;load&quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you run this application right now you won’t see much since there is no frontend yet, so let’s build a very basic
&lt;a href=&quot;https://github.com/pmlopes/vert-x3-experiments/blob/experiments/rpi-cpuload/src/main/resources/webroot/index.html&quot;&gt;index.html&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;...
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; eb = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; vertx.EventBus(&lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;.location + &lt;span class=&quot;hljs-string&quot;&gt;&quot;eventbus&quot;&lt;/span&gt;);

eb.onopen = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
  eb.registerHandler(&lt;span class=&quot;hljs-string&quot;&gt;&quot;load&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(msg)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (data.length === &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;) {
      &lt;span class=&quot;hljs-comment&quot;&gt;// when length of data equal 25 then pop data[0]&lt;/span&gt;
      data.shift();
    }
    data.push({
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;creatTime&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Date&lt;/span&gt;(msg.creatTime),
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;cpuTime&quot;&lt;/span&gt;: msg.cpuTime
    });
    render();
  });
};
...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s walk again the code, we start by opening a &lt;code&gt;EventBus&lt;/code&gt; bridge over &lt;code&gt;SockJS&lt;/code&gt; and register a handler &lt;code&gt;data&lt;/code&gt; to consume
messages sent to that address. Once such a message arrives we do some house keeping to avoid filling our browser memory
and then add the incoming message to the data queue and triger a rendering of the data. There is however one interesting
issue here, since the message payload is &lt;code&gt;JSON&lt;/code&gt; there is no native support for &lt;code&gt;Date&lt;/code&gt; objects so we need to do some
parsing from what arrives from the server. In this case the server sends a simple time since epoch number, but one can
choose any format he likes.&lt;/p&gt;
&lt;p&gt;At this moment you can build and package your app like &lt;code&gt;mvn clean package&lt;/code&gt;, then deploy it to your raspberrypi like:
&lt;code&gt;scp target/rpi-1.0-fat.jar pi@raspberrypi:~/&lt;/code&gt; and finally run it: &lt;code&gt;java -jar rpi-1.0-fat.jar&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Open a browser to &lt;a href=&quot;http://raspberrypi:8080&quot;&gt;see&lt;/a&gt; the realtime graph!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://vertx.io/assets/blog/vertx3-web-easy-as-pi/rpi.png&quot; alt=&quot;Screenshot&quot; class=&quot;img-responsive&quot;&gt;&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Wed, 01 Jul 2015 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/vert-x3-web-easy-as-pi</link>
          <guid isPermaLink="true">https://vertx.io/blog/vert-x3-web-easy-as-pi</guid>
          <author>
            <name>pmlopes</name>
            <uri>http://github.com/pmlopes</uri>
          </author>
        </item>
      
        <item>
          <title>Vert.x 2.1.6 released !</title>
          <description>
      &lt;article&gt;&lt;p&gt;The Vert.x team is pleased to announce the release of Vert.x &lt;strong&gt;2.1.6&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This is a maintenance release on the 2.x branch that fixes a few bugs and is designed for Vert.x 2 production users who cannot upgrade to 3.0 immediately.&lt;/p&gt;
&lt;p&gt;For the latest production version for new projects please see &lt;a href=&quot;http://vertx.io&quot;&gt;Vert.x 3.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Fixes in this release include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;runZip&lt;/em&gt; - fix bugs in unpacking zips&lt;/li&gt;
&lt;li&gt;&lt;em&gt;HttpClient&lt;/em&gt; - make sure writeHead is set to true before connect&lt;/li&gt;
&lt;li&gt;Upgrade to Hazelcast 3.5 to fix bug in &lt;code&gt;Multimap&lt;/code&gt; state.&lt;/li&gt;
&lt;li&gt;Workaround for Hazelcast bug which could result in inconsistent cluster state if multiple nodes shutdown concurrently&lt;/li&gt;
&lt;li&gt;Clustering fixes related to clearing up state in case of event bus connections closing and on close of event bus.&lt;/li&gt;
&lt;li&gt;Fix message replies to nodes other than the node the SockJS bridge is deployed on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The artifacts has been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%222.1.6%22&quot;&gt;Maven Central&lt;/a&gt;, and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/2.1.6/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
      </description>
          <pubDate>Tue, 30 Jun 2015 02:00:00 +0200</pubDate>
          <link>https://vertx.io/blog/vert-x-2-1-6-released</link>
          <guid isPermaLink="true">https://vertx.io/blog/vert-x-2-1-6-released</guid>
          <author>
            <name>cescoffier</name>
            <uri>http://github.com/cescoffier</uri>
          </author>
        </item>
      
    </channel>
</rss>
